<?php
/**
 * CompaniesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * CompaniesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CompaniesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation companyCreditReport
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $connect_id The connectId (optionally Safe Number where available) of the Company required to order their Credit Report. Obtained from &#x60;/companies&#x60; search results. (required)
     * @param  string $language Report Language - The JSON structure of the Report is language invariant, but field content will return as the given language, where available. (optional, default to en)
     * @param  string $template Optional parameter to request a Templated Company Report. A Template adds/reduces sections of the Credit Report depending on your subscription. Do not include this parameter if you have not been given a template to use. (optional, default to full)
     * @param  string $custom_data Additional Report Parameters e.g.  German Report Reason Code value is &#x60;de_reason_code::1&#x60; . Use /reportcustomdata/{country} endpoint to see all values. (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CreditsafeGlobalDataReportsCompanyReportResponse
     */
    public function companyCreditReport($authorization, $connect_id, $language = 'en', $template = 'full', $custom_data = null, $call_ref = null)
    {
        list($response) = $this->companyCreditReportWithHttpInfo($authorization, $connect_id, $language, $template, $custom_data, $call_ref);
        return $response;
    }

    /**
     * Operation companyCreditReportWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $connect_id The connectId (optionally Safe Number where available) of the Company required to order their Credit Report. Obtained from &#x60;/companies&#x60; search results. (required)
     * @param  string $language Report Language - The JSON structure of the Report is language invariant, but field content will return as the given language, where available. (optional, default to en)
     * @param  string $template Optional parameter to request a Templated Company Report. A Template adds/reduces sections of the Credit Report depending on your subscription. Do not include this parameter if you have not been given a template to use. (optional, default to full)
     * @param  string $custom_data Additional Report Parameters e.g.  German Report Reason Code value is &#x60;de_reason_code::1&#x60; . Use /reportcustomdata/{country} endpoint to see all values. (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CreditsafeGlobalDataReportsCompanyReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function companyCreditReportWithHttpInfo($authorization, $connect_id, $language = 'en', $template = 'full', $custom_data = null, $call_ref = null)
    {
        $returnType = '\Swagger\Client\Model\CreditsafeGlobalDataReportsCompanyReportResponse';
        $request = $this->companyCreditReportRequest($authorization, $connect_id, $language, $template, $custom_data, $call_ref);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CreditsafeGlobalDataReportsCompanyReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companyCreditReportAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $connect_id The connectId (optionally Safe Number where available) of the Company required to order their Credit Report. Obtained from &#x60;/companies&#x60; search results. (required)
     * @param  string $language Report Language - The JSON structure of the Report is language invariant, but field content will return as the given language, where available. (optional, default to en)
     * @param  string $template Optional parameter to request a Templated Company Report. A Template adds/reduces sections of the Credit Report depending on your subscription. Do not include this parameter if you have not been given a template to use. (optional, default to full)
     * @param  string $custom_data Additional Report Parameters e.g.  German Report Reason Code value is &#x60;de_reason_code::1&#x60; . Use /reportcustomdata/{country} endpoint to see all values. (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyCreditReportAsync($authorization, $connect_id, $language = 'en', $template = 'full', $custom_data = null, $call_ref = null)
    {
        return $this->companyCreditReportAsyncWithHttpInfo($authorization, $connect_id, $language, $template, $custom_data, $call_ref)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companyCreditReportAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $connect_id The connectId (optionally Safe Number where available) of the Company required to order their Credit Report. Obtained from &#x60;/companies&#x60; search results. (required)
     * @param  string $language Report Language - The JSON structure of the Report is language invariant, but field content will return as the given language, where available. (optional, default to en)
     * @param  string $template Optional parameter to request a Templated Company Report. A Template adds/reduces sections of the Credit Report depending on your subscription. Do not include this parameter if you have not been given a template to use. (optional, default to full)
     * @param  string $custom_data Additional Report Parameters e.g.  German Report Reason Code value is &#x60;de_reason_code::1&#x60; . Use /reportcustomdata/{country} endpoint to see all values. (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companyCreditReportAsyncWithHttpInfo($authorization, $connect_id, $language = 'en', $template = 'full', $custom_data = null, $call_ref = null)
    {
        $returnType = '\Swagger\Client\Model\CreditsafeGlobalDataReportsCompanyReportResponse';
        $request = $this->companyCreditReportRequest($authorization, $connect_id, $language, $template, $custom_data, $call_ref);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companyCreditReport'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $connect_id The connectId (optionally Safe Number where available) of the Company required to order their Credit Report. Obtained from &#x60;/companies&#x60; search results. (required)
     * @param  string $language Report Language - The JSON structure of the Report is language invariant, but field content will return as the given language, where available. (optional, default to en)
     * @param  string $template Optional parameter to request a Templated Company Report. A Template adds/reduces sections of the Credit Report depending on your subscription. Do not include this parameter if you have not been given a template to use. (optional, default to full)
     * @param  string $custom_data Additional Report Parameters e.g.  German Report Reason Code value is &#x60;de_reason_code::1&#x60; . Use /reportcustomdata/{country} endpoint to see all values. (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function companyCreditReportRequest($authorization, $connect_id, $language = 'en', $template = 'full', $custom_data = null, $call_ref = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling companyCreditReport'
            );
        }
        // verify the required parameter 'connect_id' is set
        if ($connect_id === null || (is_array($connect_id) && count($connect_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connect_id when calling companyCreditReport'
            );
        }

        $resourcePath = '/companies/{connectId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language, null);
        }
        // query params
        if ($template !== null) {
            $queryParams['template'] = ObjectSerializer::toQueryValue($template, null);
        }
        // query params
        if ($custom_data !== null) {
            $queryParams['customData'] = ObjectSerializer::toQueryValue($custom_data, null);
        }
        // query params
        if ($call_ref !== null) {
            $queryParams['callRef'] = ObjectSerializer::toQueryValue($call_ref, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($connect_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connectId' . '}',
                ObjectSerializer::toPathValue($connect_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/pdf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/pdf'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companySearch
     *
     * @param  string $authorization Authorization Token (required)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCountryCode[] $countries comma-separated list of iso-2 country codes (required)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  string $language Typically only used for Countries where more than one Company Name exists for different languages e.g.  Japanese Kanji and English. (optional)
     * @param  string $id connectId - The primary Company identifier that is used to uniquely identify all companies across Creditsafes Universe and Partner Network. This is returned on all Company Search Results. Use this field to use in other operations such as Ordering Company Credit Report by Id, and Adding Company to Monitoring Portfolio. (optional)
     * @param  string $safe_no Safe Number - Identifier for Companies in Creditsafe&#x27;s Home Countries. (optional)
     * @param  string $reg_no Local Company Identifier - The Company identifier associated with it&#x27;s Domestic Filing Agency. i.e. French SIREN/SIRET, United Kingdom Companies House CRN. (optional)
     * @param  string $vat_no Company VAT Number (optional)
     * @param  string $name Company Name (optional)
     * @param  string $trade_name Trade Name of the Company, typically used in Countries where Name is not uniquely registered. (optional)
     * @param  string $acronym A (non-unique) identifier to look for Companies by their more commonly known acronym rather than their lesser known full name. Acronym is predominantly available on French Companies. (optional)
     * @param  bool $exact Provide as true to find Companies matching a Name exactly. (optional)
     * @param  string $address address (optional)
     * @param  string $street Address part identifier - Street of the Company (optional)
     * @param  string $house_no Address part identifier - House/Building Number of the Company (optional)
     * @param  string $city Address part identifier - City of the Company (optional)
     * @param  string $post_code Address part identifier - Postcode/Zip Code of the Company. Can be provided partially to extend to a region with a * as a wildcard. I.e. CF* can represent all postcodes starting with CF. (optional)
     * @param  string $province Address part identifier - Province/State of the Company (optional)
     * @param  string $call_ref Call Reference (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataOfficeType $office_type office_type (optional)
     * @param  string[] $phone_no Provides Array of phone numbers or Null (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCompanyStatus $status status (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCompanyType $type type (optional)
     * @param  string $website website (optional)
     * @param  string $custom_data custom_data (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse200
     */
    public function companySearch($authorization, $countries, $page = '1', $page_size = null, $language = null, $id = null, $safe_no = null, $reg_no = null, $vat_no = null, $name = null, $trade_name = null, $acronym = null, $exact = null, $address = null, $street = null, $house_no = null, $city = null, $post_code = null, $province = null, $call_ref = null, $office_type = null, $phone_no = null, $status = null, $type = null, $website = null, $custom_data = null)
    {
        list($response) = $this->companySearchWithHttpInfo($authorization, $countries, $page, $page_size, $language, $id, $safe_no, $reg_no, $vat_no, $name, $trade_name, $acronym, $exact, $address, $street, $house_no, $city, $post_code, $province, $call_ref, $office_type, $phone_no, $status, $type, $website, $custom_data);
        return $response;
    }

    /**
     * Operation companySearchWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCountryCode[] $countries comma-separated list of iso-2 country codes (required)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  string $language Typically only used for Countries where more than one Company Name exists for different languages e.g.  Japanese Kanji and English. (optional)
     * @param  string $id connectId - The primary Company identifier that is used to uniquely identify all companies across Creditsafes Universe and Partner Network. This is returned on all Company Search Results. Use this field to use in other operations such as Ordering Company Credit Report by Id, and Adding Company to Monitoring Portfolio. (optional)
     * @param  string $safe_no Safe Number - Identifier for Companies in Creditsafe&#x27;s Home Countries. (optional)
     * @param  string $reg_no Local Company Identifier - The Company identifier associated with it&#x27;s Domestic Filing Agency. i.e. French SIREN/SIRET, United Kingdom Companies House CRN. (optional)
     * @param  string $vat_no Company VAT Number (optional)
     * @param  string $name Company Name (optional)
     * @param  string $trade_name Trade Name of the Company, typically used in Countries where Name is not uniquely registered. (optional)
     * @param  string $acronym A (non-unique) identifier to look for Companies by their more commonly known acronym rather than their lesser known full name. Acronym is predominantly available on French Companies. (optional)
     * @param  bool $exact Provide as true to find Companies matching a Name exactly. (optional)
     * @param  string $address (optional)
     * @param  string $street Address part identifier - Street of the Company (optional)
     * @param  string $house_no Address part identifier - House/Building Number of the Company (optional)
     * @param  string $city Address part identifier - City of the Company (optional)
     * @param  string $post_code Address part identifier - Postcode/Zip Code of the Company. Can be provided partially to extend to a region with a * as a wildcard. I.e. CF* can represent all postcodes starting with CF. (optional)
     * @param  string $province Address part identifier - Province/State of the Company (optional)
     * @param  string $call_ref Call Reference (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataOfficeType $office_type (optional)
     * @param  string[] $phone_no Provides Array of phone numbers or Null (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCompanyStatus $status (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCompanyType $type (optional)
     * @param  string $website (optional)
     * @param  string $custom_data (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function companySearchWithHttpInfo($authorization, $countries, $page = '1', $page_size = null, $language = null, $id = null, $safe_no = null, $reg_no = null, $vat_no = null, $name = null, $trade_name = null, $acronym = null, $exact = null, $address = null, $street = null, $house_no = null, $city = null, $post_code = null, $province = null, $call_ref = null, $office_type = null, $phone_no = null, $status = null, $type = null, $website = null, $custom_data = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse200';
        $request = $this->companySearchRequest($authorization, $countries, $page, $page_size, $language, $id, $safe_no, $reg_no, $vat_no, $name, $trade_name, $acronym, $exact, $address, $street, $house_no, $city, $post_code, $province, $call_ref, $office_type, $phone_no, $status, $type, $website, $custom_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companySearchAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCountryCode[] $countries comma-separated list of iso-2 country codes (required)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  string $language Typically only used for Countries where more than one Company Name exists for different languages e.g.  Japanese Kanji and English. (optional)
     * @param  string $id connectId - The primary Company identifier that is used to uniquely identify all companies across Creditsafes Universe and Partner Network. This is returned on all Company Search Results. Use this field to use in other operations such as Ordering Company Credit Report by Id, and Adding Company to Monitoring Portfolio. (optional)
     * @param  string $safe_no Safe Number - Identifier for Companies in Creditsafe&#x27;s Home Countries. (optional)
     * @param  string $reg_no Local Company Identifier - The Company identifier associated with it&#x27;s Domestic Filing Agency. i.e. French SIREN/SIRET, United Kingdom Companies House CRN. (optional)
     * @param  string $vat_no Company VAT Number (optional)
     * @param  string $name Company Name (optional)
     * @param  string $trade_name Trade Name of the Company, typically used in Countries where Name is not uniquely registered. (optional)
     * @param  string $acronym A (non-unique) identifier to look for Companies by their more commonly known acronym rather than their lesser known full name. Acronym is predominantly available on French Companies. (optional)
     * @param  bool $exact Provide as true to find Companies matching a Name exactly. (optional)
     * @param  string $address (optional)
     * @param  string $street Address part identifier - Street of the Company (optional)
     * @param  string $house_no Address part identifier - House/Building Number of the Company (optional)
     * @param  string $city Address part identifier - City of the Company (optional)
     * @param  string $post_code Address part identifier - Postcode/Zip Code of the Company. Can be provided partially to extend to a region with a * as a wildcard. I.e. CF* can represent all postcodes starting with CF. (optional)
     * @param  string $province Address part identifier - Province/State of the Company (optional)
     * @param  string $call_ref Call Reference (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataOfficeType $office_type (optional)
     * @param  string[] $phone_no Provides Array of phone numbers or Null (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCompanyStatus $status (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCompanyType $type (optional)
     * @param  string $website (optional)
     * @param  string $custom_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companySearchAsync($authorization, $countries, $page = '1', $page_size = null, $language = null, $id = null, $safe_no = null, $reg_no = null, $vat_no = null, $name = null, $trade_name = null, $acronym = null, $exact = null, $address = null, $street = null, $house_no = null, $city = null, $post_code = null, $province = null, $call_ref = null, $office_type = null, $phone_no = null, $status = null, $type = null, $website = null, $custom_data = null)
    {
        return $this->companySearchAsyncWithHttpInfo($authorization, $countries, $page, $page_size, $language, $id, $safe_no, $reg_no, $vat_no, $name, $trade_name, $acronym, $exact, $address, $street, $house_no, $city, $post_code, $province, $call_ref, $office_type, $phone_no, $status, $type, $website, $custom_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companySearchAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCountryCode[] $countries comma-separated list of iso-2 country codes (required)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  string $language Typically only used for Countries where more than one Company Name exists for different languages e.g.  Japanese Kanji and English. (optional)
     * @param  string $id connectId - The primary Company identifier that is used to uniquely identify all companies across Creditsafes Universe and Partner Network. This is returned on all Company Search Results. Use this field to use in other operations such as Ordering Company Credit Report by Id, and Adding Company to Monitoring Portfolio. (optional)
     * @param  string $safe_no Safe Number - Identifier for Companies in Creditsafe&#x27;s Home Countries. (optional)
     * @param  string $reg_no Local Company Identifier - The Company identifier associated with it&#x27;s Domestic Filing Agency. i.e. French SIREN/SIRET, United Kingdom Companies House CRN. (optional)
     * @param  string $vat_no Company VAT Number (optional)
     * @param  string $name Company Name (optional)
     * @param  string $trade_name Trade Name of the Company, typically used in Countries where Name is not uniquely registered. (optional)
     * @param  string $acronym A (non-unique) identifier to look for Companies by their more commonly known acronym rather than their lesser known full name. Acronym is predominantly available on French Companies. (optional)
     * @param  bool $exact Provide as true to find Companies matching a Name exactly. (optional)
     * @param  string $address (optional)
     * @param  string $street Address part identifier - Street of the Company (optional)
     * @param  string $house_no Address part identifier - House/Building Number of the Company (optional)
     * @param  string $city Address part identifier - City of the Company (optional)
     * @param  string $post_code Address part identifier - Postcode/Zip Code of the Company. Can be provided partially to extend to a region with a * as a wildcard. I.e. CF* can represent all postcodes starting with CF. (optional)
     * @param  string $province Address part identifier - Province/State of the Company (optional)
     * @param  string $call_ref Call Reference (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataOfficeType $office_type (optional)
     * @param  string[] $phone_no Provides Array of phone numbers or Null (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCompanyStatus $status (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCompanyType $type (optional)
     * @param  string $website (optional)
     * @param  string $custom_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companySearchAsyncWithHttpInfo($authorization, $countries, $page = '1', $page_size = null, $language = null, $id = null, $safe_no = null, $reg_no = null, $vat_no = null, $name = null, $trade_name = null, $acronym = null, $exact = null, $address = null, $street = null, $house_no = null, $city = null, $post_code = null, $province = null, $call_ref = null, $office_type = null, $phone_no = null, $status = null, $type = null, $website = null, $custom_data = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse200';
        $request = $this->companySearchRequest($authorization, $countries, $page, $page_size, $language, $id, $safe_no, $reg_no, $vat_no, $name, $trade_name, $acronym, $exact, $address, $street, $house_no, $city, $post_code, $province, $call_ref, $office_type, $phone_no, $status, $type, $website, $custom_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companySearch'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCountryCode[] $countries comma-separated list of iso-2 country codes (required)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  string $language Typically only used for Countries where more than one Company Name exists for different languages e.g.  Japanese Kanji and English. (optional)
     * @param  string $id connectId - The primary Company identifier that is used to uniquely identify all companies across Creditsafes Universe and Partner Network. This is returned on all Company Search Results. Use this field to use in other operations such as Ordering Company Credit Report by Id, and Adding Company to Monitoring Portfolio. (optional)
     * @param  string $safe_no Safe Number - Identifier for Companies in Creditsafe&#x27;s Home Countries. (optional)
     * @param  string $reg_no Local Company Identifier - The Company identifier associated with it&#x27;s Domestic Filing Agency. i.e. French SIREN/SIRET, United Kingdom Companies House CRN. (optional)
     * @param  string $vat_no Company VAT Number (optional)
     * @param  string $name Company Name (optional)
     * @param  string $trade_name Trade Name of the Company, typically used in Countries where Name is not uniquely registered. (optional)
     * @param  string $acronym A (non-unique) identifier to look for Companies by their more commonly known acronym rather than their lesser known full name. Acronym is predominantly available on French Companies. (optional)
     * @param  bool $exact Provide as true to find Companies matching a Name exactly. (optional)
     * @param  string $address (optional)
     * @param  string $street Address part identifier - Street of the Company (optional)
     * @param  string $house_no Address part identifier - House/Building Number of the Company (optional)
     * @param  string $city Address part identifier - City of the Company (optional)
     * @param  string $post_code Address part identifier - Postcode/Zip Code of the Company. Can be provided partially to extend to a region with a * as a wildcard. I.e. CF* can represent all postcodes starting with CF. (optional)
     * @param  string $province Address part identifier - Province/State of the Company (optional)
     * @param  string $call_ref Call Reference (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataOfficeType $office_type (optional)
     * @param  string[] $phone_no Provides Array of phone numbers or Null (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCompanyStatus $status (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCompanyType $type (optional)
     * @param  string $website (optional)
     * @param  string $custom_data (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function companySearchRequest($authorization, $countries, $page = '1', $page_size = null, $language = null, $id = null, $safe_no = null, $reg_no = null, $vat_no = null, $name = null, $trade_name = null, $acronym = null, $exact = null, $address = null, $street = null, $house_no = null, $city = null, $post_code = null, $province = null, $call_ref = null, $office_type = null, $phone_no = null, $status = null, $type = null, $website = null, $custom_data = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling companySearch'
            );
        }
        // verify the required parameter 'countries' is set
        if ($countries === null || (is_array($countries) && count($countries) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $countries when calling companySearch'
            );
        }

        $resourcePath = '/companies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if (is_array($countries)) {
            $countries = ObjectSerializer::serializeCollection($countries, 'multi', true);
        }
        if ($countries !== null) {
            $queryParams['countries'] = ObjectSerializer::toQueryValue($countries, null);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language, null);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, null);
        }
        // query params
        if ($safe_no !== null) {
            $queryParams['safeNo'] = ObjectSerializer::toQueryValue($safe_no, null);
        }
        // query params
        if ($reg_no !== null) {
            $queryParams['regNo'] = ObjectSerializer::toQueryValue($reg_no, null);
        }
        // query params
        if ($vat_no !== null) {
            $queryParams['vatNo'] = ObjectSerializer::toQueryValue($vat_no, null);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name, null);
        }
        // query params
        if ($trade_name !== null) {
            $queryParams['tradeName'] = ObjectSerializer::toQueryValue($trade_name, null);
        }
        // query params
        if ($acronym !== null) {
            $queryParams['acronym'] = ObjectSerializer::toQueryValue($acronym, null);
        }
        // query params
        if ($exact !== null) {
            $queryParams['exact'] = ObjectSerializer::toQueryValue($exact, null);
        }
        // query params
        if ($address !== null) {
            $queryParams['address'] = ObjectSerializer::toQueryValue($address, null);
        }
        // query params
        if ($street !== null) {
            $queryParams['street'] = ObjectSerializer::toQueryValue($street, null);
        }
        // query params
        if ($house_no !== null) {
            $queryParams['houseNo'] = ObjectSerializer::toQueryValue($house_no, null);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = ObjectSerializer::toQueryValue($city, null);
        }
        // query params
        if ($post_code !== null) {
            $queryParams['postCode'] = ObjectSerializer::toQueryValue($post_code, null);
        }
        // query params
        if ($province !== null) {
            $queryParams['province'] = ObjectSerializer::toQueryValue($province, null);
        }
        // query params
        if ($call_ref !== null) {
            $queryParams['callRef'] = ObjectSerializer::toQueryValue($call_ref, null);
        }
        // query params
        if ($office_type !== null) {
            $queryParams['officeType'] = ObjectSerializer::toQueryValue($office_type, null);
        }
        // query params
        if (is_array($phone_no)) {
            $phone_no = ObjectSerializer::serializeCollection($phone_no, 'multi', true);
        }
        if ($phone_no !== null) {
            $queryParams['phoneNo'] = ObjectSerializer::toQueryValue($phone_no, null);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status, null);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type, null);
        }
        // query params
        if ($website !== null) {
            $queryParams['website'] = ObjectSerializer::toQueryValue($website, null);
        }
        // query params
        if ($custom_data !== null) {
            $queryParams['customData'] = ObjectSerializer::toQueryValue($custom_data, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation companySearchCriteria
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $countries A comma separated list of ISO/Alpha 2 format country codes, or singular country Code. e.g. US,GB will return the common searchable Company fields in the United States and Great Britain. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return null[]
     */
    public function companySearchCriteria($authorization, $countries = null)
    {
        list($response) = $this->companySearchCriteriaWithHttpInfo($authorization, $countries);
        return $response;
    }

    /**
     * Operation companySearchCriteriaWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $countries A comma separated list of ISO/Alpha 2 format country codes, or singular country Code. e.g. US,GB will return the common searchable Company fields in the United States and Great Britain. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null[], HTTP status code, HTTP response headers (array of strings)
     */
    public function companySearchCriteriaWithHttpInfo($authorization, $countries = null)
    {
        $returnType = 'null[]';
        $request = $this->companySearchCriteriaRequest($authorization, $countries);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'null[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation companySearchCriteriaAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $countries A comma separated list of ISO/Alpha 2 format country codes, or singular country Code. e.g. US,GB will return the common searchable Company fields in the United States and Great Britain. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companySearchCriteriaAsync($authorization, $countries = null)
    {
        return $this->companySearchCriteriaAsyncWithHttpInfo($authorization, $countries)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation companySearchCriteriaAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $countries A comma separated list of ISO/Alpha 2 format country codes, or singular country Code. e.g. US,GB will return the common searchable Company fields in the United States and Great Britain. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function companySearchCriteriaAsyncWithHttpInfo($authorization, $countries = null)
    {
        $returnType = 'null[]';
        $request = $this->companySearchCriteriaRequest($authorization, $countries);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'companySearchCriteria'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $countries A comma separated list of ISO/Alpha 2 format country codes, or singular country Code. e.g. US,GB will return the common searchable Company fields in the United States and Great Britain. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function companySearchCriteriaRequest($authorization, $countries = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling companySearchCriteria'
            );
        }

        $resourcePath = '/companies/searchcriteria';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($countries !== null) {
            $queryParams['countries'] = ObjectSerializer::toQueryValue($countries, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation confidenceMatchSearch
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $country Iso-2 country code (required)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  int $match_threshold Return matches above this score (900 - 999) (optional)
     * @param  string $reg_no Local Company Identifier - The Company identifier associated with it&#x27;s Domestic Filing Agency. i.e. French SIREN/SIRET, United Kingdom Companies House CRN. (optional)
     * @param  string $vat_no Company VAT Number (optional)
     * @param  string $name Company Name (optional)
     * @param  string $street Address part identifier - Street of the Company (optional)
     * @param  string $house_no Address part identifier - House/Building Number of the Company (optional)
     * @param  string $city Address part identifier - City of the Company (optional)
     * @param  string $post_code Address part identifier - Postcode/Zip Code of the Company. (optional)
     * @param  string $province Address part identifier - Province of the Company (optional)
     * @param  string $state Address part identifier - State of the Company (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataOfficeType $office_type office_type (optional)
     * @param  string $phone_no phone_no (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCompanyStatus $status status (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCompanyType $type type (optional)
     * @param  string $website website (optional)
     * @param  string $reference1 Customer supplied free text reference 1 of 3 (optional)
     * @param  string $reference2 Customer supplied free text reference 2 of 3 (optional)
     * @param  string $reference3 Customer supplied free text reference 3 of 3 (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2001
     */
    public function confidenceMatchSearch($authorization, $country, $page = '1', $page_size = null, $match_threshold = null, $reg_no = null, $vat_no = null, $name = null, $street = null, $house_no = null, $city = null, $post_code = null, $province = null, $state = null, $office_type = null, $phone_no = null, $status = null, $type = null, $website = null, $reference1 = null, $reference2 = null, $reference3 = null, $call_ref = null)
    {
        list($response) = $this->confidenceMatchSearchWithHttpInfo($authorization, $country, $page, $page_size, $match_threshold, $reg_no, $vat_no, $name, $street, $house_no, $city, $post_code, $province, $state, $office_type, $phone_no, $status, $type, $website, $reference1, $reference2, $reference3, $call_ref);
        return $response;
    }

    /**
     * Operation confidenceMatchSearchWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $country Iso-2 country code (required)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  int $match_threshold Return matches above this score (900 - 999) (optional)
     * @param  string $reg_no Local Company Identifier - The Company identifier associated with it&#x27;s Domestic Filing Agency. i.e. French SIREN/SIRET, United Kingdom Companies House CRN. (optional)
     * @param  string $vat_no Company VAT Number (optional)
     * @param  string $name Company Name (optional)
     * @param  string $street Address part identifier - Street of the Company (optional)
     * @param  string $house_no Address part identifier - House/Building Number of the Company (optional)
     * @param  string $city Address part identifier - City of the Company (optional)
     * @param  string $post_code Address part identifier - Postcode/Zip Code of the Company. (optional)
     * @param  string $province Address part identifier - Province of the Company (optional)
     * @param  string $state Address part identifier - State of the Company (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataOfficeType $office_type (optional)
     * @param  string $phone_no (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCompanyStatus $status (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCompanyType $type (optional)
     * @param  string $website (optional)
     * @param  string $reference1 Customer supplied free text reference 1 of 3 (optional)
     * @param  string $reference2 Customer supplied free text reference 2 of 3 (optional)
     * @param  string $reference3 Customer supplied free text reference 3 of 3 (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function confidenceMatchSearchWithHttpInfo($authorization, $country, $page = '1', $page_size = null, $match_threshold = null, $reg_no = null, $vat_no = null, $name = null, $street = null, $house_no = null, $city = null, $post_code = null, $province = null, $state = null, $office_type = null, $phone_no = null, $status = null, $type = null, $website = null, $reference1 = null, $reference2 = null, $reference3 = null, $call_ref = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2001';
        $request = $this->confidenceMatchSearchRequest($authorization, $country, $page, $page_size, $match_threshold, $reg_no, $vat_no, $name, $street, $house_no, $city, $post_code, $province, $state, $office_type, $phone_no, $status, $type, $website, $reference1, $reference2, $reference3, $call_ref);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation confidenceMatchSearchAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $country Iso-2 country code (required)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  int $match_threshold Return matches above this score (900 - 999) (optional)
     * @param  string $reg_no Local Company Identifier - The Company identifier associated with it&#x27;s Domestic Filing Agency. i.e. French SIREN/SIRET, United Kingdom Companies House CRN. (optional)
     * @param  string $vat_no Company VAT Number (optional)
     * @param  string $name Company Name (optional)
     * @param  string $street Address part identifier - Street of the Company (optional)
     * @param  string $house_no Address part identifier - House/Building Number of the Company (optional)
     * @param  string $city Address part identifier - City of the Company (optional)
     * @param  string $post_code Address part identifier - Postcode/Zip Code of the Company. (optional)
     * @param  string $province Address part identifier - Province of the Company (optional)
     * @param  string $state Address part identifier - State of the Company (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataOfficeType $office_type (optional)
     * @param  string $phone_no (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCompanyStatus $status (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCompanyType $type (optional)
     * @param  string $website (optional)
     * @param  string $reference1 Customer supplied free text reference 1 of 3 (optional)
     * @param  string $reference2 Customer supplied free text reference 2 of 3 (optional)
     * @param  string $reference3 Customer supplied free text reference 3 of 3 (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confidenceMatchSearchAsync($authorization, $country, $page = '1', $page_size = null, $match_threshold = null, $reg_no = null, $vat_no = null, $name = null, $street = null, $house_no = null, $city = null, $post_code = null, $province = null, $state = null, $office_type = null, $phone_no = null, $status = null, $type = null, $website = null, $reference1 = null, $reference2 = null, $reference3 = null, $call_ref = null)
    {
        return $this->confidenceMatchSearchAsyncWithHttpInfo($authorization, $country, $page, $page_size, $match_threshold, $reg_no, $vat_no, $name, $street, $house_no, $city, $post_code, $province, $state, $office_type, $phone_no, $status, $type, $website, $reference1, $reference2, $reference3, $call_ref)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confidenceMatchSearchAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $country Iso-2 country code (required)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  int $match_threshold Return matches above this score (900 - 999) (optional)
     * @param  string $reg_no Local Company Identifier - The Company identifier associated with it&#x27;s Domestic Filing Agency. i.e. French SIREN/SIRET, United Kingdom Companies House CRN. (optional)
     * @param  string $vat_no Company VAT Number (optional)
     * @param  string $name Company Name (optional)
     * @param  string $street Address part identifier - Street of the Company (optional)
     * @param  string $house_no Address part identifier - House/Building Number of the Company (optional)
     * @param  string $city Address part identifier - City of the Company (optional)
     * @param  string $post_code Address part identifier - Postcode/Zip Code of the Company. (optional)
     * @param  string $province Address part identifier - Province of the Company (optional)
     * @param  string $state Address part identifier - State of the Company (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataOfficeType $office_type (optional)
     * @param  string $phone_no (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCompanyStatus $status (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCompanyType $type (optional)
     * @param  string $website (optional)
     * @param  string $reference1 Customer supplied free text reference 1 of 3 (optional)
     * @param  string $reference2 Customer supplied free text reference 2 of 3 (optional)
     * @param  string $reference3 Customer supplied free text reference 3 of 3 (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confidenceMatchSearchAsyncWithHttpInfo($authorization, $country, $page = '1', $page_size = null, $match_threshold = null, $reg_no = null, $vat_no = null, $name = null, $street = null, $house_no = null, $city = null, $post_code = null, $province = null, $state = null, $office_type = null, $phone_no = null, $status = null, $type = null, $website = null, $reference1 = null, $reference2 = null, $reference3 = null, $call_ref = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2001';
        $request = $this->confidenceMatchSearchRequest($authorization, $country, $page, $page_size, $match_threshold, $reg_no, $vat_no, $name, $street, $house_no, $city, $post_code, $province, $state, $office_type, $phone_no, $status, $type, $website, $reference1, $reference2, $reference3, $call_ref);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'confidenceMatchSearch'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $country Iso-2 country code (required)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  int $match_threshold Return matches above this score (900 - 999) (optional)
     * @param  string $reg_no Local Company Identifier - The Company identifier associated with it&#x27;s Domestic Filing Agency. i.e. French SIREN/SIRET, United Kingdom Companies House CRN. (optional)
     * @param  string $vat_no Company VAT Number (optional)
     * @param  string $name Company Name (optional)
     * @param  string $street Address part identifier - Street of the Company (optional)
     * @param  string $house_no Address part identifier - House/Building Number of the Company (optional)
     * @param  string $city Address part identifier - City of the Company (optional)
     * @param  string $post_code Address part identifier - Postcode/Zip Code of the Company. (optional)
     * @param  string $province Address part identifier - Province of the Company (optional)
     * @param  string $state Address part identifier - State of the Company (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataOfficeType $office_type (optional)
     * @param  string $phone_no (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCompanyStatus $status (optional)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCompanyType $type (optional)
     * @param  string $website (optional)
     * @param  string $reference1 Customer supplied free text reference 1 of 3 (optional)
     * @param  string $reference2 Customer supplied free text reference 2 of 3 (optional)
     * @param  string $reference3 Customer supplied free text reference 3 of 3 (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function confidenceMatchSearchRequest($authorization, $country, $page = '1', $page_size = null, $match_threshold = null, $reg_no = null, $vat_no = null, $name = null, $street = null, $house_no = null, $city = null, $post_code = null, $province = null, $state = null, $office_type = null, $phone_no = null, $status = null, $type = null, $website = null, $reference1 = null, $reference2 = null, $reference3 = null, $call_ref = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling confidenceMatchSearch'
            );
        }
        // verify the required parameter 'country' is set
        if ($country === null || (is_array($country) && count($country) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country when calling confidenceMatchSearch'
            );
        }

        $resourcePath = '/companies/match';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country, null);
        }
        // query params
        if ($match_threshold !== null) {
            $queryParams['matchThreshold'] = ObjectSerializer::toQueryValue($match_threshold, null);
        }
        // query params
        if ($reg_no !== null) {
            $queryParams['regNo'] = ObjectSerializer::toQueryValue($reg_no, null);
        }
        // query params
        if ($vat_no !== null) {
            $queryParams['vatNo'] = ObjectSerializer::toQueryValue($vat_no, null);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name, null);
        }
        // query params
        if ($street !== null) {
            $queryParams['street'] = ObjectSerializer::toQueryValue($street, null);
        }
        // query params
        if ($house_no !== null) {
            $queryParams['houseNo'] = ObjectSerializer::toQueryValue($house_no, null);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = ObjectSerializer::toQueryValue($city, null);
        }
        // query params
        if ($post_code !== null) {
            $queryParams['postCode'] = ObjectSerializer::toQueryValue($post_code, null);
        }
        // query params
        if ($province !== null) {
            $queryParams['province'] = ObjectSerializer::toQueryValue($province, null);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state, null);
        }
        // query params
        if ($office_type !== null) {
            $queryParams['officeType'] = ObjectSerializer::toQueryValue($office_type, null);
        }
        // query params
        if ($phone_no !== null) {
            $queryParams['phoneNo'] = ObjectSerializer::toQueryValue($phone_no, null);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status, null);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type, null);
        }
        // query params
        if ($website !== null) {
            $queryParams['website'] = ObjectSerializer::toQueryValue($website, null);
        }
        // query params
        if ($reference1 !== null) {
            $queryParams['reference1'] = ObjectSerializer::toQueryValue($reference1, null);
        }
        // query params
        if ($reference2 !== null) {
            $queryParams['reference2'] = ObjectSerializer::toQueryValue($reference2, null);
        }
        // query params
        if ($reference3 !== null) {
            $queryParams['reference3'] = ObjectSerializer::toQueryValue($reference3, null);
        }
        // query params
        if ($call_ref !== null) {
            $queryParams['callRef'] = ObjectSerializer::toQueryValue($call_ref, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
