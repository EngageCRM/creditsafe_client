<?php
/**
 * ConsumersApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ConsumersApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConsumersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation consumerReport
     *
     * @param  string $authorization Authorization Token (required)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCountryCode $countries ISO-2 country code (required)
     * @param  string $first_name Consumer&#x27;s First Name (required)
     * @param  string $last_name Consumer&#x27;s Last Name (required)
     * @param  string $street Address part identifier - Street of the Consumer (required)
     * @param  string $house_no Address part identifier - House/Building Number of the Consumer (required)
     * @param  string $city Address part identifier - City of the Consumer (required)
     * @param  string $post_code Address part identifier - Postcode/Zip Code of the Consumer (required)
     * @param  string $language language (optional, default to EN)
     * @param  \DateTime $date_of_birth date_of_birth (optional)
     * @param  string $custom_data custom_data (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2003
     */
    public function consumerReport($authorization, $countries, $first_name, $last_name, $street, $house_no, $city, $post_code, $language = 'EN', $date_of_birth = null, $custom_data = null, $call_ref = null)
    {
        list($response) = $this->consumerReportWithHttpInfo($authorization, $countries, $first_name, $last_name, $street, $house_no, $city, $post_code, $language, $date_of_birth, $custom_data, $call_ref);
        return $response;
    }

    /**
     * Operation consumerReportWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCountryCode $countries ISO-2 country code (required)
     * @param  string $first_name Consumer&#x27;s First Name (required)
     * @param  string $last_name Consumer&#x27;s Last Name (required)
     * @param  string $street Address part identifier - Street of the Consumer (required)
     * @param  string $house_no Address part identifier - House/Building Number of the Consumer (required)
     * @param  string $city Address part identifier - City of the Consumer (required)
     * @param  string $post_code Address part identifier - Postcode/Zip Code of the Consumer (required)
     * @param  string $language (optional, default to EN)
     * @param  \DateTime $date_of_birth (optional)
     * @param  string $custom_data (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function consumerReportWithHttpInfo($authorization, $countries, $first_name, $last_name, $street, $house_no, $city, $post_code, $language = 'EN', $date_of_birth = null, $custom_data = null, $call_ref = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2003';
        $request = $this->consumerReportRequest($authorization, $countries, $first_name, $last_name, $street, $house_no, $city, $post_code, $language, $date_of_birth, $custom_data, $call_ref);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consumerReportAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCountryCode $countries ISO-2 country code (required)
     * @param  string $first_name Consumer&#x27;s First Name (required)
     * @param  string $last_name Consumer&#x27;s Last Name (required)
     * @param  string $street Address part identifier - Street of the Consumer (required)
     * @param  string $house_no Address part identifier - House/Building Number of the Consumer (required)
     * @param  string $city Address part identifier - City of the Consumer (required)
     * @param  string $post_code Address part identifier - Postcode/Zip Code of the Consumer (required)
     * @param  string $language (optional, default to EN)
     * @param  \DateTime $date_of_birth (optional)
     * @param  string $custom_data (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consumerReportAsync($authorization, $countries, $first_name, $last_name, $street, $house_no, $city, $post_code, $language = 'EN', $date_of_birth = null, $custom_data = null, $call_ref = null)
    {
        return $this->consumerReportAsyncWithHttpInfo($authorization, $countries, $first_name, $last_name, $street, $house_no, $city, $post_code, $language, $date_of_birth, $custom_data, $call_ref)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consumerReportAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCountryCode $countries ISO-2 country code (required)
     * @param  string $first_name Consumer&#x27;s First Name (required)
     * @param  string $last_name Consumer&#x27;s Last Name (required)
     * @param  string $street Address part identifier - Street of the Consumer (required)
     * @param  string $house_no Address part identifier - House/Building Number of the Consumer (required)
     * @param  string $city Address part identifier - City of the Consumer (required)
     * @param  string $post_code Address part identifier - Postcode/Zip Code of the Consumer (required)
     * @param  string $language (optional, default to EN)
     * @param  \DateTime $date_of_birth (optional)
     * @param  string $custom_data (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consumerReportAsyncWithHttpInfo($authorization, $countries, $first_name, $last_name, $street, $house_no, $city, $post_code, $language = 'EN', $date_of_birth = null, $custom_data = null, $call_ref = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2003';
        $request = $this->consumerReportRequest($authorization, $countries, $first_name, $last_name, $street, $house_no, $city, $post_code, $language, $date_of_birth, $custom_data, $call_ref);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consumerReport'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCountryCode $countries ISO-2 country code (required)
     * @param  string $first_name Consumer&#x27;s First Name (required)
     * @param  string $last_name Consumer&#x27;s Last Name (required)
     * @param  string $street Address part identifier - Street of the Consumer (required)
     * @param  string $house_no Address part identifier - House/Building Number of the Consumer (required)
     * @param  string $city Address part identifier - City of the Consumer (required)
     * @param  string $post_code Address part identifier - Postcode/Zip Code of the Consumer (required)
     * @param  string $language (optional, default to EN)
     * @param  \DateTime $date_of_birth (optional)
     * @param  string $custom_data (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function consumerReportRequest($authorization, $countries, $first_name, $last_name, $street, $house_no, $city, $post_code, $language = 'EN', $date_of_birth = null, $custom_data = null, $call_ref = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling consumerReport'
            );
        }
        // verify the required parameter 'countries' is set
        if ($countries === null || (is_array($countries) && count($countries) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $countries when calling consumerReport'
            );
        }
        // verify the required parameter 'first_name' is set
        if ($first_name === null || (is_array($first_name) && count($first_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $first_name when calling consumerReport'
            );
        }
        // verify the required parameter 'last_name' is set
        if ($last_name === null || (is_array($last_name) && count($last_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_name when calling consumerReport'
            );
        }
        // verify the required parameter 'street' is set
        if ($street === null || (is_array($street) && count($street) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $street when calling consumerReport'
            );
        }
        // verify the required parameter 'house_no' is set
        if ($house_no === null || (is_array($house_no) && count($house_no) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $house_no when calling consumerReport'
            );
        }
        // verify the required parameter 'city' is set
        if ($city === null || (is_array($city) && count($city) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $city when calling consumerReport'
            );
        }
        // verify the required parameter 'post_code' is set
        if ($post_code === null || (is_array($post_code) && count($post_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_code when calling consumerReport'
            );
        }

        $resourcePath = '/consumers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($countries !== null) {
            $queryParams['countries'] = ObjectSerializer::toQueryValue($countries, null);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language, null);
        }
        // query params
        if ($first_name !== null) {
            $queryParams['firstName'] = ObjectSerializer::toQueryValue($first_name, null);
        }
        // query params
        if ($last_name !== null) {
            $queryParams['lastName'] = ObjectSerializer::toQueryValue($last_name, null);
        }
        // query params
        if ($street !== null) {
            $queryParams['street'] = ObjectSerializer::toQueryValue($street, null);
        }
        // query params
        if ($house_no !== null) {
            $queryParams['houseNo'] = ObjectSerializer::toQueryValue($house_no, null);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = ObjectSerializer::toQueryValue($city, null);
        }
        // query params
        if ($post_code !== null) {
            $queryParams['postCode'] = ObjectSerializer::toQueryValue($post_code, null);
        }
        // query params
        if ($date_of_birth !== null) {
            $queryParams['dateOfBirth'] = ObjectSerializer::toQueryValue($date_of_birth, 'date-time');
        }
        // query params
        if ($custom_data !== null) {
            $queryParams['customData'] = ObjectSerializer::toQueryValue($custom_data, null);
        }
        // query params
        if ($call_ref !== null) {
            $queryParams['callRef'] = ObjectSerializer::toQueryValue($call_ref, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation consumerSearchCriteria
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $countries Comma-separated list of ISO-2 country codes (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return null[]
     */
    public function consumerSearchCriteria($authorization, $countries = null, $call_ref = null)
    {
        list($response) = $this->consumerSearchCriteriaWithHttpInfo($authorization, $countries, $call_ref);
        return $response;
    }

    /**
     * Operation consumerSearchCriteriaWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $countries Comma-separated list of ISO-2 country codes (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null[], HTTP status code, HTTP response headers (array of strings)
     */
    public function consumerSearchCriteriaWithHttpInfo($authorization, $countries = null, $call_ref = null)
    {
        $returnType = 'null[]';
        $request = $this->consumerSearchCriteriaRequest($authorization, $countries, $call_ref);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'null[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation consumerSearchCriteriaAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $countries Comma-separated list of ISO-2 country codes (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consumerSearchCriteriaAsync($authorization, $countries = null, $call_ref = null)
    {
        return $this->consumerSearchCriteriaAsyncWithHttpInfo($authorization, $countries, $call_ref)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation consumerSearchCriteriaAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $countries Comma-separated list of ISO-2 country codes (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function consumerSearchCriteriaAsyncWithHttpInfo($authorization, $countries = null, $call_ref = null)
    {
        $returnType = 'null[]';
        $request = $this->consumerSearchCriteriaRequest($authorization, $countries, $call_ref);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'consumerSearchCriteria'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $countries Comma-separated list of ISO-2 country codes (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function consumerSearchCriteriaRequest($authorization, $countries = null, $call_ref = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling consumerSearchCriteria'
            );
        }

        $resourcePath = '/consumers/searchcriteria';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($countries !== null) {
            $queryParams['countries'] = ObjectSerializer::toQueryValue($countries, null);
        }
        // query params
        if ($call_ref !== null) {
            $queryParams['callRef'] = ObjectSerializer::toQueryValue($call_ref, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
