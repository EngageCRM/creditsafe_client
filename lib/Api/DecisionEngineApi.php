<?php
/**
 * DecisionEngineApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * DecisionEngineApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DecisionEngineApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation decisionHistory
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $provenir_id Filter the returned usage log by the GUID for the associated decision trees, obtained from &#x60;/GUID&#x60;. (optional)
     * @param  string $company_id Filter the returned usage log by the Connect ID for the associated companies for each decision. (optional)
     * @param  string $company_name Filter the returned usage log by the Company Name for the associated companies for each decision. (optional)
     * @param  float $status Filter the returned usage log by the status for each decision. (optional)
     * @param  \DateTime $from_date Filter the returned usage log by the date the the decision was run. (optional)
     * @param  \DateTime $to_date Filter the returned usage log by the date the the decision was run. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectDecisionEngineUsageLogResponse
     */
    public function decisionHistory($authorization, $provenir_id = null, $company_id = null, $company_name = null, $status = null, $from_date = null, $to_date = null, $page = '1', $page_size = null)
    {
        list($response) = $this->decisionHistoryWithHttpInfo($authorization, $provenir_id, $company_id, $company_name, $status, $from_date, $to_date, $page, $page_size);
        return $response;
    }

    /**
     * Operation decisionHistoryWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $provenir_id Filter the returned usage log by the GUID for the associated decision trees, obtained from &#x60;/GUID&#x60;. (optional)
     * @param  string $company_id Filter the returned usage log by the Connect ID for the associated companies for each decision. (optional)
     * @param  string $company_name Filter the returned usage log by the Company Name for the associated companies for each decision. (optional)
     * @param  float $status Filter the returned usage log by the status for each decision. (optional)
     * @param  \DateTime $from_date Filter the returned usage log by the date the the decision was run. (optional)
     * @param  \DateTime $to_date Filter the returned usage log by the date the the decision was run. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectDecisionEngineUsageLogResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function decisionHistoryWithHttpInfo($authorization, $provenir_id = null, $company_id = null, $company_name = null, $status = null, $from_date = null, $to_date = null, $page = '1', $page_size = null)
    {
        $returnType = '\Swagger\Client\Model\ConnectDecisionEngineUsageLogResponse';
        $request = $this->decisionHistoryRequest($authorization, $provenir_id, $company_id, $company_name, $status, $from_date, $to_date, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectDecisionEngineUsageLogResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation decisionHistoryAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $provenir_id Filter the returned usage log by the GUID for the associated decision trees, obtained from &#x60;/GUID&#x60;. (optional)
     * @param  string $company_id Filter the returned usage log by the Connect ID for the associated companies for each decision. (optional)
     * @param  string $company_name Filter the returned usage log by the Company Name for the associated companies for each decision. (optional)
     * @param  float $status Filter the returned usage log by the status for each decision. (optional)
     * @param  \DateTime $from_date Filter the returned usage log by the date the the decision was run. (optional)
     * @param  \DateTime $to_date Filter the returned usage log by the date the the decision was run. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function decisionHistoryAsync($authorization, $provenir_id = null, $company_id = null, $company_name = null, $status = null, $from_date = null, $to_date = null, $page = '1', $page_size = null)
    {
        return $this->decisionHistoryAsyncWithHttpInfo($authorization, $provenir_id, $company_id, $company_name, $status, $from_date, $to_date, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation decisionHistoryAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $provenir_id Filter the returned usage log by the GUID for the associated decision trees, obtained from &#x60;/GUID&#x60;. (optional)
     * @param  string $company_id Filter the returned usage log by the Connect ID for the associated companies for each decision. (optional)
     * @param  string $company_name Filter the returned usage log by the Company Name for the associated companies for each decision. (optional)
     * @param  float $status Filter the returned usage log by the status for each decision. (optional)
     * @param  \DateTime $from_date Filter the returned usage log by the date the the decision was run. (optional)
     * @param  \DateTime $to_date Filter the returned usage log by the date the the decision was run. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function decisionHistoryAsyncWithHttpInfo($authorization, $provenir_id = null, $company_id = null, $company_name = null, $status = null, $from_date = null, $to_date = null, $page = '1', $page_size = null)
    {
        $returnType = '\Swagger\Client\Model\ConnectDecisionEngineUsageLogResponse';
        $request = $this->decisionHistoryRequest($authorization, $provenir_id, $company_id, $company_name, $status, $from_date, $to_date, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'decisionHistory'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $provenir_id Filter the returned usage log by the GUID for the associated decision trees, obtained from &#x60;/GUID&#x60;. (optional)
     * @param  string $company_id Filter the returned usage log by the Connect ID for the associated companies for each decision. (optional)
     * @param  string $company_name Filter the returned usage log by the Company Name for the associated companies for each decision. (optional)
     * @param  float $status Filter the returned usage log by the status for each decision. (optional)
     * @param  \DateTime $from_date Filter the returned usage log by the date the the decision was run. (optional)
     * @param  \DateTime $to_date Filter the returned usage log by the date the the decision was run. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function decisionHistoryRequest($authorization, $provenir_id = null, $company_id = null, $company_name = null, $status = null, $from_date = null, $to_date = null, $page = '1', $page_size = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling decisionHistory'
            );
        }

        $resourcePath = '/decisionEngine/usageLog';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($provenir_id !== null) {
            $queryParams['provenirId'] = ObjectSerializer::toQueryValue($provenir_id, null);
        }
        // query params
        if ($company_id !== null) {
            $queryParams['companyId'] = ObjectSerializer::toQueryValue($company_id, null);
        }
        // query params
        if ($company_name !== null) {
            $queryParams['companyName'] = ObjectSerializer::toQueryValue($company_name, null);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status, null);
        }
        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($from_date, 'date-time');
        }
        // query params
        if ($to_date !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($to_date, 'date-time');
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation decisionTrees
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $type Filter the returned decision trees by their associated decision tree type. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectDecisionEngineGUIDListReponse
     */
    public function decisionTrees($authorization, $type = null)
    {
        list($response) = $this->decisionTreesWithHttpInfo($authorization, $type);
        return $response;
    }

    /**
     * Operation decisionTreesWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $type Filter the returned decision trees by their associated decision tree type. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectDecisionEngineGUIDListReponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function decisionTreesWithHttpInfo($authorization, $type = null)
    {
        $returnType = '\Swagger\Client\Model\ConnectDecisionEngineGUIDListReponse';
        $request = $this->decisionTreesRequest($authorization, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectDecisionEngineGUIDListReponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation decisionTreesAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $type Filter the returned decision trees by their associated decision tree type. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function decisionTreesAsync($authorization, $type = null)
    {
        return $this->decisionTreesAsyncWithHttpInfo($authorization, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation decisionTreesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $type Filter the returned decision trees by their associated decision tree type. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function decisionTreesAsyncWithHttpInfo($authorization, $type = null)
    {
        $returnType = '\Swagger\Client\Model\ConnectDecisionEngineGUIDListReponse';
        $request = $this->decisionTreesRequest($authorization, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'decisionTrees'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $type Filter the returned decision trees by their associated decision tree type. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function decisionTreesRequest($authorization, $type = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling decisionTrees'
            );
        }

        $resourcePath = '/decisionEngine/GUID';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDecisionLog
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $decision_log_id The unique identifier of the decision log to retrieve, obtained from &#x60;/usageLog&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectDecisionEngineDecisionLogResponse
     */
    public function getDecisionLog($authorization, $decision_log_id)
    {
        list($response) = $this->getDecisionLogWithHttpInfo($authorization, $decision_log_id);
        return $response;
    }

    /**
     * Operation getDecisionLogWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $decision_log_id The unique identifier of the decision log to retrieve, obtained from &#x60;/usageLog&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectDecisionEngineDecisionLogResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDecisionLogWithHttpInfo($authorization, $decision_log_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectDecisionEngineDecisionLogResponse';
        $request = $this->getDecisionLogRequest($authorization, $decision_log_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectDecisionEngineDecisionLogResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDecisionLogAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $decision_log_id The unique identifier of the decision log to retrieve, obtained from &#x60;/usageLog&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionLogAsync($authorization, $decision_log_id)
    {
        return $this->getDecisionLogAsyncWithHttpInfo($authorization, $decision_log_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDecisionLogAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $decision_log_id The unique identifier of the decision log to retrieve, obtained from &#x60;/usageLog&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDecisionLogAsyncWithHttpInfo($authorization, $decision_log_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectDecisionEngineDecisionLogResponse';
        $request = $this->getDecisionLogRequest($authorization, $decision_log_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDecisionLog'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $decision_log_id The unique identifier of the decision log to retrieve, obtained from &#x60;/usageLog&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDecisionLogRequest($authorization, $decision_log_id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getDecisionLog'
            );
        }
        // verify the required parameter 'decision_log_id' is set
        if ($decision_log_id === null || (is_array($decision_log_id) && count($decision_log_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $decision_log_id when calling getDecisionLog'
            );
        }

        $resourcePath = '/decisionEngine/usageLog/{decisionLogId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($decision_log_id !== null) {
            $resourcePath = str_replace(
                '{' . 'decisionLogId' . '}',
                ObjectSerializer::toPathValue($decision_log_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation runDecisionTree
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $company_id The Connect ID for the company that you wish to run the decision tree on. Obtained from &#x60;/companies&#x60; search results. A Connect ID is the primary Company identifier that is used to uniquely identify all companies across Creditsafe&#x27;s Universe and Partner Network. (required)
     * @param  string $provenir_id The unique identifier of the decision tree to run, obtained from &#x60;/GUID&#x60;. (required)
     * @param  object $body body (optional)
     * @param  string $origination_id An optional field that will allow text passed through to be stored against the decision. Typically used for internal identifiers (e.g. SalesForce IDs). (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectDecisionEngineRunDecisionResponse
     */
    public function runDecisionTree($authorization, $company_id, $provenir_id, $body = null, $origination_id = null)
    {
        list($response) = $this->runDecisionTreeWithHttpInfo($authorization, $company_id, $provenir_id, $body, $origination_id);
        return $response;
    }

    /**
     * Operation runDecisionTreeWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $company_id The Connect ID for the company that you wish to run the decision tree on. Obtained from &#x60;/companies&#x60; search results. A Connect ID is the primary Company identifier that is used to uniquely identify all companies across Creditsafe&#x27;s Universe and Partner Network. (required)
     * @param  string $provenir_id The unique identifier of the decision tree to run, obtained from &#x60;/GUID&#x60;. (required)
     * @param  object $body (optional)
     * @param  string $origination_id An optional field that will allow text passed through to be stored against the decision. Typically used for internal identifiers (e.g. SalesForce IDs). (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectDecisionEngineRunDecisionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function runDecisionTreeWithHttpInfo($authorization, $company_id, $provenir_id, $body = null, $origination_id = null)
    {
        $returnType = '\Swagger\Client\Model\ConnectDecisionEngineRunDecisionResponse';
        $request = $this->runDecisionTreeRequest($authorization, $company_id, $provenir_id, $body, $origination_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectDecisionEngineRunDecisionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation runDecisionTreeAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $company_id The Connect ID for the company that you wish to run the decision tree on. Obtained from &#x60;/companies&#x60; search results. A Connect ID is the primary Company identifier that is used to uniquely identify all companies across Creditsafe&#x27;s Universe and Partner Network. (required)
     * @param  string $provenir_id The unique identifier of the decision tree to run, obtained from &#x60;/GUID&#x60;. (required)
     * @param  object $body (optional)
     * @param  string $origination_id An optional field that will allow text passed through to be stored against the decision. Typically used for internal identifiers (e.g. SalesForce IDs). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function runDecisionTreeAsync($authorization, $company_id, $provenir_id, $body = null, $origination_id = null)
    {
        return $this->runDecisionTreeAsyncWithHttpInfo($authorization, $company_id, $provenir_id, $body, $origination_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation runDecisionTreeAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $company_id The Connect ID for the company that you wish to run the decision tree on. Obtained from &#x60;/companies&#x60; search results. A Connect ID is the primary Company identifier that is used to uniquely identify all companies across Creditsafe&#x27;s Universe and Partner Network. (required)
     * @param  string $provenir_id The unique identifier of the decision tree to run, obtained from &#x60;/GUID&#x60;. (required)
     * @param  object $body (optional)
     * @param  string $origination_id An optional field that will allow text passed through to be stored against the decision. Typically used for internal identifiers (e.g. SalesForce IDs). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function runDecisionTreeAsyncWithHttpInfo($authorization, $company_id, $provenir_id, $body = null, $origination_id = null)
    {
        $returnType = '\Swagger\Client\Model\ConnectDecisionEngineRunDecisionResponse';
        $request = $this->runDecisionTreeRequest($authorization, $company_id, $provenir_id, $body, $origination_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'runDecisionTree'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $company_id The Connect ID for the company that you wish to run the decision tree on. Obtained from &#x60;/companies&#x60; search results. A Connect ID is the primary Company identifier that is used to uniquely identify all companies across Creditsafe&#x27;s Universe and Partner Network. (required)
     * @param  string $provenir_id The unique identifier of the decision tree to run, obtained from &#x60;/GUID&#x60;. (required)
     * @param  object $body (optional)
     * @param  string $origination_id An optional field that will allow text passed through to be stored against the decision. Typically used for internal identifiers (e.g. SalesForce IDs). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function runDecisionTreeRequest($authorization, $company_id, $provenir_id, $body = null, $origination_id = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling runDecisionTree'
            );
        }
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling runDecisionTree'
            );
        }
        // verify the required parameter 'provenir_id' is set
        if ($provenir_id === null || (is_array($provenir_id) && count($provenir_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $provenir_id when calling runDecisionTree'
            );
        }

        $resourcePath = '/decisionEngine/{provenirId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($company_id !== null) {
            $queryParams['companyId'] = ObjectSerializer::toQueryValue($company_id, null);
        }
        // query params
        if ($origination_id !== null) {
            $queryParams['originationId'] = ObjectSerializer::toQueryValue($origination_id, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($provenir_id !== null) {
            $resourcePath = str_replace(
                '{' . 'provenirId' . '}',
                ObjectSerializer::toPathValue($provenir_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDecisionLog
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $decision_log_id The unique identifier of the decision log to retrieve, obtained from &#x60;/usageLog&#x60;. (required)
     * @param  \Swagger\Client\Model\ConnectDecisionEngineUpdateDecisionRequest $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectDecisionEngineDecisionLogResponse
     */
    public function updateDecisionLog($authorization, $decision_log_id, $body = null)
    {
        list($response) = $this->updateDecisionLogWithHttpInfo($authorization, $decision_log_id, $body);
        return $response;
    }

    /**
     * Operation updateDecisionLogWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $decision_log_id The unique identifier of the decision log to retrieve, obtained from &#x60;/usageLog&#x60;. (required)
     * @param  \Swagger\Client\Model\ConnectDecisionEngineUpdateDecisionRequest $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectDecisionEngineDecisionLogResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDecisionLogWithHttpInfo($authorization, $decision_log_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\ConnectDecisionEngineDecisionLogResponse';
        $request = $this->updateDecisionLogRequest($authorization, $decision_log_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectDecisionEngineDecisionLogResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDecisionLogAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $decision_log_id The unique identifier of the decision log to retrieve, obtained from &#x60;/usageLog&#x60;. (required)
     * @param  \Swagger\Client\Model\ConnectDecisionEngineUpdateDecisionRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDecisionLogAsync($authorization, $decision_log_id, $body = null)
    {
        return $this->updateDecisionLogAsyncWithHttpInfo($authorization, $decision_log_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDecisionLogAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $decision_log_id The unique identifier of the decision log to retrieve, obtained from &#x60;/usageLog&#x60;. (required)
     * @param  \Swagger\Client\Model\ConnectDecisionEngineUpdateDecisionRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDecisionLogAsyncWithHttpInfo($authorization, $decision_log_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\ConnectDecisionEngineDecisionLogResponse';
        $request = $this->updateDecisionLogRequest($authorization, $decision_log_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDecisionLog'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $decision_log_id The unique identifier of the decision log to retrieve, obtained from &#x60;/usageLog&#x60;. (required)
     * @param  \Swagger\Client\Model\ConnectDecisionEngineUpdateDecisionRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateDecisionLogRequest($authorization, $decision_log_id, $body = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling updateDecisionLog'
            );
        }
        // verify the required parameter 'decision_log_id' is set
        if ($decision_log_id === null || (is_array($decision_log_id) && count($decision_log_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $decision_log_id when calling updateDecisionLog'
            );
        }

        $resourcePath = '/decisionEngine/usageLog/{decisionLogId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($decision_log_id !== null) {
            $resourcePath = str_replace(
                '{' . 'decisionLogId' . '}',
                ObjectSerializer::toPathValue($decision_log_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userDataFields
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $provenir_id The unique identifier of the decision tree, obtained from &#x60;/GUID&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectDecisionEngineUserDataFieldsResponse
     */
    public function userDataFields($authorization, $provenir_id)
    {
        list($response) = $this->userDataFieldsWithHttpInfo($authorization, $provenir_id);
        return $response;
    }

    /**
     * Operation userDataFieldsWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $provenir_id The unique identifier of the decision tree, obtained from &#x60;/GUID&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectDecisionEngineUserDataFieldsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userDataFieldsWithHttpInfo($authorization, $provenir_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectDecisionEngineUserDataFieldsResponse';
        $request = $this->userDataFieldsRequest($authorization, $provenir_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectDecisionEngineUserDataFieldsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userDataFieldsAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $provenir_id The unique identifier of the decision tree, obtained from &#x60;/GUID&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userDataFieldsAsync($authorization, $provenir_id)
    {
        return $this->userDataFieldsAsyncWithHttpInfo($authorization, $provenir_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userDataFieldsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $provenir_id The unique identifier of the decision tree, obtained from &#x60;/GUID&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userDataFieldsAsyncWithHttpInfo($authorization, $provenir_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectDecisionEngineUserDataFieldsResponse';
        $request = $this->userDataFieldsRequest($authorization, $provenir_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userDataFields'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $provenir_id The unique identifier of the decision tree, obtained from &#x60;/GUID&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userDataFieldsRequest($authorization, $provenir_id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling userDataFields'
            );
        }
        // verify the required parameter 'provenir_id' is set
        if ($provenir_id === null || (is_array($provenir_id) && count($provenir_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $provenir_id when calling userDataFields'
            );
        }

        $resourcePath = '/decisionEngine/{provenirId}/userDataFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($provenir_id !== null) {
            $resourcePath = str_replace(
                '{' . 'provenirId' . '}',
                ObjectSerializer::toPathValue($provenir_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
