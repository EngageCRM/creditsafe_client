<?php
/**
 * GlobalMonitoringApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * GlobalMonitoringApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GlobalMonitoringApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addCompanyToPortfolio
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  \Swagger\Client\Model\ConnectMonitoringAddCompanyToPortfolioRequest $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringAddCompanyToPortfolioResponse
     */
    public function addCompanyToPortfolio($authorization, $portfolio_id, $body = null)
    {
        list($response) = $this->addCompanyToPortfolioWithHttpInfo($authorization, $portfolio_id, $body);
        return $response;
    }

    /**
     * Operation addCompanyToPortfolioWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  \Swagger\Client\Model\ConnectMonitoringAddCompanyToPortfolioRequest $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringAddCompanyToPortfolioResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addCompanyToPortfolioWithHttpInfo($authorization, $portfolio_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringAddCompanyToPortfolioResponse';
        $request = $this->addCompanyToPortfolioRequest($authorization, $portfolio_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringAddCompanyToPortfolioResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse409',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addCompanyToPortfolioAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  \Swagger\Client\Model\ConnectMonitoringAddCompanyToPortfolioRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCompanyToPortfolioAsync($authorization, $portfolio_id, $body = null)
    {
        return $this->addCompanyToPortfolioAsyncWithHttpInfo($authorization, $portfolio_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addCompanyToPortfolioAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  \Swagger\Client\Model\ConnectMonitoringAddCompanyToPortfolioRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCompanyToPortfolioAsyncWithHttpInfo($authorization, $portfolio_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringAddCompanyToPortfolioResponse';
        $request = $this->addCompanyToPortfolioRequest($authorization, $portfolio_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addCompanyToPortfolio'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  \Swagger\Client\Model\ConnectMonitoringAddCompanyToPortfolioRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addCompanyToPortfolioRequest($authorization, $portfolio_id, $body = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling addCompanyToPortfolio'
            );
        }
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling addCompanyToPortfolio'
            );
        }

        $resourcePath = '/monitoring/portfolios/{portfolioId}/companies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolioId' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation allEventRules
     *
     * @param  string $authorization Authorization Token (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringEventRulesResponse
     */
    public function allEventRules($authorization)
    {
        list($response) = $this->allEventRulesWithHttpInfo($authorization);
        return $response;
    }

    /**
     * Operation allEventRulesWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringEventRulesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function allEventRulesWithHttpInfo($authorization)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringEventRulesResponse';
        $request = $this->allEventRulesRequest($authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringEventRulesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation allEventRulesAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function allEventRulesAsync($authorization)
    {
        return $this->allEventRulesAsyncWithHttpInfo($authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation allEventRulesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function allEventRulesAsyncWithHttpInfo($authorization)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringEventRulesResponse';
        $request = $this->allEventRulesRequest($authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'allEventRules'
     *
     * @param  string $authorization Authorization Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function allEventRulesRequest($authorization)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling allEventRules'
            );
        }

        $resourcePath = '/monitoring/eventRules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation allNotificationEvents
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $search_query Return notificationEvents that match the given value (optional)
     * @param  string $sort_by Sort results by this column. Null values of sort column are listed after non-nulls. (optional, default to companyName)
     * @param  string $sort_dir The direction that you wish to sort results by. (optional, default to asc)
     * @param  \DateTime $start_date The start date on which results are filtered. (optional)
     * @param  \DateTime $end_date The end date on which results are filtered. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  bool $filter_by_created_date Set to &#x60;true&#x60; to filter the Notification Events of the \&quot;createdDate\&quot; field when using &#x60;startDate&#x60; and &#x60;endDate&#x60; parameters. By default this is set to &#x60;false&#x60;, with the date paramters filtering using the \&quot;eventDate\&quot; field. (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringAllNotificationsEvents
     */
    public function allNotificationEvents($authorization, $search_query = null, $sort_by = 'companyName', $sort_dir = 'asc', $start_date = null, $end_date = null, $page = '1', $page_size = null, $filter_by_created_date = 'false')
    {
        list($response) = $this->allNotificationEventsWithHttpInfo($authorization, $search_query, $sort_by, $sort_dir, $start_date, $end_date, $page, $page_size, $filter_by_created_date);
        return $response;
    }

    /**
     * Operation allNotificationEventsWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $search_query Return notificationEvents that match the given value (optional)
     * @param  string $sort_by Sort results by this column. Null values of sort column are listed after non-nulls. (optional, default to companyName)
     * @param  string $sort_dir The direction that you wish to sort results by. (optional, default to asc)
     * @param  \DateTime $start_date The start date on which results are filtered. (optional)
     * @param  \DateTime $end_date The end date on which results are filtered. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  bool $filter_by_created_date Set to &#x60;true&#x60; to filter the Notification Events of the \&quot;createdDate\&quot; field when using &#x60;startDate&#x60; and &#x60;endDate&#x60; parameters. By default this is set to &#x60;false&#x60;, with the date paramters filtering using the \&quot;eventDate\&quot; field. (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringAllNotificationsEvents, HTTP status code, HTTP response headers (array of strings)
     */
    public function allNotificationEventsWithHttpInfo($authorization, $search_query = null, $sort_by = 'companyName', $sort_dir = 'asc', $start_date = null, $end_date = null, $page = '1', $page_size = null, $filter_by_created_date = 'false')
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringAllNotificationsEvents';
        $request = $this->allNotificationEventsRequest($authorization, $search_query, $sort_by, $sort_dir, $start_date, $end_date, $page, $page_size, $filter_by_created_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringAllNotificationsEvents',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation allNotificationEventsAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $search_query Return notificationEvents that match the given value (optional)
     * @param  string $sort_by Sort results by this column. Null values of sort column are listed after non-nulls. (optional, default to companyName)
     * @param  string $sort_dir The direction that you wish to sort results by. (optional, default to asc)
     * @param  \DateTime $start_date The start date on which results are filtered. (optional)
     * @param  \DateTime $end_date The end date on which results are filtered. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  bool $filter_by_created_date Set to &#x60;true&#x60; to filter the Notification Events of the \&quot;createdDate\&quot; field when using &#x60;startDate&#x60; and &#x60;endDate&#x60; parameters. By default this is set to &#x60;false&#x60;, with the date paramters filtering using the \&quot;eventDate\&quot; field. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function allNotificationEventsAsync($authorization, $search_query = null, $sort_by = 'companyName', $sort_dir = 'asc', $start_date = null, $end_date = null, $page = '1', $page_size = null, $filter_by_created_date = 'false')
    {
        return $this->allNotificationEventsAsyncWithHttpInfo($authorization, $search_query, $sort_by, $sort_dir, $start_date, $end_date, $page, $page_size, $filter_by_created_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation allNotificationEventsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $search_query Return notificationEvents that match the given value (optional)
     * @param  string $sort_by Sort results by this column. Null values of sort column are listed after non-nulls. (optional, default to companyName)
     * @param  string $sort_dir The direction that you wish to sort results by. (optional, default to asc)
     * @param  \DateTime $start_date The start date on which results are filtered. (optional)
     * @param  \DateTime $end_date The end date on which results are filtered. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  bool $filter_by_created_date Set to &#x60;true&#x60; to filter the Notification Events of the \&quot;createdDate\&quot; field when using &#x60;startDate&#x60; and &#x60;endDate&#x60; parameters. By default this is set to &#x60;false&#x60;, with the date paramters filtering using the \&quot;eventDate\&quot; field. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function allNotificationEventsAsyncWithHttpInfo($authorization, $search_query = null, $sort_by = 'companyName', $sort_dir = 'asc', $start_date = null, $end_date = null, $page = '1', $page_size = null, $filter_by_created_date = 'false')
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringAllNotificationsEvents';
        $request = $this->allNotificationEventsRequest($authorization, $search_query, $sort_by, $sort_dir, $start_date, $end_date, $page, $page_size, $filter_by_created_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'allNotificationEvents'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $search_query Return notificationEvents that match the given value (optional)
     * @param  string $sort_by Sort results by this column. Null values of sort column are listed after non-nulls. (optional, default to companyName)
     * @param  string $sort_dir The direction that you wish to sort results by. (optional, default to asc)
     * @param  \DateTime $start_date The start date on which results are filtered. (optional)
     * @param  \DateTime $end_date The end date on which results are filtered. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  bool $filter_by_created_date Set to &#x60;true&#x60; to filter the Notification Events of the \&quot;createdDate\&quot; field when using &#x60;startDate&#x60; and &#x60;endDate&#x60; parameters. By default this is set to &#x60;false&#x60;, with the date paramters filtering using the \&quot;eventDate\&quot; field. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function allNotificationEventsRequest($authorization, $search_query = null, $sort_by = 'companyName', $sort_dir = 'asc', $start_date = null, $end_date = null, $page = '1', $page_size = null, $filter_by_created_date = 'false')
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling allNotificationEvents'
            );
        }

        $resourcePath = '/monitoring/notificationEvents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_query !== null) {
            $queryParams['searchQuery'] = ObjectSerializer::toQueryValue($search_query, null);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by, null);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sortDir'] = ObjectSerializer::toQueryValue($sort_dir, null);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = ObjectSerializer::toQueryValue($start_date, 'date-time');
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = ObjectSerializer::toQueryValue($end_date, 'date-time');
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($filter_by_created_date !== null) {
            $queryParams['filterByCreatedDate'] = ObjectSerializer::toQueryValue($filter_by_created_date, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clearCompaniesFromPortfolio
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringClearCompaniesRequest $body body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio you want to delete companies from, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  bool $clear_all When ClearAll queryparameter is False,Companies List needs to be passed. When ClearAll queryparameter is True, Companies List must be empty. All companies will be deleted (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringClearCompaniesResponse
     */
    public function clearCompaniesFromPortfolio($body, $authorization, $portfolio_id, $clear_all = 'false')
    {
        list($response) = $this->clearCompaniesFromPortfolioWithHttpInfo($body, $authorization, $portfolio_id, $clear_all);
        return $response;
    }

    /**
     * Operation clearCompaniesFromPortfolioWithHttpInfo
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringClearCompaniesRequest $body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio you want to delete companies from, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  bool $clear_all When ClearAll queryparameter is False,Companies List needs to be passed. When ClearAll queryparameter is True, Companies List must be empty. All companies will be deleted (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringClearCompaniesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function clearCompaniesFromPortfolioWithHttpInfo($body, $authorization, $portfolio_id, $clear_all = 'false')
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringClearCompaniesResponse';
        $request = $this->clearCompaniesFromPortfolioRequest($body, $authorization, $portfolio_id, $clear_all);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringClearCompaniesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clearCompaniesFromPortfolioAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringClearCompaniesRequest $body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio you want to delete companies from, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  bool $clear_all When ClearAll queryparameter is False,Companies List needs to be passed. When ClearAll queryparameter is True, Companies List must be empty. All companies will be deleted (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clearCompaniesFromPortfolioAsync($body, $authorization, $portfolio_id, $clear_all = 'false')
    {
        return $this->clearCompaniesFromPortfolioAsyncWithHttpInfo($body, $authorization, $portfolio_id, $clear_all)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clearCompaniesFromPortfolioAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringClearCompaniesRequest $body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio you want to delete companies from, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  bool $clear_all When ClearAll queryparameter is False,Companies List needs to be passed. When ClearAll queryparameter is True, Companies List must be empty. All companies will be deleted (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clearCompaniesFromPortfolioAsyncWithHttpInfo($body, $authorization, $portfolio_id, $clear_all = 'false')
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringClearCompaniesResponse';
        $request = $this->clearCompaniesFromPortfolioRequest($body, $authorization, $portfolio_id, $clear_all);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clearCompaniesFromPortfolio'
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringClearCompaniesRequest $body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio you want to delete companies from, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  bool $clear_all When ClearAll queryparameter is False,Companies List needs to be passed. When ClearAll queryparameter is True, Companies List must be empty. All companies will be deleted (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function clearCompaniesFromPortfolioRequest($body, $authorization, $portfolio_id, $clear_all = 'false')
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling clearCompaniesFromPortfolio'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling clearCompaniesFromPortfolio'
            );
        }
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling clearCompaniesFromPortfolio'
            );
        }

        $resourcePath = '/monitoring/portfolios/{portfolioId}/companies/clear';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($clear_all !== null) {
            $queryParams['clearAll'] = ObjectSerializer::toQueryValue($clear_all, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolioId' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation copyCompaniesBetweenPortfolios
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringCopyAndMoveCompaniesRequest $body body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio you want to copy companies from, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  bool $copy_all When CopyAll queryparameter is False, portfolios and companies list needs to be passed. When CopyAll queryparameter is True, only portfolios need to be passed and companies List must be empty. All companies are copied from current portfolio are considered here. (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringCopyAndMoveCompaniesResponse
     */
    public function copyCompaniesBetweenPortfolios($body, $authorization, $portfolio_id, $copy_all = 'false')
    {
        list($response) = $this->copyCompaniesBetweenPortfoliosWithHttpInfo($body, $authorization, $portfolio_id, $copy_all);
        return $response;
    }

    /**
     * Operation copyCompaniesBetweenPortfoliosWithHttpInfo
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringCopyAndMoveCompaniesRequest $body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio you want to copy companies from, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  bool $copy_all When CopyAll queryparameter is False, portfolios and companies list needs to be passed. When CopyAll queryparameter is True, only portfolios need to be passed and companies List must be empty. All companies are copied from current portfolio are considered here. (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringCopyAndMoveCompaniesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function copyCompaniesBetweenPortfoliosWithHttpInfo($body, $authorization, $portfolio_id, $copy_all = 'false')
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringCopyAndMoveCompaniesResponse';
        $request = $this->copyCompaniesBetweenPortfoliosRequest($body, $authorization, $portfolio_id, $copy_all);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringCopyAndMoveCompaniesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation copyCompaniesBetweenPortfoliosAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringCopyAndMoveCompaniesRequest $body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio you want to copy companies from, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  bool $copy_all When CopyAll queryparameter is False, portfolios and companies list needs to be passed. When CopyAll queryparameter is True, only portfolios need to be passed and companies List must be empty. All companies are copied from current portfolio are considered here. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function copyCompaniesBetweenPortfoliosAsync($body, $authorization, $portfolio_id, $copy_all = 'false')
    {
        return $this->copyCompaniesBetweenPortfoliosAsyncWithHttpInfo($body, $authorization, $portfolio_id, $copy_all)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation copyCompaniesBetweenPortfoliosAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringCopyAndMoveCompaniesRequest $body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio you want to copy companies from, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  bool $copy_all When CopyAll queryparameter is False, portfolios and companies list needs to be passed. When CopyAll queryparameter is True, only portfolios need to be passed and companies List must be empty. All companies are copied from current portfolio are considered here. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function copyCompaniesBetweenPortfoliosAsyncWithHttpInfo($body, $authorization, $portfolio_id, $copy_all = 'false')
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringCopyAndMoveCompaniesResponse';
        $request = $this->copyCompaniesBetweenPortfoliosRequest($body, $authorization, $portfolio_id, $copy_all);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'copyCompaniesBetweenPortfolios'
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringCopyAndMoveCompaniesRequest $body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio you want to copy companies from, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  bool $copy_all When CopyAll queryparameter is False, portfolios and companies list needs to be passed. When CopyAll queryparameter is True, only portfolios need to be passed and companies List must be empty. All companies are copied from current portfolio are considered here. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function copyCompaniesBetweenPortfoliosRequest($body, $authorization, $portfolio_id, $copy_all = 'false')
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling copyCompaniesBetweenPortfolios'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling copyCompaniesBetweenPortfolios'
            );
        }
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling copyCompaniesBetweenPortfolios'
            );
        }

        $resourcePath = '/monitoring/portfolios/{portfolioId}/companies/copy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($copy_all !== null) {
            $queryParams['copyAll'] = ObjectSerializer::toQueryValue($copy_all, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolioId' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createMonitoringPortfolio
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringCreatePortfolioRequest $body body (required)
     * @param  string $authorization Authorization Token (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringCreatePortfolioResponse
     */
    public function createMonitoringPortfolio($body, $authorization)
    {
        list($response) = $this->createMonitoringPortfolioWithHttpInfo($body, $authorization);
        return $response;
    }

    /**
     * Operation createMonitoringPortfolioWithHttpInfo
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringCreatePortfolioRequest $body (required)
     * @param  string $authorization Authorization Token (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringCreatePortfolioResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMonitoringPortfolioWithHttpInfo($body, $authorization)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringCreatePortfolioResponse';
        $request = $this->createMonitoringPortfolioRequest($body, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringCreatePortfolioResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createMonitoringPortfolioAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringCreatePortfolioRequest $body (required)
     * @param  string $authorization Authorization Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMonitoringPortfolioAsync($body, $authorization)
    {
        return $this->createMonitoringPortfolioAsyncWithHttpInfo($body, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createMonitoringPortfolioAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringCreatePortfolioRequest $body (required)
     * @param  string $authorization Authorization Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMonitoringPortfolioAsyncWithHttpInfo($body, $authorization)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringCreatePortfolioResponse';
        $request = $this->createMonitoringPortfolioRequest($body, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMonitoringPortfolio'
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringCreatePortfolioRequest $body (required)
     * @param  string $authorization Authorization Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createMonitoringPortfolioRequest($body, $authorization)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createMonitoringPortfolio'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling createMonitoringPortfolio'
            );
        }

        $resourcePath = '/monitoring/portfolios';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCompanyFromPortfolio
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $company_id A company Safe Number or Connect ID. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringDeleteCompanyFromPortfolio
     */
    public function deleteCompanyFromPortfolio($authorization, $portfolio_id, $company_id)
    {
        list($response) = $this->deleteCompanyFromPortfolioWithHttpInfo($authorization, $portfolio_id, $company_id);
        return $response;
    }

    /**
     * Operation deleteCompanyFromPortfolioWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $company_id A company Safe Number or Connect ID. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringDeleteCompanyFromPortfolio, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCompanyFromPortfolioWithHttpInfo($authorization, $portfolio_id, $company_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringDeleteCompanyFromPortfolio';
        $request = $this->deleteCompanyFromPortfolioRequest($authorization, $portfolio_id, $company_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringDeleteCompanyFromPortfolio',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCompanyFromPortfolioAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $company_id A company Safe Number or Connect ID. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCompanyFromPortfolioAsync($authorization, $portfolio_id, $company_id)
    {
        return $this->deleteCompanyFromPortfolioAsyncWithHttpInfo($authorization, $portfolio_id, $company_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCompanyFromPortfolioAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $company_id A company Safe Number or Connect ID. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCompanyFromPortfolioAsyncWithHttpInfo($authorization, $portfolio_id, $company_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringDeleteCompanyFromPortfolio';
        $request = $this->deleteCompanyFromPortfolioRequest($authorization, $portfolio_id, $company_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCompanyFromPortfolio'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $company_id A company Safe Number or Connect ID. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCompanyFromPortfolioRequest($authorization, $portfolio_id, $company_id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling deleteCompanyFromPortfolio'
            );
        }
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling deleteCompanyFromPortfolio'
            );
        }
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling deleteCompanyFromPortfolio'
            );
        }

        $resourcePath = '/monitoring/portfolios/{portfolioId}/companies/{companyId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolioId' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePortfolio
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio that you wish to delete, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringDeletePortfolio
     */
    public function deletePortfolio($authorization, $portfolio_id)
    {
        list($response) = $this->deletePortfolioWithHttpInfo($authorization, $portfolio_id);
        return $response;
    }

    /**
     * Operation deletePortfolioWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio that you wish to delete, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringDeletePortfolio, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePortfolioWithHttpInfo($authorization, $portfolio_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringDeletePortfolio';
        $request = $this->deletePortfolioRequest($authorization, $portfolio_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringDeletePortfolio',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletePortfolioAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio that you wish to delete, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePortfolioAsync($authorization, $portfolio_id)
    {
        return $this->deletePortfolioAsyncWithHttpInfo($authorization, $portfolio_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePortfolioAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio that you wish to delete, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePortfolioAsyncWithHttpInfo($authorization, $portfolio_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringDeletePortfolio';
        $request = $this->deletePortfolioRequest($authorization, $portfolio_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePortfolio'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio that you wish to delete, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deletePortfolioRequest($authorization, $portfolio_id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling deletePortfolio'
            );
        }
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling deletePortfolio'
            );
        }

        $resourcePath = '/monitoring/portfolios/{portfolioId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolioId' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation filteredEventRules
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $country_code ISO/Alpha 2 format country code for which notification event rules will be retured. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringEventRulesResponse
     */
    public function filteredEventRules($authorization, $country_code)
    {
        list($response) = $this->filteredEventRulesWithHttpInfo($authorization, $country_code);
        return $response;
    }

    /**
     * Operation filteredEventRulesWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $country_code ISO/Alpha 2 format country code for which notification event rules will be retured. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringEventRulesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function filteredEventRulesWithHttpInfo($authorization, $country_code)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringEventRulesResponse';
        $request = $this->filteredEventRulesRequest($authorization, $country_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringEventRulesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation filteredEventRulesAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $country_code ISO/Alpha 2 format country code for which notification event rules will be retured. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filteredEventRulesAsync($authorization, $country_code)
    {
        return $this->filteredEventRulesAsyncWithHttpInfo($authorization, $country_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation filteredEventRulesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $country_code ISO/Alpha 2 format country code for which notification event rules will be retured. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filteredEventRulesAsyncWithHttpInfo($authorization, $country_code)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringEventRulesResponse';
        $request = $this->filteredEventRulesRequest($authorization, $country_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'filteredEventRules'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $country_code ISO/Alpha 2 format country code for which notification event rules will be retured. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function filteredEventRulesRequest($authorization, $country_code)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling filteredEventRules'
            );
        }
        // verify the required parameter 'country_code' is set
        if ($country_code === null || (is_array($country_code) && count($country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country_code when calling filteredEventRules'
            );
        }

        $resourcePath = '/monitoring/eventRules/{countryCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($country_code !== null) {
            $resourcePath = str_replace(
                '{' . 'countryCode' . '}',
                ObjectSerializer::toPathValue($country_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompanyDetailsFromAPortfolio
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $company_id A company Safe Number or Connect ID. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringGetCompanyFromPortfolio
     */
    public function getCompanyDetailsFromAPortfolio($authorization, $portfolio_id, $company_id)
    {
        list($response) = $this->getCompanyDetailsFromAPortfolioWithHttpInfo($authorization, $portfolio_id, $company_id);
        return $response;
    }

    /**
     * Operation getCompanyDetailsFromAPortfolioWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $company_id A company Safe Number or Connect ID. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringGetCompanyFromPortfolio, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyDetailsFromAPortfolioWithHttpInfo($authorization, $portfolio_id, $company_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringGetCompanyFromPortfolio';
        $request = $this->getCompanyDetailsFromAPortfolioRequest($authorization, $portfolio_id, $company_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringGetCompanyFromPortfolio',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCompanyDetailsFromAPortfolioAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $company_id A company Safe Number or Connect ID. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyDetailsFromAPortfolioAsync($authorization, $portfolio_id, $company_id)
    {
        return $this->getCompanyDetailsFromAPortfolioAsyncWithHttpInfo($authorization, $portfolio_id, $company_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyDetailsFromAPortfolioAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $company_id A company Safe Number or Connect ID. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyDetailsFromAPortfolioAsyncWithHttpInfo($authorization, $portfolio_id, $company_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringGetCompanyFromPortfolio';
        $request = $this->getCompanyDetailsFromAPortfolioRequest($authorization, $portfolio_id, $company_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompanyDetailsFromAPortfolio'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $company_id A company Safe Number or Connect ID. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCompanyDetailsFromAPortfolioRequest($authorization, $portfolio_id, $company_id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling getCompanyDetailsFromAPortfolio'
            );
        }
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling getCompanyDetailsFromAPortfolio'
            );
        }
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getCompanyDetailsFromAPortfolio'
            );
        }

        $resourcePath = '/monitoring/portfolios/{portfolioId}/companies/{companyId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolioId' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation importAPortfolioFile
     *
     * @param  string $importcsv importcsv (required)
     * @param  string $email email (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringImportAndSyncPortfolioResponse
     */
    public function importAPortfolioFile($importcsv, $email, $authorization, $portfolio_id)
    {
        list($response) = $this->importAPortfolioFileWithHttpInfo($importcsv, $email, $authorization, $portfolio_id);
        return $response;
    }

    /**
     * Operation importAPortfolioFileWithHttpInfo
     *
     * @param  string $importcsv (required)
     * @param  string $email (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringImportAndSyncPortfolioResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function importAPortfolioFileWithHttpInfo($importcsv, $email, $authorization, $portfolio_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringImportAndSyncPortfolioResponse';
        $request = $this->importAPortfolioFileRequest($importcsv, $email, $authorization, $portfolio_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringImportAndSyncPortfolioResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation importAPortfolioFileAsync
     *
     * 
     *
     * @param  string $importcsv (required)
     * @param  string $email (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function importAPortfolioFileAsync($importcsv, $email, $authorization, $portfolio_id)
    {
        return $this->importAPortfolioFileAsyncWithHttpInfo($importcsv, $email, $authorization, $portfolio_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation importAPortfolioFileAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $importcsv (required)
     * @param  string $email (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function importAPortfolioFileAsyncWithHttpInfo($importcsv, $email, $authorization, $portfolio_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringImportAndSyncPortfolioResponse';
        $request = $this->importAPortfolioFileRequest($importcsv, $email, $authorization, $portfolio_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'importAPortfolioFile'
     *
     * @param  string $importcsv (required)
     * @param  string $email (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function importAPortfolioFileRequest($importcsv, $email, $authorization, $portfolio_id)
    {
        // verify the required parameter 'importcsv' is set
        if ($importcsv === null || (is_array($importcsv) && count($importcsv) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $importcsv when calling importAPortfolioFile'
            );
        }
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling importAPortfolioFile'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling importAPortfolioFile'
            );
        }
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling importAPortfolioFile'
            );
        }

        $resourcePath = '/monitoring/portfolios/{portfolioId}/import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolioId' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }

        // form params
        if ($importcsv !== null) {
            $multipart = true;
            $formParams['importcsv'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($importcsv), 'rb');
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = ObjectSerializer::toFormValue($email);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAllPortfolios
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $search_query Return portfolios that match the given value (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringListPortfolios
     */
    public function listAllPortfolios($authorization, $search_query = null, $page = '1', $page_size = null)
    {
        list($response) = $this->listAllPortfoliosWithHttpInfo($authorization, $search_query, $page, $page_size);
        return $response;
    }

    /**
     * Operation listAllPortfoliosWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $search_query Return portfolios that match the given value (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringListPortfolios, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAllPortfoliosWithHttpInfo($authorization, $search_query = null, $page = '1', $page_size = null)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringListPortfolios';
        $request = $this->listAllPortfoliosRequest($authorization, $search_query, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringListPortfolios',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAllPortfoliosAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $search_query Return portfolios that match the given value (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAllPortfoliosAsync($authorization, $search_query = null, $page = '1', $page_size = null)
    {
        return $this->listAllPortfoliosAsyncWithHttpInfo($authorization, $search_query, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAllPortfoliosAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $search_query Return portfolios that match the given value (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAllPortfoliosAsyncWithHttpInfo($authorization, $search_query = null, $page = '1', $page_size = null)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringListPortfolios';
        $request = $this->listAllPortfoliosRequest($authorization, $search_query, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAllPortfolios'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $search_query Return portfolios that match the given value (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listAllPortfoliosRequest($authorization, $search_query = null, $page = '1', $page_size = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling listAllPortfolios'
            );
        }

        $resourcePath = '/monitoring/portfolios';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_query !== null) {
            $queryParams['searchQuery'] = ObjectSerializer::toQueryValue($search_query, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listCompaniesInAPortfolio
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $search_query Return companies that match the given value (optional)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  string $country_code Return &lt;&lt;resourcePathName&gt;&gt; that match the given countryCode (optional)
     * @param  bool $events If set to true, all events will be returned for each company (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringCompaniesInAPortfolio
     */
    public function listCompaniesInAPortfolio($authorization, $portfolio_id, $search_query = null, $page_size = null, $page = '1', $country_code = null, $events = 'false')
    {
        list($response) = $this->listCompaniesInAPortfolioWithHttpInfo($authorization, $portfolio_id, $search_query, $page_size, $page, $country_code, $events);
        return $response;
    }

    /**
     * Operation listCompaniesInAPortfolioWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $search_query Return companies that match the given value (optional)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  string $country_code Return &lt;&lt;resourcePathName&gt;&gt; that match the given countryCode (optional)
     * @param  bool $events If set to true, all events will be returned for each company (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringCompaniesInAPortfolio, HTTP status code, HTTP response headers (array of strings)
     */
    public function listCompaniesInAPortfolioWithHttpInfo($authorization, $portfolio_id, $search_query = null, $page_size = null, $page = '1', $country_code = null, $events = 'false')
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringCompaniesInAPortfolio';
        $request = $this->listCompaniesInAPortfolioRequest($authorization, $portfolio_id, $search_query, $page_size, $page, $country_code, $events);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringCompaniesInAPortfolio',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listCompaniesInAPortfolioAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $search_query Return companies that match the given value (optional)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  string $country_code Return &lt;&lt;resourcePathName&gt;&gt; that match the given countryCode (optional)
     * @param  bool $events If set to true, all events will be returned for each company (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCompaniesInAPortfolioAsync($authorization, $portfolio_id, $search_query = null, $page_size = null, $page = '1', $country_code = null, $events = 'false')
    {
        return $this->listCompaniesInAPortfolioAsyncWithHttpInfo($authorization, $portfolio_id, $search_query, $page_size, $page, $country_code, $events)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listCompaniesInAPortfolioAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $search_query Return companies that match the given value (optional)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  string $country_code Return &lt;&lt;resourcePathName&gt;&gt; that match the given countryCode (optional)
     * @param  bool $events If set to true, all events will be returned for each company (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCompaniesInAPortfolioAsyncWithHttpInfo($authorization, $portfolio_id, $search_query = null, $page_size = null, $page = '1', $country_code = null, $events = 'false')
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringCompaniesInAPortfolio';
        $request = $this->listCompaniesInAPortfolioRequest($authorization, $portfolio_id, $search_query, $page_size, $page, $country_code, $events);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listCompaniesInAPortfolio'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $search_query Return companies that match the given value (optional)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  string $country_code Return &lt;&lt;resourcePathName&gt;&gt; that match the given countryCode (optional)
     * @param  bool $events If set to true, all events will be returned for each company (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listCompaniesInAPortfolioRequest($authorization, $portfolio_id, $search_query = null, $page_size = null, $page = '1', $country_code = null, $events = 'false')
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling listCompaniesInAPortfolio'
            );
        }
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling listCompaniesInAPortfolio'
            );
        }

        $resourcePath = '/monitoring/portfolios/{portfolioId}/companies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_query !== null) {
            $queryParams['searchQuery'] = ObjectSerializer::toQueryValue($search_query, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }
        // query params
        if ($country_code !== null) {
            $queryParams['countryCode'] = ObjectSerializer::toQueryValue($country_code, null);
        }
        // query params
        if ($events !== null) {
            $queryParams['events'] = ObjectSerializer::toQueryValue($events, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolioId' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listCompanyEvents
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $id The connectId of the company that you wish to retrieve events for. (required)
     * @param  \DateTime $start_date The start date on which results are filtered. (optional)
     * @param  \DateTime $end_date The end date on which results are filtered. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringCompanyEvents
     */
    public function listCompanyEvents($authorization, $id, $start_date = null, $end_date = null, $page = '1', $page_size = null)
    {
        list($response) = $this->listCompanyEventsWithHttpInfo($authorization, $id, $start_date, $end_date, $page, $page_size);
        return $response;
    }

    /**
     * Operation listCompanyEventsWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $id The connectId of the company that you wish to retrieve events for. (required)
     * @param  \DateTime $start_date The start date on which results are filtered. (optional)
     * @param  \DateTime $end_date The end date on which results are filtered. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringCompanyEvents, HTTP status code, HTTP response headers (array of strings)
     */
    public function listCompanyEventsWithHttpInfo($authorization, $id, $start_date = null, $end_date = null, $page = '1', $page_size = null)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringCompanyEvents';
        $request = $this->listCompanyEventsRequest($authorization, $id, $start_date, $end_date, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringCompanyEvents',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listCompanyEventsAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $id The connectId of the company that you wish to retrieve events for. (required)
     * @param  \DateTime $start_date The start date on which results are filtered. (optional)
     * @param  \DateTime $end_date The end date on which results are filtered. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCompanyEventsAsync($authorization, $id, $start_date = null, $end_date = null, $page = '1', $page_size = null)
    {
        return $this->listCompanyEventsAsyncWithHttpInfo($authorization, $id, $start_date, $end_date, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listCompanyEventsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $id The connectId of the company that you wish to retrieve events for. (required)
     * @param  \DateTime $start_date The start date on which results are filtered. (optional)
     * @param  \DateTime $end_date The end date on which results are filtered. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCompanyEventsAsyncWithHttpInfo($authorization, $id, $start_date = null, $end_date = null, $page = '1', $page_size = null)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringCompanyEvents';
        $request = $this->listCompanyEventsRequest($authorization, $id, $start_date, $end_date, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listCompanyEvents'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $id The connectId of the company that you wish to retrieve events for. (required)
     * @param  \DateTime $start_date The start date on which results are filtered. (optional)
     * @param  \DateTime $end_date The end date on which results are filtered. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listCompanyEventsRequest($authorization, $id, $start_date = null, $end_date = null, $page = '1', $page_size = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling listCompanyEvents'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling listCompanyEvents'
            );
        }

        $resourcePath = '/monitoring/companies/{id}/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = ObjectSerializer::toQueryValue($start_date, 'date-time');
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = ObjectSerializer::toQueryValue($end_date, 'date-time');
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listCompanySpecificNotificationEvents
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $id A company Safe Number or Connect ID. (required)
     * @param  string $search_query Return notificationEvents that match the given value (optional)
     * @param  string $sort_dir The direction that you wish to sort results by. (optional, default to asc)
     * @param  int $page_size Number of items to return per Page (max 1000) (optional, default to 50)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  bool $is_processed A flag that can be set to &#x60;true&#x60; boolean value to mark it as an event that has beebn actioned. (optional)
     * @param  string $sort_by Sort results by this column. Null values of sort column are listed after non-nulls. (optional, default to companyName)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function listCompanySpecificNotificationEvents($authorization, $portfolio_id, $id, $search_query = null, $sort_dir = 'asc', $page_size = '50', $page = '1', $is_processed = null, $sort_by = 'companyName')
    {
        $this->listCompanySpecificNotificationEventsWithHttpInfo($authorization, $portfolio_id, $id, $search_query, $sort_dir, $page_size, $page, $is_processed, $sort_by);
    }

    /**
     * Operation listCompanySpecificNotificationEventsWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $id A company Safe Number or Connect ID. (required)
     * @param  string $search_query Return notificationEvents that match the given value (optional)
     * @param  string $sort_dir The direction that you wish to sort results by. (optional, default to asc)
     * @param  int $page_size Number of items to return per Page (max 1000) (optional, default to 50)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  bool $is_processed A flag that can be set to &#x60;true&#x60; boolean value to mark it as an event that has beebn actioned. (optional)
     * @param  string $sort_by Sort results by this column. Null values of sort column are listed after non-nulls. (optional, default to companyName)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function listCompanySpecificNotificationEventsWithHttpInfo($authorization, $portfolio_id, $id, $search_query = null, $sort_dir = 'asc', $page_size = '50', $page = '1', $is_processed = null, $sort_by = 'companyName')
    {
        $returnType = '';
        $request = $this->listCompanySpecificNotificationEventsRequest($authorization, $portfolio_id, $id, $search_query, $sort_dir, $page_size, $page, $is_processed, $sort_by);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listCompanySpecificNotificationEventsAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $id A company Safe Number or Connect ID. (required)
     * @param  string $search_query Return notificationEvents that match the given value (optional)
     * @param  string $sort_dir The direction that you wish to sort results by. (optional, default to asc)
     * @param  int $page_size Number of items to return per Page (max 1000) (optional, default to 50)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  bool $is_processed A flag that can be set to &#x60;true&#x60; boolean value to mark it as an event that has beebn actioned. (optional)
     * @param  string $sort_by Sort results by this column. Null values of sort column are listed after non-nulls. (optional, default to companyName)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCompanySpecificNotificationEventsAsync($authorization, $portfolio_id, $id, $search_query = null, $sort_dir = 'asc', $page_size = '50', $page = '1', $is_processed = null, $sort_by = 'companyName')
    {
        return $this->listCompanySpecificNotificationEventsAsyncWithHttpInfo($authorization, $portfolio_id, $id, $search_query, $sort_dir, $page_size, $page, $is_processed, $sort_by)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listCompanySpecificNotificationEventsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $id A company Safe Number or Connect ID. (required)
     * @param  string $search_query Return notificationEvents that match the given value (optional)
     * @param  string $sort_dir The direction that you wish to sort results by. (optional, default to asc)
     * @param  int $page_size Number of items to return per Page (max 1000) (optional, default to 50)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  bool $is_processed A flag that can be set to &#x60;true&#x60; boolean value to mark it as an event that has beebn actioned. (optional)
     * @param  string $sort_by Sort results by this column. Null values of sort column are listed after non-nulls. (optional, default to companyName)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCompanySpecificNotificationEventsAsyncWithHttpInfo($authorization, $portfolio_id, $id, $search_query = null, $sort_dir = 'asc', $page_size = '50', $page = '1', $is_processed = null, $sort_by = 'companyName')
    {
        $returnType = '';
        $request = $this->listCompanySpecificNotificationEventsRequest($authorization, $portfolio_id, $id, $search_query, $sort_dir, $page_size, $page, $is_processed, $sort_by);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listCompanySpecificNotificationEvents'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $id A company Safe Number or Connect ID. (required)
     * @param  string $search_query Return notificationEvents that match the given value (optional)
     * @param  string $sort_dir The direction that you wish to sort results by. (optional, default to asc)
     * @param  int $page_size Number of items to return per Page (max 1000) (optional, default to 50)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  bool $is_processed A flag that can be set to &#x60;true&#x60; boolean value to mark it as an event that has beebn actioned. (optional)
     * @param  string $sort_by Sort results by this column. Null values of sort column are listed after non-nulls. (optional, default to companyName)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listCompanySpecificNotificationEventsRequest($authorization, $portfolio_id, $id, $search_query = null, $sort_dir = 'asc', $page_size = '50', $page = '1', $is_processed = null, $sort_by = 'companyName')
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling listCompanySpecificNotificationEvents'
            );
        }
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling listCompanySpecificNotificationEvents'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling listCompanySpecificNotificationEvents'
            );
        }

        $resourcePath = '/monitoring/portfolios/{portfolioId}/companies/{id}/notificationEvents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_query !== null) {
            $queryParams['searchQuery'] = ObjectSerializer::toQueryValue($search_query, null);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sortDir'] = ObjectSerializer::toQueryValue($sort_dir, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }
        // query params
        if ($is_processed !== null) {
            $queryParams['isProcessed'] = ObjectSerializer::toQueryValue($is_processed, null);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolioId' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listCountriesOfMonitoredCompanies
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringMonitoredCountriesInPortfolio
     */
    public function listCountriesOfMonitoredCompanies($authorization, $portfolio_id)
    {
        list($response) = $this->listCountriesOfMonitoredCompaniesWithHttpInfo($authorization, $portfolio_id);
        return $response;
    }

    /**
     * Operation listCountriesOfMonitoredCompaniesWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringMonitoredCountriesInPortfolio, HTTP status code, HTTP response headers (array of strings)
     */
    public function listCountriesOfMonitoredCompaniesWithHttpInfo($authorization, $portfolio_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringMonitoredCountriesInPortfolio';
        $request = $this->listCountriesOfMonitoredCompaniesRequest($authorization, $portfolio_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringMonitoredCountriesInPortfolio',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listCountriesOfMonitoredCompaniesAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCountriesOfMonitoredCompaniesAsync($authorization, $portfolio_id)
    {
        return $this->listCountriesOfMonitoredCompaniesAsyncWithHttpInfo($authorization, $portfolio_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listCountriesOfMonitoredCompaniesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCountriesOfMonitoredCompaniesAsyncWithHttpInfo($authorization, $portfolio_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringMonitoredCountriesInPortfolio';
        $request = $this->listCountriesOfMonitoredCompaniesRequest($authorization, $portfolio_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listCountriesOfMonitoredCompanies'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listCountriesOfMonitoredCompaniesRequest($authorization, $portfolio_id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling listCountriesOfMonitoredCompanies'
            );
        }
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling listCountriesOfMonitoredCompanies'
            );
        }

        $resourcePath = '/monitoring/portfolios/{portfolioId}/countries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolioId' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPortfolioEventRules
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier for the portfolio that you wish to retrieve notification event rules for, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringListPortfolioEventRules
     */
    public function listPortfolioEventRules($authorization, $portfolio_id)
    {
        list($response) = $this->listPortfolioEventRulesWithHttpInfo($authorization, $portfolio_id);
        return $response;
    }

    /**
     * Operation listPortfolioEventRulesWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier for the portfolio that you wish to retrieve notification event rules for, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringListPortfolioEventRules, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPortfolioEventRulesWithHttpInfo($authorization, $portfolio_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringListPortfolioEventRules';
        $request = $this->listPortfolioEventRulesRequest($authorization, $portfolio_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringListPortfolioEventRules',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPortfolioEventRulesAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier for the portfolio that you wish to retrieve notification event rules for, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPortfolioEventRulesAsync($authorization, $portfolio_id)
    {
        return $this->listPortfolioEventRulesAsyncWithHttpInfo($authorization, $portfolio_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPortfolioEventRulesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier for the portfolio that you wish to retrieve notification event rules for, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPortfolioEventRulesAsyncWithHttpInfo($authorization, $portfolio_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringListPortfolioEventRules';
        $request = $this->listPortfolioEventRulesRequest($authorization, $portfolio_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPortfolioEventRules'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier for the portfolio that you wish to retrieve notification event rules for, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listPortfolioEventRulesRequest($authorization, $portfolio_id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling listPortfolioEventRules'
            );
        }
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling listPortfolioEventRules'
            );
        }

        $resourcePath = '/monitoring/portfolios/{portfolioId}/eventRules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolioId' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPortfolioEventRulesByCountry
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $country_code Country code to show events for. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringListPortfolioEventRules
     */
    public function listPortfolioEventRulesByCountry($authorization, $portfolio_id, $country_code)
    {
        list($response) = $this->listPortfolioEventRulesByCountryWithHttpInfo($authorization, $portfolio_id, $country_code);
        return $response;
    }

    /**
     * Operation listPortfolioEventRulesByCountryWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $country_code Country code to show events for. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringListPortfolioEventRules, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPortfolioEventRulesByCountryWithHttpInfo($authorization, $portfolio_id, $country_code)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringListPortfolioEventRules';
        $request = $this->listPortfolioEventRulesByCountryRequest($authorization, $portfolio_id, $country_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringListPortfolioEventRules',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPortfolioEventRulesByCountryAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $country_code Country code to show events for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPortfolioEventRulesByCountryAsync($authorization, $portfolio_id, $country_code)
    {
        return $this->listPortfolioEventRulesByCountryAsyncWithHttpInfo($authorization, $portfolio_id, $country_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPortfolioEventRulesByCountryAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $country_code Country code to show events for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPortfolioEventRulesByCountryAsyncWithHttpInfo($authorization, $portfolio_id, $country_code)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringListPortfolioEventRules';
        $request = $this->listPortfolioEventRulesByCountryRequest($authorization, $portfolio_id, $country_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPortfolioEventRulesByCountry'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $country_code Country code to show events for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listPortfolioEventRulesByCountryRequest($authorization, $portfolio_id, $country_code)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling listPortfolioEventRulesByCountry'
            );
        }
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling listPortfolioEventRulesByCountry'
            );
        }
        // verify the required parameter 'country_code' is set
        if ($country_code === null || (is_array($country_code) && count($country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country_code when calling listPortfolioEventRulesByCountry'
            );
        }

        $resourcePath = '/monitoring/portfolios/{portfolioId}/eventRules/{countryCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolioId' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }
        // path params
        if ($country_code !== null) {
            $resourcePath = str_replace(
                '{' . 'countryCode' . '}',
                ObjectSerializer::toPathValue($country_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPortfolioNotifications
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $search_query Return notificationEvents that match the given value (optional)
     * @param  string $sort_by Sort results by this column. Null values of sort column are listed after non-nulls. (optional, default to companyName)
     * @param  string $sort_dir The direction that you wish to sort results by. (optional, default to asc)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  \DateTime $start_date The start date on which results are filtered. (optional)
     * @param  \DateTime $end_date The end date on which results are filtered. (optional)
     * @param  bool $filter_by_created_date Set to &#x60;true&#x60; to filter the Notification Events of the \&quot;createdDate\&quot; field when using &#x60;startDate&#x60; and &#x60;endDate&#x60; parameters. By default this is set to &#x60;false&#x60;, with the date paramters filtering using the \&quot;eventDate\&quot; field. (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringAllNotificationsEvents
     */
    public function listPortfolioNotifications($authorization, $portfolio_id, $search_query = null, $sort_by = 'companyName', $sort_dir = 'asc', $page_size = null, $page = '1', $start_date = null, $end_date = null, $filter_by_created_date = 'false')
    {
        list($response) = $this->listPortfolioNotificationsWithHttpInfo($authorization, $portfolio_id, $search_query, $sort_by, $sort_dir, $page_size, $page, $start_date, $end_date, $filter_by_created_date);
        return $response;
    }

    /**
     * Operation listPortfolioNotificationsWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $search_query Return notificationEvents that match the given value (optional)
     * @param  string $sort_by Sort results by this column. Null values of sort column are listed after non-nulls. (optional, default to companyName)
     * @param  string $sort_dir The direction that you wish to sort results by. (optional, default to asc)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  \DateTime $start_date The start date on which results are filtered. (optional)
     * @param  \DateTime $end_date The end date on which results are filtered. (optional)
     * @param  bool $filter_by_created_date Set to &#x60;true&#x60; to filter the Notification Events of the \&quot;createdDate\&quot; field when using &#x60;startDate&#x60; and &#x60;endDate&#x60; parameters. By default this is set to &#x60;false&#x60;, with the date paramters filtering using the \&quot;eventDate\&quot; field. (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringAllNotificationsEvents, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPortfolioNotificationsWithHttpInfo($authorization, $portfolio_id, $search_query = null, $sort_by = 'companyName', $sort_dir = 'asc', $page_size = null, $page = '1', $start_date = null, $end_date = null, $filter_by_created_date = 'false')
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringAllNotificationsEvents';
        $request = $this->listPortfolioNotificationsRequest($authorization, $portfolio_id, $search_query, $sort_by, $sort_dir, $page_size, $page, $start_date, $end_date, $filter_by_created_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringAllNotificationsEvents',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPortfolioNotificationsAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $search_query Return notificationEvents that match the given value (optional)
     * @param  string $sort_by Sort results by this column. Null values of sort column are listed after non-nulls. (optional, default to companyName)
     * @param  string $sort_dir The direction that you wish to sort results by. (optional, default to asc)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  \DateTime $start_date The start date on which results are filtered. (optional)
     * @param  \DateTime $end_date The end date on which results are filtered. (optional)
     * @param  bool $filter_by_created_date Set to &#x60;true&#x60; to filter the Notification Events of the \&quot;createdDate\&quot; field when using &#x60;startDate&#x60; and &#x60;endDate&#x60; parameters. By default this is set to &#x60;false&#x60;, with the date paramters filtering using the \&quot;eventDate\&quot; field. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPortfolioNotificationsAsync($authorization, $portfolio_id, $search_query = null, $sort_by = 'companyName', $sort_dir = 'asc', $page_size = null, $page = '1', $start_date = null, $end_date = null, $filter_by_created_date = 'false')
    {
        return $this->listPortfolioNotificationsAsyncWithHttpInfo($authorization, $portfolio_id, $search_query, $sort_by, $sort_dir, $page_size, $page, $start_date, $end_date, $filter_by_created_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPortfolioNotificationsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $search_query Return notificationEvents that match the given value (optional)
     * @param  string $sort_by Sort results by this column. Null values of sort column are listed after non-nulls. (optional, default to companyName)
     * @param  string $sort_dir The direction that you wish to sort results by. (optional, default to asc)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  \DateTime $start_date The start date on which results are filtered. (optional)
     * @param  \DateTime $end_date The end date on which results are filtered. (optional)
     * @param  bool $filter_by_created_date Set to &#x60;true&#x60; to filter the Notification Events of the \&quot;createdDate\&quot; field when using &#x60;startDate&#x60; and &#x60;endDate&#x60; parameters. By default this is set to &#x60;false&#x60;, with the date paramters filtering using the \&quot;eventDate\&quot; field. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPortfolioNotificationsAsyncWithHttpInfo($authorization, $portfolio_id, $search_query = null, $sort_by = 'companyName', $sort_dir = 'asc', $page_size = null, $page = '1', $start_date = null, $end_date = null, $filter_by_created_date = 'false')
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringAllNotificationsEvents';
        $request = $this->listPortfolioNotificationsRequest($authorization, $portfolio_id, $search_query, $sort_by, $sort_dir, $page_size, $page, $start_date, $end_date, $filter_by_created_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPortfolioNotifications'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $search_query Return notificationEvents that match the given value (optional)
     * @param  string $sort_by Sort results by this column. Null values of sort column are listed after non-nulls. (optional, default to companyName)
     * @param  string $sort_dir The direction that you wish to sort results by. (optional, default to asc)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  \DateTime $start_date The start date on which results are filtered. (optional)
     * @param  \DateTime $end_date The end date on which results are filtered. (optional)
     * @param  bool $filter_by_created_date Set to &#x60;true&#x60; to filter the Notification Events of the \&quot;createdDate\&quot; field when using &#x60;startDate&#x60; and &#x60;endDate&#x60; parameters. By default this is set to &#x60;false&#x60;, with the date paramters filtering using the \&quot;eventDate\&quot; field. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listPortfolioNotificationsRequest($authorization, $portfolio_id, $search_query = null, $sort_by = 'companyName', $sort_dir = 'asc', $page_size = null, $page = '1', $start_date = null, $end_date = null, $filter_by_created_date = 'false')
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling listPortfolioNotifications'
            );
        }
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling listPortfolioNotifications'
            );
        }

        $resourcePath = '/monitoring/portfolios/{portfolioId}/notificationEvents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_query !== null) {
            $queryParams['searchQuery'] = ObjectSerializer::toQueryValue($search_query, null);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by, null);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sortDir'] = ObjectSerializer::toQueryValue($sort_dir, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = ObjectSerializer::toQueryValue($start_date, 'date-time');
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = ObjectSerializer::toQueryValue($end_date, 'date-time');
        }
        // query params
        if ($filter_by_created_date !== null) {
            $queryParams['filterByCreatedDate'] = ObjectSerializer::toQueryValue($filter_by_created_date, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolioId' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation monitoringUserDetails
     *
     * @param  string $authorization Authorization Token (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringUserDetails
     */
    public function monitoringUserDetails($authorization)
    {
        list($response) = $this->monitoringUserDetailsWithHttpInfo($authorization);
        return $response;
    }

    /**
     * Operation monitoringUserDetailsWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringUserDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function monitoringUserDetailsWithHttpInfo($authorization)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringUserDetails';
        $request = $this->monitoringUserDetailsRequest($authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringUserDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation monitoringUserDetailsAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function monitoringUserDetailsAsync($authorization)
    {
        return $this->monitoringUserDetailsAsyncWithHttpInfo($authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation monitoringUserDetailsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function monitoringUserDetailsAsyncWithHttpInfo($authorization)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringUserDetails';
        $request = $this->monitoringUserDetailsRequest($authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'monitoringUserDetails'
     *
     * @param  string $authorization Authorization Token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function monitoringUserDetailsRequest($authorization)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling monitoringUserDetails'
            );
        }

        $resourcePath = '/monitoring/user/details';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation moveCompaniesBetweenPortfolios
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringCopyAndMoveCompaniesRequest $body body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio you want to move companies from, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  bool $remove_all When RemoveAll queryparameter is False, portfolios and companies List needs to be passed. When RemoveAll queryparameter is True, only portfolios need to be passed and companies List must be empty. All companies are moved and deleted from current portfolio. (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringCopyAndMoveCompaniesResponse
     */
    public function moveCompaniesBetweenPortfolios($body, $authorization, $portfolio_id, $remove_all = 'false')
    {
        list($response) = $this->moveCompaniesBetweenPortfoliosWithHttpInfo($body, $authorization, $portfolio_id, $remove_all);
        return $response;
    }

    /**
     * Operation moveCompaniesBetweenPortfoliosWithHttpInfo
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringCopyAndMoveCompaniesRequest $body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio you want to move companies from, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  bool $remove_all When RemoveAll queryparameter is False, portfolios and companies List needs to be passed. When RemoveAll queryparameter is True, only portfolios need to be passed and companies List must be empty. All companies are moved and deleted from current portfolio. (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringCopyAndMoveCompaniesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function moveCompaniesBetweenPortfoliosWithHttpInfo($body, $authorization, $portfolio_id, $remove_all = 'false')
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringCopyAndMoveCompaniesResponse';
        $request = $this->moveCompaniesBetweenPortfoliosRequest($body, $authorization, $portfolio_id, $remove_all);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringCopyAndMoveCompaniesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation moveCompaniesBetweenPortfoliosAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringCopyAndMoveCompaniesRequest $body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio you want to move companies from, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  bool $remove_all When RemoveAll queryparameter is False, portfolios and companies List needs to be passed. When RemoveAll queryparameter is True, only portfolios need to be passed and companies List must be empty. All companies are moved and deleted from current portfolio. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function moveCompaniesBetweenPortfoliosAsync($body, $authorization, $portfolio_id, $remove_all = 'false')
    {
        return $this->moveCompaniesBetweenPortfoliosAsyncWithHttpInfo($body, $authorization, $portfolio_id, $remove_all)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation moveCompaniesBetweenPortfoliosAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringCopyAndMoveCompaniesRequest $body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio you want to move companies from, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  bool $remove_all When RemoveAll queryparameter is False, portfolios and companies List needs to be passed. When RemoveAll queryparameter is True, only portfolios need to be passed and companies List must be empty. All companies are moved and deleted from current portfolio. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function moveCompaniesBetweenPortfoliosAsyncWithHttpInfo($body, $authorization, $portfolio_id, $remove_all = 'false')
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringCopyAndMoveCompaniesResponse';
        $request = $this->moveCompaniesBetweenPortfoliosRequest($body, $authorization, $portfolio_id, $remove_all);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'moveCompaniesBetweenPortfolios'
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringCopyAndMoveCompaniesRequest $body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio you want to move companies from, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  bool $remove_all When RemoveAll queryparameter is False, portfolios and companies List needs to be passed. When RemoveAll queryparameter is True, only portfolios need to be passed and companies List must be empty. All companies are moved and deleted from current portfolio. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function moveCompaniesBetweenPortfoliosRequest($body, $authorization, $portfolio_id, $remove_all = 'false')
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling moveCompaniesBetweenPortfolios'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling moveCompaniesBetweenPortfolios'
            );
        }
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling moveCompaniesBetweenPortfolios'
            );
        }

        $resourcePath = '/monitoring/portfolios/{portfolioId}/companies/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($remove_all !== null) {
            $queryParams['removeAll'] = ObjectSerializer::toQueryValue($remove_all, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolioId' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation portfolioUserPermissions
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringListSharingPermissions
     */
    public function portfolioUserPermissions($authorization, $portfolio_id)
    {
        list($response) = $this->portfolioUserPermissionsWithHttpInfo($authorization, $portfolio_id);
        return $response;
    }

    /**
     * Operation portfolioUserPermissionsWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringListSharingPermissions, HTTP status code, HTTP response headers (array of strings)
     */
    public function portfolioUserPermissionsWithHttpInfo($authorization, $portfolio_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringListSharingPermissions';
        $request = $this->portfolioUserPermissionsRequest($authorization, $portfolio_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringListSharingPermissions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation portfolioUserPermissionsAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function portfolioUserPermissionsAsync($authorization, $portfolio_id)
    {
        return $this->portfolioUserPermissionsAsyncWithHttpInfo($authorization, $portfolio_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation portfolioUserPermissionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function portfolioUserPermissionsAsyncWithHttpInfo($authorization, $portfolio_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringListSharingPermissions';
        $request = $this->portfolioUserPermissionsRequest($authorization, $portfolio_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'portfolioUserPermissions'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function portfolioUserPermissionsRequest($authorization, $portfolio_id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling portfolioUserPermissions'
            );
        }
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling portfolioUserPermissions'
            );
        }

        $resourcePath = '/monitoring/portfolios/{portfolioId}/sharingPermissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolioId' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation portoflioRiskSummary
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringRiskSummary
     */
    public function portoflioRiskSummary($authorization, $portfolio_id)
    {
        list($response) = $this->portoflioRiskSummaryWithHttpInfo($authorization, $portfolio_id);
        return $response;
    }

    /**
     * Operation portoflioRiskSummaryWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringRiskSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function portoflioRiskSummaryWithHttpInfo($authorization, $portfolio_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringRiskSummary';
        $request = $this->portoflioRiskSummaryRequest($authorization, $portfolio_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringRiskSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation portoflioRiskSummaryAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function portoflioRiskSummaryAsync($authorization, $portfolio_id)
    {
        return $this->portoflioRiskSummaryAsyncWithHttpInfo($authorization, $portfolio_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation portoflioRiskSummaryAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function portoflioRiskSummaryAsyncWithHttpInfo($authorization, $portfolio_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringRiskSummary';
        $request = $this->portoflioRiskSummaryRequest($authorization, $portfolio_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'portoflioRiskSummary'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function portoflioRiskSummaryRequest($authorization, $portfolio_id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling portoflioRiskSummary'
            );
        }
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling portoflioRiskSummary'
            );
        }

        $resourcePath = '/monitoring/portfolios/{portfolioId}/riskSummary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolioId' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrievePortfolioById
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier for the portfolio that you wish to retrieve, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringGetPortfolioById
     */
    public function retrievePortfolioById($authorization, $portfolio_id)
    {
        list($response) = $this->retrievePortfolioByIdWithHttpInfo($authorization, $portfolio_id);
        return $response;
    }

    /**
     * Operation retrievePortfolioByIdWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier for the portfolio that you wish to retrieve, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringGetPortfolioById, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrievePortfolioByIdWithHttpInfo($authorization, $portfolio_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringGetPortfolioById';
        $request = $this->retrievePortfolioByIdRequest($authorization, $portfolio_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringGetPortfolioById',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrievePortfolioByIdAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier for the portfolio that you wish to retrieve, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrievePortfolioByIdAsync($authorization, $portfolio_id)
    {
        return $this->retrievePortfolioByIdAsyncWithHttpInfo($authorization, $portfolio_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrievePortfolioByIdAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier for the portfolio that you wish to retrieve, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrievePortfolioByIdAsyncWithHttpInfo($authorization, $portfolio_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringGetPortfolioById';
        $request = $this->retrievePortfolioByIdRequest($authorization, $portfolio_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrievePortfolioById'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier for the portfolio that you wish to retrieve, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrievePortfolioByIdRequest($authorization, $portfolio_id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling retrievePortfolioById'
            );
        }
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling retrievePortfolioById'
            );
        }

        $resourcePath = '/monitoring/portfolios/{portfolioId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolioId' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setPortfolioDefaultRules
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse204
     */
    public function setPortfolioDefaultRules($authorization, $portfolio_id)
    {
        list($response) = $this->setPortfolioDefaultRulesWithHttpInfo($authorization, $portfolio_id);
        return $response;
    }

    /**
     * Operation setPortfolioDefaultRulesWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse204, HTTP status code, HTTP response headers (array of strings)
     */
    public function setPortfolioDefaultRulesWithHttpInfo($authorization, $portfolio_id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse204';
        $request = $this->setPortfolioDefaultRulesRequest($authorization, $portfolio_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse204',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setPortfolioDefaultRulesAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setPortfolioDefaultRulesAsync($authorization, $portfolio_id)
    {
        return $this->setPortfolioDefaultRulesAsyncWithHttpInfo($authorization, $portfolio_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setPortfolioDefaultRulesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setPortfolioDefaultRulesAsyncWithHttpInfo($authorization, $portfolio_id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse204';
        $request = $this->setPortfolioDefaultRulesRequest($authorization, $portfolio_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setPortfolioDefaultRules'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setPortfolioDefaultRulesRequest($authorization, $portfolio_id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling setPortfolioDefaultRules'
            );
        }
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling setPortfolioDefaultRules'
            );
        }

        $resourcePath = '/monitoring/portfolios/{portfolioId}/eventRules/setDefault';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolioId' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sharePortfolioWithUsers
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringSharePortfolioRequest $body body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringSharePortfolioRequestResponse
     */
    public function sharePortfolioWithUsers($body, $authorization, $portfolio_id)
    {
        list($response) = $this->sharePortfolioWithUsersWithHttpInfo($body, $authorization, $portfolio_id);
        return $response;
    }

    /**
     * Operation sharePortfolioWithUsersWithHttpInfo
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringSharePortfolioRequest $body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringSharePortfolioRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sharePortfolioWithUsersWithHttpInfo($body, $authorization, $portfolio_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringSharePortfolioRequestResponse';
        $request = $this->sharePortfolioWithUsersRequest($body, $authorization, $portfolio_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringSharePortfolioRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sharePortfolioWithUsersAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringSharePortfolioRequest $body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sharePortfolioWithUsersAsync($body, $authorization, $portfolio_id)
    {
        return $this->sharePortfolioWithUsersAsyncWithHttpInfo($body, $authorization, $portfolio_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sharePortfolioWithUsersAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringSharePortfolioRequest $body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sharePortfolioWithUsersAsyncWithHttpInfo($body, $authorization, $portfolio_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringSharePortfolioRequestResponse';
        $request = $this->sharePortfolioWithUsersRequest($body, $authorization, $portfolio_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sharePortfolioWithUsers'
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringSharePortfolioRequest $body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sharePortfolioWithUsersRequest($body, $authorization, $portfolio_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling sharePortfolioWithUsers'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling sharePortfolioWithUsers'
            );
        }
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling sharePortfolioWithUsers'
            );
        }

        $resourcePath = '/monitoring/portfolios/{portfolioId}/sharingPermissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolioId' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syncAPortfolioFile
     *
     * @param  string $importcsv importcsv (required)
     * @param  string $email email (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringImportAndSyncPortfolioResponse
     */
    public function syncAPortfolioFile($importcsv, $email, $authorization, $portfolio_id)
    {
        list($response) = $this->syncAPortfolioFileWithHttpInfo($importcsv, $email, $authorization, $portfolio_id);
        return $response;
    }

    /**
     * Operation syncAPortfolioFileWithHttpInfo
     *
     * @param  string $importcsv (required)
     * @param  string $email (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringImportAndSyncPortfolioResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function syncAPortfolioFileWithHttpInfo($importcsv, $email, $authorization, $portfolio_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringImportAndSyncPortfolioResponse';
        $request = $this->syncAPortfolioFileRequest($importcsv, $email, $authorization, $portfolio_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringImportAndSyncPortfolioResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation syncAPortfolioFileAsync
     *
     * 
     *
     * @param  string $importcsv (required)
     * @param  string $email (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncAPortfolioFileAsync($importcsv, $email, $authorization, $portfolio_id)
    {
        return $this->syncAPortfolioFileAsyncWithHttpInfo($importcsv, $email, $authorization, $portfolio_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation syncAPortfolioFileAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $importcsv (required)
     * @param  string $email (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncAPortfolioFileAsyncWithHttpInfo($importcsv, $email, $authorization, $portfolio_id)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringImportAndSyncPortfolioResponse';
        $request = $this->syncAPortfolioFileRequest($importcsv, $email, $authorization, $portfolio_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'syncAPortfolioFile'
     *
     * @param  string $importcsv (required)
     * @param  string $email (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function syncAPortfolioFileRequest($importcsv, $email, $authorization, $portfolio_id)
    {
        // verify the required parameter 'importcsv' is set
        if ($importcsv === null || (is_array($importcsv) && count($importcsv) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $importcsv when calling syncAPortfolioFile'
            );
        }
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling syncAPortfolioFile'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling syncAPortfolioFile'
            );
        }
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling syncAPortfolioFile'
            );
        }

        $resourcePath = '/monitoring/portfolios/{portfolioId}/sync';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolioId' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }

        // form params
        if ($importcsv !== null) {
            $multipart = true;
            $formParams['importcsv'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($importcsv), 'rb');
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = ObjectSerializer::toFormValue($email);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCompanyDetailsInPortfolio
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $company_id A company Safe Number or Connect ID. (required)
     * @param  \Swagger\Client\Model\ConnectMonitoringUpdateCompanyDetailsInPortfolioRequest $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateCompanyDetailsInPortfolio($authorization, $portfolio_id, $company_id, $body = null)
    {
        $this->updateCompanyDetailsInPortfolioWithHttpInfo($authorization, $portfolio_id, $company_id, $body);
    }

    /**
     * Operation updateCompanyDetailsInPortfolioWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $company_id A company Safe Number or Connect ID. (required)
     * @param  \Swagger\Client\Model\ConnectMonitoringUpdateCompanyDetailsInPortfolioRequest $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCompanyDetailsInPortfolioWithHttpInfo($authorization, $portfolio_id, $company_id, $body = null)
    {
        $returnType = '';
        $request = $this->updateCompanyDetailsInPortfolioRequest($authorization, $portfolio_id, $company_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCompanyDetailsInPortfolioAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $company_id A company Safe Number or Connect ID. (required)
     * @param  \Swagger\Client\Model\ConnectMonitoringUpdateCompanyDetailsInPortfolioRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCompanyDetailsInPortfolioAsync($authorization, $portfolio_id, $company_id, $body = null)
    {
        return $this->updateCompanyDetailsInPortfolioAsyncWithHttpInfo($authorization, $portfolio_id, $company_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCompanyDetailsInPortfolioAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $company_id A company Safe Number or Connect ID. (required)
     * @param  \Swagger\Client\Model\ConnectMonitoringUpdateCompanyDetailsInPortfolioRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCompanyDetailsInPortfolioAsyncWithHttpInfo($authorization, $portfolio_id, $company_id, $body = null)
    {
        $returnType = '';
        $request = $this->updateCompanyDetailsInPortfolioRequest($authorization, $portfolio_id, $company_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCompanyDetailsInPortfolio'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $company_id A company Safe Number or Connect ID. (required)
     * @param  \Swagger\Client\Model\ConnectMonitoringUpdateCompanyDetailsInPortfolioRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCompanyDetailsInPortfolioRequest($authorization, $portfolio_id, $company_id, $body = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling updateCompanyDetailsInPortfolio'
            );
        }
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling updateCompanyDetailsInPortfolio'
            );
        }
        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling updateCompanyDetailsInPortfolio'
            );
        }

        $resourcePath = '/monitoring/portfolios/{portfolioId}/companies/{companyId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolioId' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEventRules
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringUpdateEventRulesBody[] $body body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $country_code Country code to show events for (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse204
     */
    public function updateEventRules($body, $authorization, $portfolio_id, $country_code)
    {
        list($response) = $this->updateEventRulesWithHttpInfo($body, $authorization, $portfolio_id, $country_code);
        return $response;
    }

    /**
     * Operation updateEventRulesWithHttpInfo
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringUpdateEventRulesBody[] $body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $country_code Country code to show events for (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse204, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEventRulesWithHttpInfo($body, $authorization, $portfolio_id, $country_code)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse204';
        $request = $this->updateEventRulesRequest($body, $authorization, $portfolio_id, $country_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse204',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEventRulesAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringUpdateEventRulesBody[] $body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $country_code Country code to show events for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEventRulesAsync($body, $authorization, $portfolio_id, $country_code)
    {
        return $this->updateEventRulesAsyncWithHttpInfo($body, $authorization, $portfolio_id, $country_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEventRulesAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringUpdateEventRulesBody[] $body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $country_code Country code to show events for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEventRulesAsyncWithHttpInfo($body, $authorization, $portfolio_id, $country_code)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse204';
        $request = $this->updateEventRulesRequest($body, $authorization, $portfolio_id, $country_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEventRules'
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringUpdateEventRulesBody[] $body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  string $country_code Country code to show events for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEventRulesRequest($body, $authorization, $portfolio_id, $country_code)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateEventRules'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling updateEventRules'
            );
        }
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling updateEventRules'
            );
        }
        // verify the required parameter 'country_code' is set
        if ($country_code === null || (is_array($country_code) && count($country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $country_code when calling updateEventRules'
            );
        }

        $resourcePath = '/monitoring/portfolios/{portfolioId}/eventRules/{countryCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolioId' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }
        // path params
        if ($country_code !== null) {
            $resourcePath = str_replace(
                '{' . 'countryCode' . '}',
                ObjectSerializer::toPathValue($country_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateIsProcessedFlag
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  float $notification_event_id A unique notification event ID. (required)
     * @param  \Swagger\Client\Model\ConnectMonitoringIsProcessedRequest $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ConnectMonitoringIsProcessedResponse
     */
    public function updateIsProcessedFlag($authorization, $portfolio_id, $notification_event_id, $body = null)
    {
        list($response) = $this->updateIsProcessedFlagWithHttpInfo($authorization, $portfolio_id, $notification_event_id, $body);
        return $response;
    }

    /**
     * Operation updateIsProcessedFlagWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  float $notification_event_id A unique notification event ID. (required)
     * @param  \Swagger\Client\Model\ConnectMonitoringIsProcessedRequest $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ConnectMonitoringIsProcessedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateIsProcessedFlagWithHttpInfo($authorization, $portfolio_id, $notification_event_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringIsProcessedResponse';
        $request = $this->updateIsProcessedFlagRequest($authorization, $portfolio_id, $notification_event_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectMonitoringIsProcessedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateIsProcessedFlagAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  float $notification_event_id A unique notification event ID. (required)
     * @param  \Swagger\Client\Model\ConnectMonitoringIsProcessedRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateIsProcessedFlagAsync($authorization, $portfolio_id, $notification_event_id, $body = null)
    {
        return $this->updateIsProcessedFlagAsyncWithHttpInfo($authorization, $portfolio_id, $notification_event_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateIsProcessedFlagAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  float $notification_event_id A unique notification event ID. (required)
     * @param  \Swagger\Client\Model\ConnectMonitoringIsProcessedRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateIsProcessedFlagAsyncWithHttpInfo($authorization, $portfolio_id, $notification_event_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\ConnectMonitoringIsProcessedResponse';
        $request = $this->updateIsProcessedFlagRequest($authorization, $portfolio_id, $notification_event_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateIsProcessedFlag'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     * @param  float $notification_event_id A unique notification event ID. (required)
     * @param  \Swagger\Client\Model\ConnectMonitoringIsProcessedRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateIsProcessedFlagRequest($authorization, $portfolio_id, $notification_event_id, $body = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling updateIsProcessedFlag'
            );
        }
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling updateIsProcessedFlag'
            );
        }
        // verify the required parameter 'notification_event_id' is set
        if ($notification_event_id === null || (is_array($notification_event_id) && count($notification_event_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $notification_event_id when calling updateIsProcessedFlag'
            );
        }

        $resourcePath = '/monitoring/portfolios/{portfolioId}/notificationEvents/{notificationEventId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolioId' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }
        // path params
        if ($notification_event_id !== null) {
            $resourcePath = str_replace(
                '{' . 'notificationEventId' . '}',
                ObjectSerializer::toPathValue($notification_event_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePortfolioDetails
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringUpdatePortfolioRequest $body body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse204
     */
    public function updatePortfolioDetails($body, $authorization, $portfolio_id)
    {
        list($response) = $this->updatePortfolioDetailsWithHttpInfo($body, $authorization, $portfolio_id);
        return $response;
    }

    /**
     * Operation updatePortfolioDetailsWithHttpInfo
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringUpdatePortfolioRequest $body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse204, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePortfolioDetailsWithHttpInfo($body, $authorization, $portfolio_id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse204';
        $request = $this->updatePortfolioDetailsRequest($body, $authorization, $portfolio_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse204',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePortfolioDetailsAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringUpdatePortfolioRequest $body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePortfolioDetailsAsync($body, $authorization, $portfolio_id)
    {
        return $this->updatePortfolioDetailsAsyncWithHttpInfo($body, $authorization, $portfolio_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePortfolioDetailsAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringUpdatePortfolioRequest $body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePortfolioDetailsAsyncWithHttpInfo($body, $authorization, $portfolio_id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse204';
        $request = $this->updatePortfolioDetailsRequest($body, $authorization, $portfolio_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePortfolioDetails'
     *
     * @param  \Swagger\Client\Model\ConnectMonitoringUpdatePortfolioRequest $body (required)
     * @param  string $authorization Authorization Token (required)
     * @param  float $portfolio_id The unique identifier of the portfolio, obtained from &#x60;/portfolios&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatePortfolioDetailsRequest($body, $authorization, $portfolio_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updatePortfolioDetails'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling updatePortfolioDetails'
            );
        }
        // verify the required parameter 'portfolio_id' is set
        if ($portfolio_id === null || (is_array($portfolio_id) && count($portfolio_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $portfolio_id when calling updatePortfolioDetails'
            );
        }

        $resourcePath = '/monitoring/portfolios/{portfolioId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($portfolio_id !== null) {
            $resourcePath = str_replace(
                '{' . 'portfolioId' . '}',
                ObjectSerializer::toPathValue($portfolio_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
