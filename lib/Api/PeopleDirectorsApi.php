<?php
/**
 * PeopleDirectorsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * PeopleDirectorsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PeopleDirectorsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation directorReport
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $people_id Identifier of the Person/Director required to order their Director Report. Obtained from &#x60;/people&#x60; search results. (required)
     * @param  string $language Report Language - The JSON structure of the Report is language invariant, but field content will return as the given language, where available. (optional, default to en)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CreditsafeGlobalDataReportsDirectorsDirectorReportResponse
     */
    public function directorReport($authorization, $people_id, $language = 'en', $call_ref = null)
    {
        list($response) = $this->directorReportWithHttpInfo($authorization, $people_id, $language, $call_ref);
        return $response;
    }

    /**
     * Operation directorReportWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $people_id Identifier of the Person/Director required to order their Director Report. Obtained from &#x60;/people&#x60; search results. (required)
     * @param  string $language Report Language - The JSON structure of the Report is language invariant, but field content will return as the given language, where available. (optional, default to en)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CreditsafeGlobalDataReportsDirectorsDirectorReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function directorReportWithHttpInfo($authorization, $people_id, $language = 'en', $call_ref = null)
    {
        $returnType = '\Swagger\Client\Model\CreditsafeGlobalDataReportsDirectorsDirectorReportResponse';
        $request = $this->directorReportRequest($authorization, $people_id, $language, $call_ref);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CreditsafeGlobalDataReportsDirectorsDirectorReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directorReportAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $people_id Identifier of the Person/Director required to order their Director Report. Obtained from &#x60;/people&#x60; search results. (required)
     * @param  string $language Report Language - The JSON structure of the Report is language invariant, but field content will return as the given language, where available. (optional, default to en)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directorReportAsync($authorization, $people_id, $language = 'en', $call_ref = null)
    {
        return $this->directorReportAsyncWithHttpInfo($authorization, $people_id, $language, $call_ref)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directorReportAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $people_id Identifier of the Person/Director required to order their Director Report. Obtained from &#x60;/people&#x60; search results. (required)
     * @param  string $language Report Language - The JSON structure of the Report is language invariant, but field content will return as the given language, where available. (optional, default to en)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directorReportAsyncWithHttpInfo($authorization, $people_id, $language = 'en', $call_ref = null)
    {
        $returnType = '\Swagger\Client\Model\CreditsafeGlobalDataReportsDirectorsDirectorReportResponse';
        $request = $this->directorReportRequest($authorization, $people_id, $language, $call_ref);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directorReport'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $people_id Identifier of the Person/Director required to order their Director Report. Obtained from &#x60;/people&#x60; search results. (required)
     * @param  string $language Report Language - The JSON structure of the Report is language invariant, but field content will return as the given language, where available. (optional, default to en)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function directorReportRequest($authorization, $people_id, $language = 'en', $call_ref = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling directorReport'
            );
        }
        // verify the required parameter 'people_id' is set
        if ($people_id === null || (is_array($people_id) && count($people_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $people_id when calling directorReport'
            );
        }

        $resourcePath = '/people/{peopleId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language, null);
        }
        // query params
        if ($call_ref !== null) {
            $queryParams['callRef'] = ObjectSerializer::toQueryValue($call_ref, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($people_id !== null) {
            $resourcePath = str_replace(
                '{' . 'peopleId' . '}',
                ObjectSerializer::toPathValue($people_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation directorSearch
     *
     * @param  string $authorization Authorization Token (required)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCountryCode[] $countries comma-separated list of iso-2 country codes (required)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  string $people_id Person/Director Identifier - used to order a Director Report. (optional)
     * @param  string $first_name Person&#x27;s First Name. (optional)
     * @param  string $last_name Person&#x27;s Last Name (optional)
     * @param  string $local_director_number Local Identifier of the Director, the PNR in GB. (optional)
     * @param  string $date_of_birth Person DOB - provide YYYY-MM-DD or YYYY-MM format. (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2002
     */
    public function directorSearch($authorization, $countries, $page = '1', $page_size = null, $people_id = null, $first_name = null, $last_name = null, $local_director_number = null, $date_of_birth = null, $call_ref = null)
    {
        list($response) = $this->directorSearchWithHttpInfo($authorization, $countries, $page, $page_size, $people_id, $first_name, $last_name, $local_director_number, $date_of_birth, $call_ref);
        return $response;
    }

    /**
     * Operation directorSearchWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCountryCode[] $countries comma-separated list of iso-2 country codes (required)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  string $people_id Person/Director Identifier - used to order a Director Report. (optional)
     * @param  string $first_name Person&#x27;s First Name. (optional)
     * @param  string $last_name Person&#x27;s Last Name (optional)
     * @param  string $local_director_number Local Identifier of the Director, the PNR in GB. (optional)
     * @param  string $date_of_birth Person DOB - provide YYYY-MM-DD or YYYY-MM format. (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function directorSearchWithHttpInfo($authorization, $countries, $page = '1', $page_size = null, $people_id = null, $first_name = null, $last_name = null, $local_director_number = null, $date_of_birth = null, $call_ref = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2002';
        $request = $this->directorSearchRequest($authorization, $countries, $page, $page_size, $people_id, $first_name, $last_name, $local_director_number, $date_of_birth, $call_ref);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directorSearchAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCountryCode[] $countries comma-separated list of iso-2 country codes (required)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  string $people_id Person/Director Identifier - used to order a Director Report. (optional)
     * @param  string $first_name Person&#x27;s First Name. (optional)
     * @param  string $last_name Person&#x27;s Last Name (optional)
     * @param  string $local_director_number Local Identifier of the Director, the PNR in GB. (optional)
     * @param  string $date_of_birth Person DOB - provide YYYY-MM-DD or YYYY-MM format. (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directorSearchAsync($authorization, $countries, $page = '1', $page_size = null, $people_id = null, $first_name = null, $last_name = null, $local_director_number = null, $date_of_birth = null, $call_ref = null)
    {
        return $this->directorSearchAsyncWithHttpInfo($authorization, $countries, $page, $page_size, $people_id, $first_name, $last_name, $local_director_number, $date_of_birth, $call_ref)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directorSearchAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCountryCode[] $countries comma-separated list of iso-2 country codes (required)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  string $people_id Person/Director Identifier - used to order a Director Report. (optional)
     * @param  string $first_name Person&#x27;s First Name. (optional)
     * @param  string $last_name Person&#x27;s Last Name (optional)
     * @param  string $local_director_number Local Identifier of the Director, the PNR in GB. (optional)
     * @param  string $date_of_birth Person DOB - provide YYYY-MM-DD or YYYY-MM format. (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directorSearchAsyncWithHttpInfo($authorization, $countries, $page = '1', $page_size = null, $people_id = null, $first_name = null, $last_name = null, $local_director_number = null, $date_of_birth = null, $call_ref = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2002';
        $request = $this->directorSearchRequest($authorization, $countries, $page, $page_size, $people_id, $first_name, $last_name, $local_director_number, $date_of_birth, $call_ref);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directorSearch'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  \Swagger\Client\Model\CreditsafeGlobalDataCountryCode[] $countries comma-separated list of iso-2 country codes (required)
     * @param  int $page Starting page number. (optional, default to 1)
     * @param  int $page_size Number of items to return per Page. (optional)
     * @param  string $people_id Person/Director Identifier - used to order a Director Report. (optional)
     * @param  string $first_name Person&#x27;s First Name. (optional)
     * @param  string $last_name Person&#x27;s Last Name (optional)
     * @param  string $local_director_number Local Identifier of the Director, the PNR in GB. (optional)
     * @param  string $date_of_birth Person DOB - provide YYYY-MM-DD or YYYY-MM format. (optional)
     * @param  string $call_ref Call Reference (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function directorSearchRequest($authorization, $countries, $page = '1', $page_size = null, $people_id = null, $first_name = null, $last_name = null, $local_director_number = null, $date_of_birth = null, $call_ref = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling directorSearch'
            );
        }
        // verify the required parameter 'countries' is set
        if ($countries === null || (is_array($countries) && count($countries) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $countries when calling directorSearch'
            );
        }

        $resourcePath = '/people';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if (is_array($countries)) {
            $countries = ObjectSerializer::serializeCollection($countries, 'multi', true);
        }
        if ($countries !== null) {
            $queryParams['countries'] = ObjectSerializer::toQueryValue($countries, null);
        }
        // query params
        if ($people_id !== null) {
            $queryParams['peopleId'] = ObjectSerializer::toQueryValue($people_id, null);
        }
        // query params
        if ($first_name !== null) {
            $queryParams['firstName'] = ObjectSerializer::toQueryValue($first_name, null);
        }
        // query params
        if ($last_name !== null) {
            $queryParams['lastName'] = ObjectSerializer::toQueryValue($last_name, null);
        }
        // query params
        if ($local_director_number !== null) {
            $queryParams['localDirectorNumber'] = ObjectSerializer::toQueryValue($local_director_number, null);
        }
        // query params
        if ($date_of_birth !== null) {
            $queryParams['dateOfBirth'] = ObjectSerializer::toQueryValue($date_of_birth, null);
        }
        // query params
        if ($call_ref !== null) {
            $queryParams['callRef'] = ObjectSerializer::toQueryValue($call_ref, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation peopleDirectorSearchCriteria
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $countries A comma separated list of ISO/Alpha 2 format country codes, or singular country Code. e.g. US,GB will return the common searchable People/Director fields in the United States and Great Britain. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CreditsafeGlobalDataSearchCriteriaSchemaSetDirector
     */
    public function peopleDirectorSearchCriteria($authorization, $countries = null)
    {
        list($response) = $this->peopleDirectorSearchCriteriaWithHttpInfo($authorization, $countries);
        return $response;
    }

    /**
     * Operation peopleDirectorSearchCriteriaWithHttpInfo
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $countries A comma separated list of ISO/Alpha 2 format country codes, or singular country Code. e.g. US,GB will return the common searchable People/Director fields in the United States and Great Britain. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CreditsafeGlobalDataSearchCriteriaSchemaSetDirector, HTTP status code, HTTP response headers (array of strings)
     */
    public function peopleDirectorSearchCriteriaWithHttpInfo($authorization, $countries = null)
    {
        $returnType = '\Swagger\Client\Model\CreditsafeGlobalDataSearchCriteriaSchemaSetDirector';
        $request = $this->peopleDirectorSearchCriteriaRequest($authorization, $countries);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CreditsafeGlobalDataSearchCriteriaSchemaSetDirector',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesBadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ConnectErrorResponsesInvalidToken',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation peopleDirectorSearchCriteriaAsync
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $countries A comma separated list of ISO/Alpha 2 format country codes, or singular country Code. e.g. US,GB will return the common searchable People/Director fields in the United States and Great Britain. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function peopleDirectorSearchCriteriaAsync($authorization, $countries = null)
    {
        return $this->peopleDirectorSearchCriteriaAsyncWithHttpInfo($authorization, $countries)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation peopleDirectorSearchCriteriaAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $countries A comma separated list of ISO/Alpha 2 format country codes, or singular country Code. e.g. US,GB will return the common searchable People/Director fields in the United States and Great Britain. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function peopleDirectorSearchCriteriaAsyncWithHttpInfo($authorization, $countries = null)
    {
        $returnType = '\Swagger\Client\Model\CreditsafeGlobalDataSearchCriteriaSchemaSetDirector';
        $request = $this->peopleDirectorSearchCriteriaRequest($authorization, $countries);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'peopleDirectorSearchCriteria'
     *
     * @param  string $authorization Authorization Token (required)
     * @param  string $countries A comma separated list of ISO/Alpha 2 format country codes, or singular country Code. e.g. US,GB will return the common searchable People/Director fields in the United States and Great Britain. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function peopleDirectorSearchCriteriaRequest($authorization, $countries = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling peopleDirectorSearchCriteria'
            );
        }

        $resourcePath = '/people/searchcriteria';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($countries !== null) {
            $queryParams['countries'] = ObjectSerializer::toQueryValue($countries, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
