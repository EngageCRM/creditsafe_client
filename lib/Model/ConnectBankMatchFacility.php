<?php
/**
 * ConnectBankMatchFacility
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ConnectBankMatchFacility Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConnectBankMatchFacility implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Connect.BankMatch.Facility';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'business_type_indicator' => 'string',
'business_name' => 'string',
'business_address' => '\Swagger\Client\Model\ConnectBankMatchBusinessAddress',
'additional_trading_style' => 'string',
'business_telephone_number' => 'string',
'company_registration_number' => 'string',
'vat_number' => 'string',
'special_instruction_indicator' => 'string',
'start_date_of_agreement' => '\DateTime',
'close_date_of_agreement' => 'object',
'current_balance' => 'int',
'current_balance_credit_indicator' => 'string',
'actual_current_balance' => 'int',
'facility_status' => 'string',
'original_default_balance' => 'int',
'default_satisfaction_date' => 'object',
'credit_or_overdraft_limit' => 'int',
'flag_settings' => 'string',
'transferred_to_consolidated_debt_account' => 'string',
'repayment_period' => 'int',
'payment_amount' => 'int',
'payment_frequency_indicator' => 'string',
'number_of_cash_advances' => 'int',
'value_of_cash_advances' => 'int',
'minimum_balance' => 'int',
'minimum_balance_credit_indicator' => 'string',
'actual_minimum_balance' => 'int',
'maximum_balance' => 'int',
'maximum_balance_credit_indicator' => 'string',
'actual_maximum_balance' => 'int',
'average_balance' => 'int',
'average_balance_credit_indicator' => 'string',
'actual_average_balance' => 'int',
'credit_turnover' => 'int',
'credit_turnover_net_or_gross_indicator' => 'string',
'debit_turnover' => 'int',
'debit_turnover_net_or_gross_indicator' => 'string',
'rejected_payments' => 'int',
'maximum_duration_of_excess' => 'int',
'changed_facility_number' => 'string',
'bank_sort_code' => 'string',
'bank_account_number' => 'string',
'bank_account_iban' => 'string',
'current_account_reporting_level_indicator' => 'string',
'source_code' => 'string',
'facility_number' => 'string',
'facility_id' => 'string',
'identifier' => 'string',
'provider_type' => 'string',
'bank_code' => 'string',
'batch' => 'string',
'facility_type' => 'int',
'facility_type_category' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'business_type_indicator' => null,
'business_name' => null,
'business_address' => null,
'additional_trading_style' => null,
'business_telephone_number' => null,
'company_registration_number' => null,
'vat_number' => null,
'special_instruction_indicator' => null,
'start_date_of_agreement' => 'date-time',
'close_date_of_agreement' => null,
'current_balance' => 'int64',
'current_balance_credit_indicator' => null,
'actual_current_balance' => 'int64',
'facility_status' => null,
'original_default_balance' => 'int64',
'default_satisfaction_date' => null,
'credit_or_overdraft_limit' => 'int64',
'flag_settings' => null,
'transferred_to_consolidated_debt_account' => null,
'repayment_period' => 'int64',
'payment_amount' => 'int64',
'payment_frequency_indicator' => null,
'number_of_cash_advances' => 'int64',
'value_of_cash_advances' => 'int64',
'minimum_balance' => 'int64',
'minimum_balance_credit_indicator' => null,
'actual_minimum_balance' => 'int64',
'maximum_balance' => 'int64',
'maximum_balance_credit_indicator' => null,
'actual_maximum_balance' => 'int64',
'average_balance' => 'int64',
'average_balance_credit_indicator' => null,
'actual_average_balance' => 'int64',
'credit_turnover' => 'int64',
'credit_turnover_net_or_gross_indicator' => null,
'debit_turnover' => 'int64',
'debit_turnover_net_or_gross_indicator' => null,
'rejected_payments' => 'int64',
'maximum_duration_of_excess' => 'int64',
'changed_facility_number' => null,
'bank_sort_code' => null,
'bank_account_number' => null,
'bank_account_iban' => null,
'current_account_reporting_level_indicator' => null,
'source_code' => null,
'facility_number' => null,
'facility_id' => null,
'identifier' => null,
'provider_type' => null,
'bank_code' => null,
'batch' => null,
'facility_type' => 'int64',
'facility_type_category' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'business_type_indicator' => 'businessTypeIndicator',
'business_name' => 'businessName',
'business_address' => 'businessAddress',
'additional_trading_style' => 'additionalTradingStyle',
'business_telephone_number' => 'businessTelephoneNumber',
'company_registration_number' => 'companyRegistrationNumber',
'vat_number' => 'vatNumber',
'special_instruction_indicator' => 'specialInstructionIndicator',
'start_date_of_agreement' => 'startDateOfAgreement',
'close_date_of_agreement' => 'closeDateOfAgreement',
'current_balance' => 'currentBalance',
'current_balance_credit_indicator' => 'currentBalanceCreditIndicator',
'actual_current_balance' => 'actualCurrentBalance',
'facility_status' => 'facilityStatus',
'original_default_balance' => 'originalDefaultBalance',
'default_satisfaction_date' => 'defaultSatisfactionDate',
'credit_or_overdraft_limit' => 'creditOrOverdraftLimit',
'flag_settings' => 'flagSettings',
'transferred_to_consolidated_debt_account' => 'transferredToConsolidatedDebtAccount',
'repayment_period' => 'repaymentPeriod',
'payment_amount' => 'paymentAmount',
'payment_frequency_indicator' => 'paymentFrequencyIndicator',
'number_of_cash_advances' => 'numberOfCashAdvances',
'value_of_cash_advances' => 'valueOfCashAdvances',
'minimum_balance' => 'minimumBalance',
'minimum_balance_credit_indicator' => 'minimumBalanceCreditIndicator',
'actual_minimum_balance' => 'actualMinimumBalance',
'maximum_balance' => 'maximumBalance',
'maximum_balance_credit_indicator' => 'maximumBalanceCreditIndicator',
'actual_maximum_balance' => 'actualMaximumBalance',
'average_balance' => 'averageBalance',
'average_balance_credit_indicator' => 'averageBalanceCreditIndicator',
'actual_average_balance' => 'actualAverageBalance',
'credit_turnover' => 'creditTurnover',
'credit_turnover_net_or_gross_indicator' => 'creditTurnoverNetOrGrossIndicator',
'debit_turnover' => 'debitTurnover',
'debit_turnover_net_or_gross_indicator' => 'debitTurnoverNetOrGrossIndicator',
'rejected_payments' => 'rejectedPayments',
'maximum_duration_of_excess' => 'maximumDurationOfExcess',
'changed_facility_number' => 'changedFacilityNumber',
'bank_sort_code' => 'bankSortCode',
'bank_account_number' => 'bankAccountNumber',
'bank_account_iban' => 'bankAccountIban',
'current_account_reporting_level_indicator' => 'currentAccountReportingLevelIndicator',
'source_code' => 'sourceCode',
'facility_number' => 'facilityNumber',
'facility_id' => 'facilityId',
'identifier' => 'identifier',
'provider_type' => 'providerType',
'bank_code' => 'bankCode',
'batch' => 'batch',
'facility_type' => 'facilityType',
'facility_type_category' => 'facilityTypeCategory'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'business_type_indicator' => 'setBusinessTypeIndicator',
'business_name' => 'setBusinessName',
'business_address' => 'setBusinessAddress',
'additional_trading_style' => 'setAdditionalTradingStyle',
'business_telephone_number' => 'setBusinessTelephoneNumber',
'company_registration_number' => 'setCompanyRegistrationNumber',
'vat_number' => 'setVatNumber',
'special_instruction_indicator' => 'setSpecialInstructionIndicator',
'start_date_of_agreement' => 'setStartDateOfAgreement',
'close_date_of_agreement' => 'setCloseDateOfAgreement',
'current_balance' => 'setCurrentBalance',
'current_balance_credit_indicator' => 'setCurrentBalanceCreditIndicator',
'actual_current_balance' => 'setActualCurrentBalance',
'facility_status' => 'setFacilityStatus',
'original_default_balance' => 'setOriginalDefaultBalance',
'default_satisfaction_date' => 'setDefaultSatisfactionDate',
'credit_or_overdraft_limit' => 'setCreditOrOverdraftLimit',
'flag_settings' => 'setFlagSettings',
'transferred_to_consolidated_debt_account' => 'setTransferredToConsolidatedDebtAccount',
'repayment_period' => 'setRepaymentPeriod',
'payment_amount' => 'setPaymentAmount',
'payment_frequency_indicator' => 'setPaymentFrequencyIndicator',
'number_of_cash_advances' => 'setNumberOfCashAdvances',
'value_of_cash_advances' => 'setValueOfCashAdvances',
'minimum_balance' => 'setMinimumBalance',
'minimum_balance_credit_indicator' => 'setMinimumBalanceCreditIndicator',
'actual_minimum_balance' => 'setActualMinimumBalance',
'maximum_balance' => 'setMaximumBalance',
'maximum_balance_credit_indicator' => 'setMaximumBalanceCreditIndicator',
'actual_maximum_balance' => 'setActualMaximumBalance',
'average_balance' => 'setAverageBalance',
'average_balance_credit_indicator' => 'setAverageBalanceCreditIndicator',
'actual_average_balance' => 'setActualAverageBalance',
'credit_turnover' => 'setCreditTurnover',
'credit_turnover_net_or_gross_indicator' => 'setCreditTurnoverNetOrGrossIndicator',
'debit_turnover' => 'setDebitTurnover',
'debit_turnover_net_or_gross_indicator' => 'setDebitTurnoverNetOrGrossIndicator',
'rejected_payments' => 'setRejectedPayments',
'maximum_duration_of_excess' => 'setMaximumDurationOfExcess',
'changed_facility_number' => 'setChangedFacilityNumber',
'bank_sort_code' => 'setBankSortCode',
'bank_account_number' => 'setBankAccountNumber',
'bank_account_iban' => 'setBankAccountIban',
'current_account_reporting_level_indicator' => 'setCurrentAccountReportingLevelIndicator',
'source_code' => 'setSourceCode',
'facility_number' => 'setFacilityNumber',
'facility_id' => 'setFacilityId',
'identifier' => 'setIdentifier',
'provider_type' => 'setProviderType',
'bank_code' => 'setBankCode',
'batch' => 'setBatch',
'facility_type' => 'setFacilityType',
'facility_type_category' => 'setFacilityTypeCategory'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'business_type_indicator' => 'getBusinessTypeIndicator',
'business_name' => 'getBusinessName',
'business_address' => 'getBusinessAddress',
'additional_trading_style' => 'getAdditionalTradingStyle',
'business_telephone_number' => 'getBusinessTelephoneNumber',
'company_registration_number' => 'getCompanyRegistrationNumber',
'vat_number' => 'getVatNumber',
'special_instruction_indicator' => 'getSpecialInstructionIndicator',
'start_date_of_agreement' => 'getStartDateOfAgreement',
'close_date_of_agreement' => 'getCloseDateOfAgreement',
'current_balance' => 'getCurrentBalance',
'current_balance_credit_indicator' => 'getCurrentBalanceCreditIndicator',
'actual_current_balance' => 'getActualCurrentBalance',
'facility_status' => 'getFacilityStatus',
'original_default_balance' => 'getOriginalDefaultBalance',
'default_satisfaction_date' => 'getDefaultSatisfactionDate',
'credit_or_overdraft_limit' => 'getCreditOrOverdraftLimit',
'flag_settings' => 'getFlagSettings',
'transferred_to_consolidated_debt_account' => 'getTransferredToConsolidatedDebtAccount',
'repayment_period' => 'getRepaymentPeriod',
'payment_amount' => 'getPaymentAmount',
'payment_frequency_indicator' => 'getPaymentFrequencyIndicator',
'number_of_cash_advances' => 'getNumberOfCashAdvances',
'value_of_cash_advances' => 'getValueOfCashAdvances',
'minimum_balance' => 'getMinimumBalance',
'minimum_balance_credit_indicator' => 'getMinimumBalanceCreditIndicator',
'actual_minimum_balance' => 'getActualMinimumBalance',
'maximum_balance' => 'getMaximumBalance',
'maximum_balance_credit_indicator' => 'getMaximumBalanceCreditIndicator',
'actual_maximum_balance' => 'getActualMaximumBalance',
'average_balance' => 'getAverageBalance',
'average_balance_credit_indicator' => 'getAverageBalanceCreditIndicator',
'actual_average_balance' => 'getActualAverageBalance',
'credit_turnover' => 'getCreditTurnover',
'credit_turnover_net_or_gross_indicator' => 'getCreditTurnoverNetOrGrossIndicator',
'debit_turnover' => 'getDebitTurnover',
'debit_turnover_net_or_gross_indicator' => 'getDebitTurnoverNetOrGrossIndicator',
'rejected_payments' => 'getRejectedPayments',
'maximum_duration_of_excess' => 'getMaximumDurationOfExcess',
'changed_facility_number' => 'getChangedFacilityNumber',
'bank_sort_code' => 'getBankSortCode',
'bank_account_number' => 'getBankAccountNumber',
'bank_account_iban' => 'getBankAccountIban',
'current_account_reporting_level_indicator' => 'getCurrentAccountReportingLevelIndicator',
'source_code' => 'getSourceCode',
'facility_number' => 'getFacilityNumber',
'facility_id' => 'getFacilityId',
'identifier' => 'getIdentifier',
'provider_type' => 'getProviderType',
'bank_code' => 'getBankCode',
'batch' => 'getBatch',
'facility_type' => 'getFacilityType',
'facility_type_category' => 'getFacilityTypeCategory'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['business_type_indicator'] = isset($data['business_type_indicator']) ? $data['business_type_indicator'] : null;
        $this->container['business_name'] = isset($data['business_name']) ? $data['business_name'] : null;
        $this->container['business_address'] = isset($data['business_address']) ? $data['business_address'] : null;
        $this->container['additional_trading_style'] = isset($data['additional_trading_style']) ? $data['additional_trading_style'] : null;
        $this->container['business_telephone_number'] = isset($data['business_telephone_number']) ? $data['business_telephone_number'] : null;
        $this->container['company_registration_number'] = isset($data['company_registration_number']) ? $data['company_registration_number'] : null;
        $this->container['vat_number'] = isset($data['vat_number']) ? $data['vat_number'] : null;
        $this->container['special_instruction_indicator'] = isset($data['special_instruction_indicator']) ? $data['special_instruction_indicator'] : null;
        $this->container['start_date_of_agreement'] = isset($data['start_date_of_agreement']) ? $data['start_date_of_agreement'] : null;
        $this->container['close_date_of_agreement'] = isset($data['close_date_of_agreement']) ? $data['close_date_of_agreement'] : null;
        $this->container['current_balance'] = isset($data['current_balance']) ? $data['current_balance'] : null;
        $this->container['current_balance_credit_indicator'] = isset($data['current_balance_credit_indicator']) ? $data['current_balance_credit_indicator'] : null;
        $this->container['actual_current_balance'] = isset($data['actual_current_balance']) ? $data['actual_current_balance'] : null;
        $this->container['facility_status'] = isset($data['facility_status']) ? $data['facility_status'] : null;
        $this->container['original_default_balance'] = isset($data['original_default_balance']) ? $data['original_default_balance'] : null;
        $this->container['default_satisfaction_date'] = isset($data['default_satisfaction_date']) ? $data['default_satisfaction_date'] : null;
        $this->container['credit_or_overdraft_limit'] = isset($data['credit_or_overdraft_limit']) ? $data['credit_or_overdraft_limit'] : null;
        $this->container['flag_settings'] = isset($data['flag_settings']) ? $data['flag_settings'] : null;
        $this->container['transferred_to_consolidated_debt_account'] = isset($data['transferred_to_consolidated_debt_account']) ? $data['transferred_to_consolidated_debt_account'] : null;
        $this->container['repayment_period'] = isset($data['repayment_period']) ? $data['repayment_period'] : null;
        $this->container['payment_amount'] = isset($data['payment_amount']) ? $data['payment_amount'] : null;
        $this->container['payment_frequency_indicator'] = isset($data['payment_frequency_indicator']) ? $data['payment_frequency_indicator'] : null;
        $this->container['number_of_cash_advances'] = isset($data['number_of_cash_advances']) ? $data['number_of_cash_advances'] : null;
        $this->container['value_of_cash_advances'] = isset($data['value_of_cash_advances']) ? $data['value_of_cash_advances'] : null;
        $this->container['minimum_balance'] = isset($data['minimum_balance']) ? $data['minimum_balance'] : null;
        $this->container['minimum_balance_credit_indicator'] = isset($data['minimum_balance_credit_indicator']) ? $data['minimum_balance_credit_indicator'] : null;
        $this->container['actual_minimum_balance'] = isset($data['actual_minimum_balance']) ? $data['actual_minimum_balance'] : null;
        $this->container['maximum_balance'] = isset($data['maximum_balance']) ? $data['maximum_balance'] : null;
        $this->container['maximum_balance_credit_indicator'] = isset($data['maximum_balance_credit_indicator']) ? $data['maximum_balance_credit_indicator'] : null;
        $this->container['actual_maximum_balance'] = isset($data['actual_maximum_balance']) ? $data['actual_maximum_balance'] : null;
        $this->container['average_balance'] = isset($data['average_balance']) ? $data['average_balance'] : null;
        $this->container['average_balance_credit_indicator'] = isset($data['average_balance_credit_indicator']) ? $data['average_balance_credit_indicator'] : null;
        $this->container['actual_average_balance'] = isset($data['actual_average_balance']) ? $data['actual_average_balance'] : null;
        $this->container['credit_turnover'] = isset($data['credit_turnover']) ? $data['credit_turnover'] : null;
        $this->container['credit_turnover_net_or_gross_indicator'] = isset($data['credit_turnover_net_or_gross_indicator']) ? $data['credit_turnover_net_or_gross_indicator'] : null;
        $this->container['debit_turnover'] = isset($data['debit_turnover']) ? $data['debit_turnover'] : null;
        $this->container['debit_turnover_net_or_gross_indicator'] = isset($data['debit_turnover_net_or_gross_indicator']) ? $data['debit_turnover_net_or_gross_indicator'] : null;
        $this->container['rejected_payments'] = isset($data['rejected_payments']) ? $data['rejected_payments'] : null;
        $this->container['maximum_duration_of_excess'] = isset($data['maximum_duration_of_excess']) ? $data['maximum_duration_of_excess'] : null;
        $this->container['changed_facility_number'] = isset($data['changed_facility_number']) ? $data['changed_facility_number'] : null;
        $this->container['bank_sort_code'] = isset($data['bank_sort_code']) ? $data['bank_sort_code'] : null;
        $this->container['bank_account_number'] = isset($data['bank_account_number']) ? $data['bank_account_number'] : null;
        $this->container['bank_account_iban'] = isset($data['bank_account_iban']) ? $data['bank_account_iban'] : null;
        $this->container['current_account_reporting_level_indicator'] = isset($data['current_account_reporting_level_indicator']) ? $data['current_account_reporting_level_indicator'] : null;
        $this->container['source_code'] = isset($data['source_code']) ? $data['source_code'] : null;
        $this->container['facility_number'] = isset($data['facility_number']) ? $data['facility_number'] : null;
        $this->container['facility_id'] = isset($data['facility_id']) ? $data['facility_id'] : null;
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['provider_type'] = isset($data['provider_type']) ? $data['provider_type'] : null;
        $this->container['bank_code'] = isset($data['bank_code']) ? $data['bank_code'] : null;
        $this->container['batch'] = isset($data['batch']) ? $data['batch'] : null;
        $this->container['facility_type'] = isset($data['facility_type']) ? $data['facility_type'] : null;
        $this->container['facility_type_category'] = isset($data['facility_type_category']) ? $data['facility_type_category'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets business_type_indicator
     *
     * @return string
     */
    public function getBusinessTypeIndicator()
    {
        return $this->container['business_type_indicator'];
    }

    /**
     * Sets business_type_indicator
     *
     * @param string $business_type_indicator business_type_indicator
     *
     * @return $this
     */
    public function setBusinessTypeIndicator($business_type_indicator)
    {
        $this->container['business_type_indicator'] = $business_type_indicator;

        return $this;
    }

    /**
     * Gets business_name
     *
     * @return string
     */
    public function getBusinessName()
    {
        return $this->container['business_name'];
    }

    /**
     * Sets business_name
     *
     * @param string $business_name business_name
     *
     * @return $this
     */
    public function setBusinessName($business_name)
    {
        $this->container['business_name'] = $business_name;

        return $this;
    }

    /**
     * Gets business_address
     *
     * @return \Swagger\Client\Model\ConnectBankMatchBusinessAddress
     */
    public function getBusinessAddress()
    {
        return $this->container['business_address'];
    }

    /**
     * Sets business_address
     *
     * @param \Swagger\Client\Model\ConnectBankMatchBusinessAddress $business_address business_address
     *
     * @return $this
     */
    public function setBusinessAddress($business_address)
    {
        $this->container['business_address'] = $business_address;

        return $this;
    }

    /**
     * Gets additional_trading_style
     *
     * @return string
     */
    public function getAdditionalTradingStyle()
    {
        return $this->container['additional_trading_style'];
    }

    /**
     * Sets additional_trading_style
     *
     * @param string $additional_trading_style additional_trading_style
     *
     * @return $this
     */
    public function setAdditionalTradingStyle($additional_trading_style)
    {
        $this->container['additional_trading_style'] = $additional_trading_style;

        return $this;
    }

    /**
     * Gets business_telephone_number
     *
     * @return string
     */
    public function getBusinessTelephoneNumber()
    {
        return $this->container['business_telephone_number'];
    }

    /**
     * Sets business_telephone_number
     *
     * @param string $business_telephone_number business_telephone_number
     *
     * @return $this
     */
    public function setBusinessTelephoneNumber($business_telephone_number)
    {
        $this->container['business_telephone_number'] = $business_telephone_number;

        return $this;
    }

    /**
     * Gets company_registration_number
     *
     * @return string
     */
    public function getCompanyRegistrationNumber()
    {
        return $this->container['company_registration_number'];
    }

    /**
     * Sets company_registration_number
     *
     * @param string $company_registration_number company_registration_number
     *
     * @return $this
     */
    public function setCompanyRegistrationNumber($company_registration_number)
    {
        $this->container['company_registration_number'] = $company_registration_number;

        return $this;
    }

    /**
     * Gets vat_number
     *
     * @return string
     */
    public function getVatNumber()
    {
        return $this->container['vat_number'];
    }

    /**
     * Sets vat_number
     *
     * @param string $vat_number vat_number
     *
     * @return $this
     */
    public function setVatNumber($vat_number)
    {
        $this->container['vat_number'] = $vat_number;

        return $this;
    }

    /**
     * Gets special_instruction_indicator
     *
     * @return string
     */
    public function getSpecialInstructionIndicator()
    {
        return $this->container['special_instruction_indicator'];
    }

    /**
     * Sets special_instruction_indicator
     *
     * @param string $special_instruction_indicator special_instruction_indicator
     *
     * @return $this
     */
    public function setSpecialInstructionIndicator($special_instruction_indicator)
    {
        $this->container['special_instruction_indicator'] = $special_instruction_indicator;

        return $this;
    }

    /**
     * Gets start_date_of_agreement
     *
     * @return \DateTime
     */
    public function getStartDateOfAgreement()
    {
        return $this->container['start_date_of_agreement'];
    }

    /**
     * Sets start_date_of_agreement
     *
     * @param \DateTime $start_date_of_agreement start_date_of_agreement
     *
     * @return $this
     */
    public function setStartDateOfAgreement($start_date_of_agreement)
    {
        $this->container['start_date_of_agreement'] = $start_date_of_agreement;

        return $this;
    }

    /**
     * Gets close_date_of_agreement
     *
     * @return object
     */
    public function getCloseDateOfAgreement()
    {
        return $this->container['close_date_of_agreement'];
    }

    /**
     * Sets close_date_of_agreement
     *
     * @param object $close_date_of_agreement close_date_of_agreement
     *
     * @return $this
     */
    public function setCloseDateOfAgreement($close_date_of_agreement)
    {
        $this->container['close_date_of_agreement'] = $close_date_of_agreement;

        return $this;
    }

    /**
     * Gets current_balance
     *
     * @return int
     */
    public function getCurrentBalance()
    {
        return $this->container['current_balance'];
    }

    /**
     * Sets current_balance
     *
     * @param int $current_balance current_balance
     *
     * @return $this
     */
    public function setCurrentBalance($current_balance)
    {
        $this->container['current_balance'] = $current_balance;

        return $this;
    }

    /**
     * Gets current_balance_credit_indicator
     *
     * @return string
     */
    public function getCurrentBalanceCreditIndicator()
    {
        return $this->container['current_balance_credit_indicator'];
    }

    /**
     * Sets current_balance_credit_indicator
     *
     * @param string $current_balance_credit_indicator current_balance_credit_indicator
     *
     * @return $this
     */
    public function setCurrentBalanceCreditIndicator($current_balance_credit_indicator)
    {
        $this->container['current_balance_credit_indicator'] = $current_balance_credit_indicator;

        return $this;
    }

    /**
     * Gets actual_current_balance
     *
     * @return int
     */
    public function getActualCurrentBalance()
    {
        return $this->container['actual_current_balance'];
    }

    /**
     * Sets actual_current_balance
     *
     * @param int $actual_current_balance actual_current_balance
     *
     * @return $this
     */
    public function setActualCurrentBalance($actual_current_balance)
    {
        $this->container['actual_current_balance'] = $actual_current_balance;

        return $this;
    }

    /**
     * Gets facility_status
     *
     * @return string
     */
    public function getFacilityStatus()
    {
        return $this->container['facility_status'];
    }

    /**
     * Sets facility_status
     *
     * @param string $facility_status facility_status
     *
     * @return $this
     */
    public function setFacilityStatus($facility_status)
    {
        $this->container['facility_status'] = $facility_status;

        return $this;
    }

    /**
     * Gets original_default_balance
     *
     * @return int
     */
    public function getOriginalDefaultBalance()
    {
        return $this->container['original_default_balance'];
    }

    /**
     * Sets original_default_balance
     *
     * @param int $original_default_balance original_default_balance
     *
     * @return $this
     */
    public function setOriginalDefaultBalance($original_default_balance)
    {
        $this->container['original_default_balance'] = $original_default_balance;

        return $this;
    }

    /**
     * Gets default_satisfaction_date
     *
     * @return object
     */
    public function getDefaultSatisfactionDate()
    {
        return $this->container['default_satisfaction_date'];
    }

    /**
     * Sets default_satisfaction_date
     *
     * @param object $default_satisfaction_date default_satisfaction_date
     *
     * @return $this
     */
    public function setDefaultSatisfactionDate($default_satisfaction_date)
    {
        $this->container['default_satisfaction_date'] = $default_satisfaction_date;

        return $this;
    }

    /**
     * Gets credit_or_overdraft_limit
     *
     * @return int
     */
    public function getCreditOrOverdraftLimit()
    {
        return $this->container['credit_or_overdraft_limit'];
    }

    /**
     * Sets credit_or_overdraft_limit
     *
     * @param int $credit_or_overdraft_limit credit_or_overdraft_limit
     *
     * @return $this
     */
    public function setCreditOrOverdraftLimit($credit_or_overdraft_limit)
    {
        $this->container['credit_or_overdraft_limit'] = $credit_or_overdraft_limit;

        return $this;
    }

    /**
     * Gets flag_settings
     *
     * @return string
     */
    public function getFlagSettings()
    {
        return $this->container['flag_settings'];
    }

    /**
     * Sets flag_settings
     *
     * @param string $flag_settings flag_settings
     *
     * @return $this
     */
    public function setFlagSettings($flag_settings)
    {
        $this->container['flag_settings'] = $flag_settings;

        return $this;
    }

    /**
     * Gets transferred_to_consolidated_debt_account
     *
     * @return string
     */
    public function getTransferredToConsolidatedDebtAccount()
    {
        return $this->container['transferred_to_consolidated_debt_account'];
    }

    /**
     * Sets transferred_to_consolidated_debt_account
     *
     * @param string $transferred_to_consolidated_debt_account transferred_to_consolidated_debt_account
     *
     * @return $this
     */
    public function setTransferredToConsolidatedDebtAccount($transferred_to_consolidated_debt_account)
    {
        $this->container['transferred_to_consolidated_debt_account'] = $transferred_to_consolidated_debt_account;

        return $this;
    }

    /**
     * Gets repayment_period
     *
     * @return int
     */
    public function getRepaymentPeriod()
    {
        return $this->container['repayment_period'];
    }

    /**
     * Sets repayment_period
     *
     * @param int $repayment_period repayment_period
     *
     * @return $this
     */
    public function setRepaymentPeriod($repayment_period)
    {
        $this->container['repayment_period'] = $repayment_period;

        return $this;
    }

    /**
     * Gets payment_amount
     *
     * @return int
     */
    public function getPaymentAmount()
    {
        return $this->container['payment_amount'];
    }

    /**
     * Sets payment_amount
     *
     * @param int $payment_amount payment_amount
     *
     * @return $this
     */
    public function setPaymentAmount($payment_amount)
    {
        $this->container['payment_amount'] = $payment_amount;

        return $this;
    }

    /**
     * Gets payment_frequency_indicator
     *
     * @return string
     */
    public function getPaymentFrequencyIndicator()
    {
        return $this->container['payment_frequency_indicator'];
    }

    /**
     * Sets payment_frequency_indicator
     *
     * @param string $payment_frequency_indicator payment_frequency_indicator
     *
     * @return $this
     */
    public function setPaymentFrequencyIndicator($payment_frequency_indicator)
    {
        $this->container['payment_frequency_indicator'] = $payment_frequency_indicator;

        return $this;
    }

    /**
     * Gets number_of_cash_advances
     *
     * @return int
     */
    public function getNumberOfCashAdvances()
    {
        return $this->container['number_of_cash_advances'];
    }

    /**
     * Sets number_of_cash_advances
     *
     * @param int $number_of_cash_advances number_of_cash_advances
     *
     * @return $this
     */
    public function setNumberOfCashAdvances($number_of_cash_advances)
    {
        $this->container['number_of_cash_advances'] = $number_of_cash_advances;

        return $this;
    }

    /**
     * Gets value_of_cash_advances
     *
     * @return int
     */
    public function getValueOfCashAdvances()
    {
        return $this->container['value_of_cash_advances'];
    }

    /**
     * Sets value_of_cash_advances
     *
     * @param int $value_of_cash_advances value_of_cash_advances
     *
     * @return $this
     */
    public function setValueOfCashAdvances($value_of_cash_advances)
    {
        $this->container['value_of_cash_advances'] = $value_of_cash_advances;

        return $this;
    }

    /**
     * Gets minimum_balance
     *
     * @return int
     */
    public function getMinimumBalance()
    {
        return $this->container['minimum_balance'];
    }

    /**
     * Sets minimum_balance
     *
     * @param int $minimum_balance minimum_balance
     *
     * @return $this
     */
    public function setMinimumBalance($minimum_balance)
    {
        $this->container['minimum_balance'] = $minimum_balance;

        return $this;
    }

    /**
     * Gets minimum_balance_credit_indicator
     *
     * @return string
     */
    public function getMinimumBalanceCreditIndicator()
    {
        return $this->container['minimum_balance_credit_indicator'];
    }

    /**
     * Sets minimum_balance_credit_indicator
     *
     * @param string $minimum_balance_credit_indicator minimum_balance_credit_indicator
     *
     * @return $this
     */
    public function setMinimumBalanceCreditIndicator($minimum_balance_credit_indicator)
    {
        $this->container['minimum_balance_credit_indicator'] = $minimum_balance_credit_indicator;

        return $this;
    }

    /**
     * Gets actual_minimum_balance
     *
     * @return int
     */
    public function getActualMinimumBalance()
    {
        return $this->container['actual_minimum_balance'];
    }

    /**
     * Sets actual_minimum_balance
     *
     * @param int $actual_minimum_balance actual_minimum_balance
     *
     * @return $this
     */
    public function setActualMinimumBalance($actual_minimum_balance)
    {
        $this->container['actual_minimum_balance'] = $actual_minimum_balance;

        return $this;
    }

    /**
     * Gets maximum_balance
     *
     * @return int
     */
    public function getMaximumBalance()
    {
        return $this->container['maximum_balance'];
    }

    /**
     * Sets maximum_balance
     *
     * @param int $maximum_balance maximum_balance
     *
     * @return $this
     */
    public function setMaximumBalance($maximum_balance)
    {
        $this->container['maximum_balance'] = $maximum_balance;

        return $this;
    }

    /**
     * Gets maximum_balance_credit_indicator
     *
     * @return string
     */
    public function getMaximumBalanceCreditIndicator()
    {
        return $this->container['maximum_balance_credit_indicator'];
    }

    /**
     * Sets maximum_balance_credit_indicator
     *
     * @param string $maximum_balance_credit_indicator maximum_balance_credit_indicator
     *
     * @return $this
     */
    public function setMaximumBalanceCreditIndicator($maximum_balance_credit_indicator)
    {
        $this->container['maximum_balance_credit_indicator'] = $maximum_balance_credit_indicator;

        return $this;
    }

    /**
     * Gets actual_maximum_balance
     *
     * @return int
     */
    public function getActualMaximumBalance()
    {
        return $this->container['actual_maximum_balance'];
    }

    /**
     * Sets actual_maximum_balance
     *
     * @param int $actual_maximum_balance actual_maximum_balance
     *
     * @return $this
     */
    public function setActualMaximumBalance($actual_maximum_balance)
    {
        $this->container['actual_maximum_balance'] = $actual_maximum_balance;

        return $this;
    }

    /**
     * Gets average_balance
     *
     * @return int
     */
    public function getAverageBalance()
    {
        return $this->container['average_balance'];
    }

    /**
     * Sets average_balance
     *
     * @param int $average_balance average_balance
     *
     * @return $this
     */
    public function setAverageBalance($average_balance)
    {
        $this->container['average_balance'] = $average_balance;

        return $this;
    }

    /**
     * Gets average_balance_credit_indicator
     *
     * @return string
     */
    public function getAverageBalanceCreditIndicator()
    {
        return $this->container['average_balance_credit_indicator'];
    }

    /**
     * Sets average_balance_credit_indicator
     *
     * @param string $average_balance_credit_indicator average_balance_credit_indicator
     *
     * @return $this
     */
    public function setAverageBalanceCreditIndicator($average_balance_credit_indicator)
    {
        $this->container['average_balance_credit_indicator'] = $average_balance_credit_indicator;

        return $this;
    }

    /**
     * Gets actual_average_balance
     *
     * @return int
     */
    public function getActualAverageBalance()
    {
        return $this->container['actual_average_balance'];
    }

    /**
     * Sets actual_average_balance
     *
     * @param int $actual_average_balance actual_average_balance
     *
     * @return $this
     */
    public function setActualAverageBalance($actual_average_balance)
    {
        $this->container['actual_average_balance'] = $actual_average_balance;

        return $this;
    }

    /**
     * Gets credit_turnover
     *
     * @return int
     */
    public function getCreditTurnover()
    {
        return $this->container['credit_turnover'];
    }

    /**
     * Sets credit_turnover
     *
     * @param int $credit_turnover credit_turnover
     *
     * @return $this
     */
    public function setCreditTurnover($credit_turnover)
    {
        $this->container['credit_turnover'] = $credit_turnover;

        return $this;
    }

    /**
     * Gets credit_turnover_net_or_gross_indicator
     *
     * @return string
     */
    public function getCreditTurnoverNetOrGrossIndicator()
    {
        return $this->container['credit_turnover_net_or_gross_indicator'];
    }

    /**
     * Sets credit_turnover_net_or_gross_indicator
     *
     * @param string $credit_turnover_net_or_gross_indicator credit_turnover_net_or_gross_indicator
     *
     * @return $this
     */
    public function setCreditTurnoverNetOrGrossIndicator($credit_turnover_net_or_gross_indicator)
    {
        $this->container['credit_turnover_net_or_gross_indicator'] = $credit_turnover_net_or_gross_indicator;

        return $this;
    }

    /**
     * Gets debit_turnover
     *
     * @return int
     */
    public function getDebitTurnover()
    {
        return $this->container['debit_turnover'];
    }

    /**
     * Sets debit_turnover
     *
     * @param int $debit_turnover debit_turnover
     *
     * @return $this
     */
    public function setDebitTurnover($debit_turnover)
    {
        $this->container['debit_turnover'] = $debit_turnover;

        return $this;
    }

    /**
     * Gets debit_turnover_net_or_gross_indicator
     *
     * @return string
     */
    public function getDebitTurnoverNetOrGrossIndicator()
    {
        return $this->container['debit_turnover_net_or_gross_indicator'];
    }

    /**
     * Sets debit_turnover_net_or_gross_indicator
     *
     * @param string $debit_turnover_net_or_gross_indicator debit_turnover_net_or_gross_indicator
     *
     * @return $this
     */
    public function setDebitTurnoverNetOrGrossIndicator($debit_turnover_net_or_gross_indicator)
    {
        $this->container['debit_turnover_net_or_gross_indicator'] = $debit_turnover_net_or_gross_indicator;

        return $this;
    }

    /**
     * Gets rejected_payments
     *
     * @return int
     */
    public function getRejectedPayments()
    {
        return $this->container['rejected_payments'];
    }

    /**
     * Sets rejected_payments
     *
     * @param int $rejected_payments rejected_payments
     *
     * @return $this
     */
    public function setRejectedPayments($rejected_payments)
    {
        $this->container['rejected_payments'] = $rejected_payments;

        return $this;
    }

    /**
     * Gets maximum_duration_of_excess
     *
     * @return int
     */
    public function getMaximumDurationOfExcess()
    {
        return $this->container['maximum_duration_of_excess'];
    }

    /**
     * Sets maximum_duration_of_excess
     *
     * @param int $maximum_duration_of_excess maximum_duration_of_excess
     *
     * @return $this
     */
    public function setMaximumDurationOfExcess($maximum_duration_of_excess)
    {
        $this->container['maximum_duration_of_excess'] = $maximum_duration_of_excess;

        return $this;
    }

    /**
     * Gets changed_facility_number
     *
     * @return string
     */
    public function getChangedFacilityNumber()
    {
        return $this->container['changed_facility_number'];
    }

    /**
     * Sets changed_facility_number
     *
     * @param string $changed_facility_number changed_facility_number
     *
     * @return $this
     */
    public function setChangedFacilityNumber($changed_facility_number)
    {
        $this->container['changed_facility_number'] = $changed_facility_number;

        return $this;
    }

    /**
     * Gets bank_sort_code
     *
     * @return string
     */
    public function getBankSortCode()
    {
        return $this->container['bank_sort_code'];
    }

    /**
     * Sets bank_sort_code
     *
     * @param string $bank_sort_code bank_sort_code
     *
     * @return $this
     */
    public function setBankSortCode($bank_sort_code)
    {
        $this->container['bank_sort_code'] = $bank_sort_code;

        return $this;
    }

    /**
     * Gets bank_account_number
     *
     * @return string
     */
    public function getBankAccountNumber()
    {
        return $this->container['bank_account_number'];
    }

    /**
     * Sets bank_account_number
     *
     * @param string $bank_account_number bank_account_number
     *
     * @return $this
     */
    public function setBankAccountNumber($bank_account_number)
    {
        $this->container['bank_account_number'] = $bank_account_number;

        return $this;
    }

    /**
     * Gets bank_account_iban
     *
     * @return string
     */
    public function getBankAccountIban()
    {
        return $this->container['bank_account_iban'];
    }

    /**
     * Sets bank_account_iban
     *
     * @param string $bank_account_iban bank_account_iban
     *
     * @return $this
     */
    public function setBankAccountIban($bank_account_iban)
    {
        $this->container['bank_account_iban'] = $bank_account_iban;

        return $this;
    }

    /**
     * Gets current_account_reporting_level_indicator
     *
     * @return string
     */
    public function getCurrentAccountReportingLevelIndicator()
    {
        return $this->container['current_account_reporting_level_indicator'];
    }

    /**
     * Sets current_account_reporting_level_indicator
     *
     * @param string $current_account_reporting_level_indicator current_account_reporting_level_indicator
     *
     * @return $this
     */
    public function setCurrentAccountReportingLevelIndicator($current_account_reporting_level_indicator)
    {
        $this->container['current_account_reporting_level_indicator'] = $current_account_reporting_level_indicator;

        return $this;
    }

    /**
     * Gets source_code
     *
     * @return string
     */
    public function getSourceCode()
    {
        return $this->container['source_code'];
    }

    /**
     * Sets source_code
     *
     * @param string $source_code source_code
     *
     * @return $this
     */
    public function setSourceCode($source_code)
    {
        $this->container['source_code'] = $source_code;

        return $this;
    }

    /**
     * Gets facility_number
     *
     * @return string
     */
    public function getFacilityNumber()
    {
        return $this->container['facility_number'];
    }

    /**
     * Sets facility_number
     *
     * @param string $facility_number facility_number
     *
     * @return $this
     */
    public function setFacilityNumber($facility_number)
    {
        $this->container['facility_number'] = $facility_number;

        return $this;
    }

    /**
     * Gets facility_id
     *
     * @return string
     */
    public function getFacilityId()
    {
        return $this->container['facility_id'];
    }

    /**
     * Sets facility_id
     *
     * @param string $facility_id facility_id
     *
     * @return $this
     */
    public function setFacilityId($facility_id)
    {
        $this->container['facility_id'] = $facility_id;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string $identifier identifier
     *
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets provider_type
     *
     * @return string
     */
    public function getProviderType()
    {
        return $this->container['provider_type'];
    }

    /**
     * Sets provider_type
     *
     * @param string $provider_type provider_type
     *
     * @return $this
     */
    public function setProviderType($provider_type)
    {
        $this->container['provider_type'] = $provider_type;

        return $this;
    }

    /**
     * Gets bank_code
     *
     * @return string
     */
    public function getBankCode()
    {
        return $this->container['bank_code'];
    }

    /**
     * Sets bank_code
     *
     * @param string $bank_code bank_code
     *
     * @return $this
     */
    public function setBankCode($bank_code)
    {
        $this->container['bank_code'] = $bank_code;

        return $this;
    }

    /**
     * Gets batch
     *
     * @return string
     */
    public function getBatch()
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     *
     * @param string $batch batch
     *
     * @return $this
     */
    public function setBatch($batch)
    {
        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets facility_type
     *
     * @return int
     */
    public function getFacilityType()
    {
        return $this->container['facility_type'];
    }

    /**
     * Sets facility_type
     *
     * @param int $facility_type facility_type
     *
     * @return $this
     */
    public function setFacilityType($facility_type)
    {
        $this->container['facility_type'] = $facility_type;

        return $this;
    }

    /**
     * Gets facility_type_category
     *
     * @return string
     */
    public function getFacilityTypeCategory()
    {
        return $this->container['facility_type_category'];
    }

    /**
     * Sets facility_type_category
     *
     * @param string $facility_type_category facility_type_category
     *
     * @return $this
     */
    public function setFacilityTypeCategory($facility_type_category)
    {
        $this->container['facility_type_category'] = $facility_type_category;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
