<?php
/**
 * ConnectBankMatchResultBankMatchResults
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ConnectBankMatchResultBankMatchResults Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConnectBankMatchResultBankMatchResults implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Connect.BankMatch.Result_bankMatchResults';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'company_number' => 'string',
'account_number' => 'string',
'iban' => 'string',
'iban_result' => 'string',
'iban_text' => 'string',
'log_date' => 'string',
'safe_number' => 'string',
'scan_result' => 'string',
'scan_text' => 'string',
'sort_code' => 'string',
'status_result' => 'string',
'status_text' => 'string',
'vat_result' => 'string',
'vat_text' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'company_number' => null,
'account_number' => null,
'iban' => null,
'iban_result' => null,
'iban_text' => null,
'log_date' => null,
'safe_number' => null,
'scan_result' => null,
'scan_text' => null,
'sort_code' => null,
'status_result' => null,
'status_text' => null,
'vat_result' => null,
'vat_text' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_number' => 'companyNumber',
'account_number' => 'accountNumber',
'iban' => 'iban',
'iban_result' => 'ibanResult',
'iban_text' => 'ibanText',
'log_date' => 'logDate',
'safe_number' => 'safeNumber',
'scan_result' => 'scanResult',
'scan_text' => 'scanText',
'sort_code' => 'sortCode',
'status_result' => 'statusResult',
'status_text' => 'statusText',
'vat_result' => 'vatResult',
'vat_text' => 'vatText'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_number' => 'setCompanyNumber',
'account_number' => 'setAccountNumber',
'iban' => 'setIban',
'iban_result' => 'setIbanResult',
'iban_text' => 'setIbanText',
'log_date' => 'setLogDate',
'safe_number' => 'setSafeNumber',
'scan_result' => 'setScanResult',
'scan_text' => 'setScanText',
'sort_code' => 'setSortCode',
'status_result' => 'setStatusResult',
'status_text' => 'setStatusText',
'vat_result' => 'setVatResult',
'vat_text' => 'setVatText'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_number' => 'getCompanyNumber',
'account_number' => 'getAccountNumber',
'iban' => 'getIban',
'iban_result' => 'getIbanResult',
'iban_text' => 'getIbanText',
'log_date' => 'getLogDate',
'safe_number' => 'getSafeNumber',
'scan_result' => 'getScanResult',
'scan_text' => 'getScanText',
'sort_code' => 'getSortCode',
'status_result' => 'getStatusResult',
'status_text' => 'getStatusText',
'vat_result' => 'getVatResult',
'vat_text' => 'getVatText'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['company_number'] = isset($data['company_number']) ? $data['company_number'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['iban'] = isset($data['iban']) ? $data['iban'] : null;
        $this->container['iban_result'] = isset($data['iban_result']) ? $data['iban_result'] : null;
        $this->container['iban_text'] = isset($data['iban_text']) ? $data['iban_text'] : null;
        $this->container['log_date'] = isset($data['log_date']) ? $data['log_date'] : null;
        $this->container['safe_number'] = isset($data['safe_number']) ? $data['safe_number'] : null;
        $this->container['scan_result'] = isset($data['scan_result']) ? $data['scan_result'] : null;
        $this->container['scan_text'] = isset($data['scan_text']) ? $data['scan_text'] : null;
        $this->container['sort_code'] = isset($data['sort_code']) ? $data['sort_code'] : null;
        $this->container['status_result'] = isset($data['status_result']) ? $data['status_result'] : null;
        $this->container['status_text'] = isset($data['status_text']) ? $data['status_text'] : null;
        $this->container['vat_result'] = isset($data['vat_result']) ? $data['vat_result'] : null;
        $this->container['vat_text'] = isset($data['vat_text']) ? $data['vat_text'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company_number
     *
     * @return string
     */
    public function getCompanyNumber()
    {
        return $this->container['company_number'];
    }

    /**
     * Sets company_number
     *
     * @param string $company_number company_number
     *
     * @return $this
     */
    public function setCompanyNumber($company_number)
    {
        $this->container['company_number'] = $company_number;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number account_number
     *
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string $iban iban
     *
     * @return $this
     */
    public function setIban($iban)
    {
        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets iban_result
     *
     * @return string
     */
    public function getIbanResult()
    {
        return $this->container['iban_result'];
    }

    /**
     * Sets iban_result
     *
     * @param string $iban_result Match or No Match
     *
     * @return $this
     */
    public function setIbanResult($iban_result)
    {
        $this->container['iban_result'] = $iban_result;

        return $this;
    }

    /**
     * Gets iban_text
     *
     * @return string
     */
    public function getIbanText()
    {
        return $this->container['iban_text'];
    }

    /**
     * Sets iban_text
     *
     * @param string $iban_text iban_text
     *
     * @return $this
     */
    public function setIbanText($iban_text)
    {
        $this->container['iban_text'] = $iban_text;

        return $this;
    }

    /**
     * Gets log_date
     *
     * @return string
     */
    public function getLogDate()
    {
        return $this->container['log_date'];
    }

    /**
     * Sets log_date
     *
     * @param string $log_date log_date
     *
     * @return $this
     */
    public function setLogDate($log_date)
    {
        $this->container['log_date'] = $log_date;

        return $this;
    }

    /**
     * Gets safe_number
     *
     * @return string
     */
    public function getSafeNumber()
    {
        return $this->container['safe_number'];
    }

    /**
     * Sets safe_number
     *
     * @param string $safe_number safe_number
     *
     * @return $this
     */
    public function setSafeNumber($safe_number)
    {
        $this->container['safe_number'] = $safe_number;

        return $this;
    }

    /**
     * Gets scan_result
     *
     * @return string
     */
    public function getScanResult()
    {
        return $this->container['scan_result'];
    }

    /**
     * Sets scan_result
     *
     * @param string $scan_result Match or No Match
     *
     * @return $this
     */
    public function setScanResult($scan_result)
    {
        $this->container['scan_result'] = $scan_result;

        return $this;
    }

    /**
     * Gets scan_text
     *
     * @return string
     */
    public function getScanText()
    {
        return $this->container['scan_text'];
    }

    /**
     * Sets scan_text
     *
     * @param string $scan_text scan_text
     *
     * @return $this
     */
    public function setScanText($scan_text)
    {
        $this->container['scan_text'] = $scan_text;

        return $this;
    }

    /**
     * Gets sort_code
     *
     * @return string
     */
    public function getSortCode()
    {
        return $this->container['sort_code'];
    }

    /**
     * Sets sort_code
     *
     * @param string $sort_code sort_code
     *
     * @return $this
     */
    public function setSortCode($sort_code)
    {
        $this->container['sort_code'] = $sort_code;

        return $this;
    }

    /**
     * Gets status_result
     *
     * @return string
     */
    public function getStatusResult()
    {
        return $this->container['status_result'];
    }

    /**
     * Sets status_result
     *
     * @param string $status_result Request status, e.g. Success, Error, Warning
     *
     * @return $this
     */
    public function setStatusResult($status_result)
    {
        $this->container['status_result'] = $status_result;

        return $this;
    }

    /**
     * Gets status_text
     *
     * @return string
     */
    public function getStatusText()
    {
        return $this->container['status_text'];
    }

    /**
     * Sets status_text
     *
     * @param string $status_text Explanation for error or warning, if applicable, otherwise empty quotation marks
     *
     * @return $this
     */
    public function setStatusText($status_text)
    {
        $this->container['status_text'] = $status_text;

        return $this;
    }

    /**
     * Gets vat_result
     *
     * @return string
     */
    public function getVatResult()
    {
        return $this->container['vat_result'];
    }

    /**
     * Sets vat_result
     *
     * @param string $vat_result Match or No Match
     *
     * @return $this
     */
    public function setVatResult($vat_result)
    {
        $this->container['vat_result'] = $vat_result;

        return $this;
    }

    /**
     * Gets vat_text
     *
     * @return string
     */
    public function getVatText()
    {
        return $this->container['vat_text'];
    }

    /**
     * Sets vat_text
     *
     * @param string $vat_text vat_text
     *
     * @return $this
     */
    public function setVatText($vat_text)
    {
        $this->container['vat_text'] = $vat_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
