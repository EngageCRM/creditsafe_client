<?php
/**
 * ConnectFreshInvListInvestigationsOrders
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ConnectFreshInvListInvestigationsOrders Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConnectFreshInvListInvestigationsOrders implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Connect.FreshInv.ListInvestigations_orders';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_id' => 'int',
'user_id' => 'string',
'creation_date' => 'string',
'last_status_change_date' => 'string',
'transaction_id' => 'int',
'charge_reference' => 'string',
'contact_details' => '\Swagger\Client\Model\ConnectFreshInvListInvestigationsContactDetails',
'section_names' => 'string',
'status' => '\Swagger\Client\Model\ConnectFreshInvCompletedInvestigationStatus',
'consent' => 'bool',
'search_criteria' => '\Swagger\Client\Model\ConnectFreshInvListInvestigationsSearchCriteria',
'report_date' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_id' => null,
'user_id' => null,
'creation_date' => null,
'last_status_change_date' => null,
'transaction_id' => null,
'charge_reference' => null,
'contact_details' => null,
'section_names' => null,
'status' => null,
'consent' => null,
'search_criteria' => null,
'report_date' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'orderID',
'user_id' => 'userID',
'creation_date' => 'creationDate',
'last_status_change_date' => 'lastStatusChangeDate',
'transaction_id' => 'transactionID',
'charge_reference' => 'chargeReference',
'contact_details' => 'contactDetails',
'section_names' => 'sectionNames',
'status' => 'status',
'consent' => 'consent',
'search_criteria' => 'searchCriteria',
'report_date' => 'reportDate'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
'user_id' => 'setUserId',
'creation_date' => 'setCreationDate',
'last_status_change_date' => 'setLastStatusChangeDate',
'transaction_id' => 'setTransactionId',
'charge_reference' => 'setChargeReference',
'contact_details' => 'setContactDetails',
'section_names' => 'setSectionNames',
'status' => 'setStatus',
'consent' => 'setConsent',
'search_criteria' => 'setSearchCriteria',
'report_date' => 'setReportDate'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
'user_id' => 'getUserId',
'creation_date' => 'getCreationDate',
'last_status_change_date' => 'getLastStatusChangeDate',
'transaction_id' => 'getTransactionId',
'charge_reference' => 'getChargeReference',
'contact_details' => 'getContactDetails',
'section_names' => 'getSectionNames',
'status' => 'getStatus',
'consent' => 'getConsent',
'search_criteria' => 'getSearchCriteria',
'report_date' => 'getReportDate'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['last_status_change_date'] = isset($data['last_status_change_date']) ? $data['last_status_change_date'] : null;
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['charge_reference'] = isset($data['charge_reference']) ? $data['charge_reference'] : null;
        $this->container['contact_details'] = isset($data['contact_details']) ? $data['contact_details'] : null;
        $this->container['section_names'] = isset($data['section_names']) ? $data['section_names'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['consent'] = isset($data['consent']) ? $data['consent'] : null;
        $this->container['search_criteria'] = isset($data['search_criteria']) ? $data['search_criteria'] : null;
        $this->container['report_date'] = isset($data['report_date']) ? $data['report_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id order_id
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return string
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param string $creation_date creation_date
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets last_status_change_date
     *
     * @return string
     */
    public function getLastStatusChangeDate()
    {
        return $this->container['last_status_change_date'];
    }

    /**
     * Sets last_status_change_date
     *
     * @param string $last_status_change_date last_status_change_date
     *
     * @return $this
     */
    public function setLastStatusChangeDate($last_status_change_date)
    {
        $this->container['last_status_change_date'] = $last_status_change_date;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return int
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param int $transaction_id transaction_id
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets charge_reference
     *
     * @return string
     */
    public function getChargeReference()
    {
        return $this->container['charge_reference'];
    }

    /**
     * Sets charge_reference
     *
     * @param string $charge_reference charge_reference
     *
     * @return $this
     */
    public function setChargeReference($charge_reference)
    {
        $this->container['charge_reference'] = $charge_reference;

        return $this;
    }

    /**
     * Gets contact_details
     *
     * @return \Swagger\Client\Model\ConnectFreshInvListInvestigationsContactDetails
     */
    public function getContactDetails()
    {
        return $this->container['contact_details'];
    }

    /**
     * Sets contact_details
     *
     * @param \Swagger\Client\Model\ConnectFreshInvListInvestigationsContactDetails $contact_details contact_details
     *
     * @return $this
     */
    public function setContactDetails($contact_details)
    {
        $this->container['contact_details'] = $contact_details;

        return $this;
    }

    /**
     * Gets section_names
     *
     * @return string
     */
    public function getSectionNames()
    {
        return $this->container['section_names'];
    }

    /**
     * Sets section_names
     *
     * @param string $section_names section_names
     *
     * @return $this
     */
    public function setSectionNames($section_names)
    {
        $this->container['section_names'] = $section_names;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\ConnectFreshInvCompletedInvestigationStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\ConnectFreshInvCompletedInvestigationStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets consent
     *
     * @return bool
     */
    public function getConsent()
    {
        return $this->container['consent'];
    }

    /**
     * Sets consent
     *
     * @param bool $consent consent
     *
     * @return $this
     */
    public function setConsent($consent)
    {
        $this->container['consent'] = $consent;

        return $this;
    }

    /**
     * Gets search_criteria
     *
     * @return \Swagger\Client\Model\ConnectFreshInvListInvestigationsSearchCriteria
     */
    public function getSearchCriteria()
    {
        return $this->container['search_criteria'];
    }

    /**
     * Sets search_criteria
     *
     * @param \Swagger\Client\Model\ConnectFreshInvListInvestigationsSearchCriteria $search_criteria search_criteria
     *
     * @return $this
     */
    public function setSearchCriteria($search_criteria)
    {
        $this->container['search_criteria'] = $search_criteria;

        return $this;
    }

    /**
     * Gets report_date
     *
     * @return \DateTime
     */
    public function getReportDate()
    {
        return $this->container['report_date'];
    }

    /**
     * Sets report_date
     *
     * @param \DateTime $report_date report_date
     *
     * @return $this
     */
    public function setReportDate($report_date)
    {
        $this->container['report_date'] = $report_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
