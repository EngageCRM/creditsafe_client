<?php
/**
 * ConnectIdentityCreditReport
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ConnectIdentityCreditReport Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConnectIdentityCreditReport implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Connect.Identity.CreditReport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'report_title' => 'string',
'report_type' => 'string',
'summary' => '\Swagger\Client\Model\ConnectIdentitySummary',
'score' => '\Swagger\Client\Model\ConnectIdentityCreditScore',
'address' => '\Swagger\Client\Model\ConnectIdentityReportAddress',
'previous_address1' => '\Swagger\Client\Model\ConnectIdentityReportAddress',
'previous_address2' => '\Swagger\Client\Model\ConnectIdentityReportAddress',
'links' => '\Swagger\Client\Model\ConnectIdentityReportLinks',
'cifas' => '\Swagger\Client\Model\ConnectIdentityReportCifas',
'rtr' => '\Swagger\Client\Model\ConnectIdentityReportRtr[]',
'insolvencies' => '\Swagger\Client\Model\ConnectIdentityReportInsolvency[]',
'judgements' => '\Swagger\Client\Model\ConnectIdentityReportJudgement[]',
'history' => '\Swagger\Client\Model\ConnectIdentityReportHistory[]',
'notices' => '\Swagger\Client\Model\ConnectIdentityReportNotice[]',
'demographics' => '\Swagger\Client\Model\ConnectIdentityReportDemographics',
'third_party_alerts' => '\Swagger\Client\Model\ConnectIdentityThirdPartyAlerts',
'share_accounts' => '\Swagger\Client\Model\ConnectIdentityReportShareAccount[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'report_title' => null,
'report_type' => null,
'summary' => null,
'score' => null,
'address' => null,
'previous_address1' => null,
'previous_address2' => null,
'links' => null,
'cifas' => null,
'rtr' => null,
'insolvencies' => null,
'judgements' => null,
'history' => null,
'notices' => null,
'demographics' => null,
'third_party_alerts' => null,
'share_accounts' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'report_title' => 'reportTitle',
'report_type' => 'reportType',
'summary' => 'summary',
'score' => 'score',
'address' => 'address',
'previous_address1' => 'previousAddress1',
'previous_address2' => 'previousAddress2',
'links' => 'links',
'cifas' => 'cifas',
'rtr' => 'rtr',
'insolvencies' => 'insolvencies',
'judgements' => 'judgements',
'history' => 'history',
'notices' => 'notices',
'demographics' => 'demographics',
'third_party_alerts' => 'thirdPartyAlerts',
'share_accounts' => 'shareAccounts'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'report_title' => 'setReportTitle',
'report_type' => 'setReportType',
'summary' => 'setSummary',
'score' => 'setScore',
'address' => 'setAddress',
'previous_address1' => 'setPreviousAddress1',
'previous_address2' => 'setPreviousAddress2',
'links' => 'setLinks',
'cifas' => 'setCifas',
'rtr' => 'setRtr',
'insolvencies' => 'setInsolvencies',
'judgements' => 'setJudgements',
'history' => 'setHistory',
'notices' => 'setNotices',
'demographics' => 'setDemographics',
'third_party_alerts' => 'setThirdPartyAlerts',
'share_accounts' => 'setShareAccounts'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'report_title' => 'getReportTitle',
'report_type' => 'getReportType',
'summary' => 'getSummary',
'score' => 'getScore',
'address' => 'getAddress',
'previous_address1' => 'getPreviousAddress1',
'previous_address2' => 'getPreviousAddress2',
'links' => 'getLinks',
'cifas' => 'getCifas',
'rtr' => 'getRtr',
'insolvencies' => 'getInsolvencies',
'judgements' => 'getJudgements',
'history' => 'getHistory',
'notices' => 'getNotices',
'demographics' => 'getDemographics',
'third_party_alerts' => 'getThirdPartyAlerts',
'share_accounts' => 'getShareAccounts'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['report_title'] = isset($data['report_title']) ? $data['report_title'] : null;
        $this->container['report_type'] = isset($data['report_type']) ? $data['report_type'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['score'] = isset($data['score']) ? $data['score'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['previous_address1'] = isset($data['previous_address1']) ? $data['previous_address1'] : null;
        $this->container['previous_address2'] = isset($data['previous_address2']) ? $data['previous_address2'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['cifas'] = isset($data['cifas']) ? $data['cifas'] : null;
        $this->container['rtr'] = isset($data['rtr']) ? $data['rtr'] : null;
        $this->container['insolvencies'] = isset($data['insolvencies']) ? $data['insolvencies'] : null;
        $this->container['judgements'] = isset($data['judgements']) ? $data['judgements'] : null;
        $this->container['history'] = isset($data['history']) ? $data['history'] : null;
        $this->container['notices'] = isset($data['notices']) ? $data['notices'] : null;
        $this->container['demographics'] = isset($data['demographics']) ? $data['demographics'] : null;
        $this->container['third_party_alerts'] = isset($data['third_party_alerts']) ? $data['third_party_alerts'] : null;
        $this->container['share_accounts'] = isset($data['share_accounts']) ? $data['share_accounts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets report_title
     *
     * @return string
     */
    public function getReportTitle()
    {
        return $this->container['report_title'];
    }

    /**
     * Sets report_title
     *
     * @param string $report_title report_title
     *
     * @return $this
     */
    public function setReportTitle($report_title)
    {
        $this->container['report_title'] = $report_title;

        return $this;
    }

    /**
     * Gets report_type
     *
     * @return string
     */
    public function getReportType()
    {
        return $this->container['report_type'];
    }

    /**
     * Sets report_type
     *
     * @param string $report_type report_type
     *
     * @return $this
     */
    public function setReportType($report_type)
    {
        $this->container['report_type'] = $report_type;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return \Swagger\Client\Model\ConnectIdentitySummary
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param \Swagger\Client\Model\ConnectIdentitySummary $summary summary
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets score
     *
     * @return \Swagger\Client\Model\ConnectIdentityCreditScore
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param \Swagger\Client\Model\ConnectIdentityCreditScore $score score
     *
     * @return $this
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\ConnectIdentityReportAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\ConnectIdentityReportAddress $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets previous_address1
     *
     * @return \Swagger\Client\Model\ConnectIdentityReportAddress
     */
    public function getPreviousAddress1()
    {
        return $this->container['previous_address1'];
    }

    /**
     * Sets previous_address1
     *
     * @param \Swagger\Client\Model\ConnectIdentityReportAddress $previous_address1 previous_address1
     *
     * @return $this
     */
    public function setPreviousAddress1($previous_address1)
    {
        $this->container['previous_address1'] = $previous_address1;

        return $this;
    }

    /**
     * Gets previous_address2
     *
     * @return \Swagger\Client\Model\ConnectIdentityReportAddress
     */
    public function getPreviousAddress2()
    {
        return $this->container['previous_address2'];
    }

    /**
     * Sets previous_address2
     *
     * @param \Swagger\Client\Model\ConnectIdentityReportAddress $previous_address2 previous_address2
     *
     * @return $this
     */
    public function setPreviousAddress2($previous_address2)
    {
        $this->container['previous_address2'] = $previous_address2;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Swagger\Client\Model\ConnectIdentityReportLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Swagger\Client\Model\ConnectIdentityReportLinks $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets cifas
     *
     * @return \Swagger\Client\Model\ConnectIdentityReportCifas
     */
    public function getCifas()
    {
        return $this->container['cifas'];
    }

    /**
     * Sets cifas
     *
     * @param \Swagger\Client\Model\ConnectIdentityReportCifas $cifas cifas
     *
     * @return $this
     */
    public function setCifas($cifas)
    {
        $this->container['cifas'] = $cifas;

        return $this;
    }

    /**
     * Gets rtr
     *
     * @return \Swagger\Client\Model\ConnectIdentityReportRtr[]
     */
    public function getRtr()
    {
        return $this->container['rtr'];
    }

    /**
     * Sets rtr
     *
     * @param \Swagger\Client\Model\ConnectIdentityReportRtr[] $rtr rtr
     *
     * @return $this
     */
    public function setRtr($rtr)
    {
        $this->container['rtr'] = $rtr;

        return $this;
    }

    /**
     * Gets insolvencies
     *
     * @return \Swagger\Client\Model\ConnectIdentityReportInsolvency[]
     */
    public function getInsolvencies()
    {
        return $this->container['insolvencies'];
    }

    /**
     * Sets insolvencies
     *
     * @param \Swagger\Client\Model\ConnectIdentityReportInsolvency[] $insolvencies insolvencies
     *
     * @return $this
     */
    public function setInsolvencies($insolvencies)
    {
        $this->container['insolvencies'] = $insolvencies;

        return $this;
    }

    /**
     * Gets judgements
     *
     * @return \Swagger\Client\Model\ConnectIdentityReportJudgement[]
     */
    public function getJudgements()
    {
        return $this->container['judgements'];
    }

    /**
     * Sets judgements
     *
     * @param \Swagger\Client\Model\ConnectIdentityReportJudgement[] $judgements judgements
     *
     * @return $this
     */
    public function setJudgements($judgements)
    {
        $this->container['judgements'] = $judgements;

        return $this;
    }

    /**
     * Gets history
     *
     * @return \Swagger\Client\Model\ConnectIdentityReportHistory[]
     */
    public function getHistory()
    {
        return $this->container['history'];
    }

    /**
     * Sets history
     *
     * @param \Swagger\Client\Model\ConnectIdentityReportHistory[] $history history
     *
     * @return $this
     */
    public function setHistory($history)
    {
        $this->container['history'] = $history;

        return $this;
    }

    /**
     * Gets notices
     *
     * @return \Swagger\Client\Model\ConnectIdentityReportNotice[]
     */
    public function getNotices()
    {
        return $this->container['notices'];
    }

    /**
     * Sets notices
     *
     * @param \Swagger\Client\Model\ConnectIdentityReportNotice[] $notices notices
     *
     * @return $this
     */
    public function setNotices($notices)
    {
        $this->container['notices'] = $notices;

        return $this;
    }

    /**
     * Gets demographics
     *
     * @return \Swagger\Client\Model\ConnectIdentityReportDemographics
     */
    public function getDemographics()
    {
        return $this->container['demographics'];
    }

    /**
     * Sets demographics
     *
     * @param \Swagger\Client\Model\ConnectIdentityReportDemographics $demographics demographics
     *
     * @return $this
     */
    public function setDemographics($demographics)
    {
        $this->container['demographics'] = $demographics;

        return $this;
    }

    /**
     * Gets third_party_alerts
     *
     * @return \Swagger\Client\Model\ConnectIdentityThirdPartyAlerts
     */
    public function getThirdPartyAlerts()
    {
        return $this->container['third_party_alerts'];
    }

    /**
     * Sets third_party_alerts
     *
     * @param \Swagger\Client\Model\ConnectIdentityThirdPartyAlerts $third_party_alerts third_party_alerts
     *
     * @return $this
     */
    public function setThirdPartyAlerts($third_party_alerts)
    {
        $this->container['third_party_alerts'] = $third_party_alerts;

        return $this;
    }

    /**
     * Gets share_accounts
     *
     * @return \Swagger\Client\Model\ConnectIdentityReportShareAccount[]
     */
    public function getShareAccounts()
    {
        return $this->container['share_accounts'];
    }

    /**
     * Sets share_accounts
     *
     * @param \Swagger\Client\Model\ConnectIdentityReportShareAccount[] $share_accounts share_accounts
     *
     * @return $this
     */
    public function setShareAccounts($share_accounts)
    {
        $this->container['share_accounts'] = $share_accounts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
