<?php
/**
 * ConnectIdentityIdAmlResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ConnectIdentityIdAmlResult Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConnectIdentityIdAmlResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Connect.Identity.IdAmlResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'authentication_id' => 'string',
'band_text' => 'string',
'birth_index_match' => 'bool',
'chain_id' => 'string',
'documents' => '\Swagger\Client\Model\ConnectIdentityMappedDocuments',
'no_retry' => 'bool',
'result_codes' => 'map[string,\Swagger\Client\Model\ConnectIdentityMappedResultCode]',
'score' => 'int',
'search_text' => 'string',
'legacy_unique_id' => 'string',
'validation_id' => 'string',
'has_alerts' => 'bool',
'success' => 'bool',
'supplier_id' => 'string',
'supplier_original_id' => 'string',
'credits_incurred' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'authentication_id' => null,
'band_text' => null,
'birth_index_match' => null,
'chain_id' => null,
'documents' => null,
'no_retry' => null,
'result_codes' => null,
'score' => 'int32',
'search_text' => null,
'legacy_unique_id' => null,
'validation_id' => null,
'has_alerts' => null,
'success' => null,
'supplier_id' => null,
'supplier_original_id' => null,
'credits_incurred' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authentication_id' => 'authenticationID',
'band_text' => 'bandText',
'birth_index_match' => 'birthIndexMatch',
'chain_id' => 'chainID',
'documents' => 'documents',
'no_retry' => 'noRetry',
'result_codes' => 'resultCodes',
'score' => 'score',
'search_text' => 'searchText',
'legacy_unique_id' => 'legacyUniqueID',
'validation_id' => 'validationID',
'has_alerts' => 'hasAlerts',
'success' => 'success',
'supplier_id' => 'supplierId',
'supplier_original_id' => 'supplierOriginalId',
'credits_incurred' => 'creditsIncurred'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authentication_id' => 'setAuthenticationId',
'band_text' => 'setBandText',
'birth_index_match' => 'setBirthIndexMatch',
'chain_id' => 'setChainId',
'documents' => 'setDocuments',
'no_retry' => 'setNoRetry',
'result_codes' => 'setResultCodes',
'score' => 'setScore',
'search_text' => 'setSearchText',
'legacy_unique_id' => 'setLegacyUniqueId',
'validation_id' => 'setValidationId',
'has_alerts' => 'setHasAlerts',
'success' => 'setSuccess',
'supplier_id' => 'setSupplierId',
'supplier_original_id' => 'setSupplierOriginalId',
'credits_incurred' => 'setCreditsIncurred'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authentication_id' => 'getAuthenticationId',
'band_text' => 'getBandText',
'birth_index_match' => 'getBirthIndexMatch',
'chain_id' => 'getChainId',
'documents' => 'getDocuments',
'no_retry' => 'getNoRetry',
'result_codes' => 'getResultCodes',
'score' => 'getScore',
'search_text' => 'getSearchText',
'legacy_unique_id' => 'getLegacyUniqueId',
'validation_id' => 'getValidationId',
'has_alerts' => 'getHasAlerts',
'success' => 'getSuccess',
'supplier_id' => 'getSupplierId',
'supplier_original_id' => 'getSupplierOriginalId',
'credits_incurred' => 'getCreditsIncurred'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['authentication_id'] = isset($data['authentication_id']) ? $data['authentication_id'] : null;
        $this->container['band_text'] = isset($data['band_text']) ? $data['band_text'] : null;
        $this->container['birth_index_match'] = isset($data['birth_index_match']) ? $data['birth_index_match'] : null;
        $this->container['chain_id'] = isset($data['chain_id']) ? $data['chain_id'] : null;
        $this->container['documents'] = isset($data['documents']) ? $data['documents'] : null;
        $this->container['no_retry'] = isset($data['no_retry']) ? $data['no_retry'] : null;
        $this->container['result_codes'] = isset($data['result_codes']) ? $data['result_codes'] : null;
        $this->container['score'] = isset($data['score']) ? $data['score'] : null;
        $this->container['search_text'] = isset($data['search_text']) ? $data['search_text'] : null;
        $this->container['legacy_unique_id'] = isset($data['legacy_unique_id']) ? $data['legacy_unique_id'] : null;
        $this->container['validation_id'] = isset($data['validation_id']) ? $data['validation_id'] : null;
        $this->container['has_alerts'] = isset($data['has_alerts']) ? $data['has_alerts'] : null;
        $this->container['success'] = isset($data['success']) ? $data['success'] : null;
        $this->container['supplier_id'] = isset($data['supplier_id']) ? $data['supplier_id'] : null;
        $this->container['supplier_original_id'] = isset($data['supplier_original_id']) ? $data['supplier_original_id'] : null;
        $this->container['credits_incurred'] = isset($data['credits_incurred']) ? $data['credits_incurred'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authentication_id
     *
     * @return string
     */
    public function getAuthenticationId()
    {
        return $this->container['authentication_id'];
    }

    /**
     * Sets authentication_id
     *
     * @param string $authentication_id authentication_id
     *
     * @return $this
     */
    public function setAuthenticationId($authentication_id)
    {
        $this->container['authentication_id'] = $authentication_id;

        return $this;
    }

    /**
     * Gets band_text
     *
     * @return string
     */
    public function getBandText()
    {
        return $this->container['band_text'];
    }

    /**
     * Sets band_text
     *
     * @param string $band_text band_text
     *
     * @return $this
     */
    public function setBandText($band_text)
    {
        $this->container['band_text'] = $band_text;

        return $this;
    }

    /**
     * Gets birth_index_match
     *
     * @return bool
     */
    public function getBirthIndexMatch()
    {
        return $this->container['birth_index_match'];
    }

    /**
     * Sets birth_index_match
     *
     * @param bool $birth_index_match birth_index_match
     *
     * @return $this
     */
    public function setBirthIndexMatch($birth_index_match)
    {
        $this->container['birth_index_match'] = $birth_index_match;

        return $this;
    }

    /**
     * Gets chain_id
     *
     * @return string
     */
    public function getChainId()
    {
        return $this->container['chain_id'];
    }

    /**
     * Sets chain_id
     *
     * @param string $chain_id chain_id
     *
     * @return $this
     */
    public function setChainId($chain_id)
    {
        $this->container['chain_id'] = $chain_id;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \Swagger\Client\Model\ConnectIdentityMappedDocuments
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \Swagger\Client\Model\ConnectIdentityMappedDocuments $documents documents
     *
     * @return $this
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets no_retry
     *
     * @return bool
     */
    public function getNoRetry()
    {
        return $this->container['no_retry'];
    }

    /**
     * Sets no_retry
     *
     * @param bool $no_retry no_retry
     *
     * @return $this
     */
    public function setNoRetry($no_retry)
    {
        $this->container['no_retry'] = $no_retry;

        return $this;
    }

    /**
     * Gets result_codes
     *
     * @return map[string,\Swagger\Client\Model\ConnectIdentityMappedResultCode]
     */
    public function getResultCodes()
    {
        return $this->container['result_codes'];
    }

    /**
     * Sets result_codes
     *
     * @param map[string,\Swagger\Client\Model\ConnectIdentityMappedResultCode] $result_codes result_codes
     *
     * @return $this
     */
    public function setResultCodes($result_codes)
    {
        $this->container['result_codes'] = $result_codes;

        return $this;
    }

    /**
     * Gets score
     *
     * @return int
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param int $score score
     *
     * @return $this
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets search_text
     *
     * @return string
     */
    public function getSearchText()
    {
        return $this->container['search_text'];
    }

    /**
     * Sets search_text
     *
     * @param string $search_text search_text
     *
     * @return $this
     */
    public function setSearchText($search_text)
    {
        $this->container['search_text'] = $search_text;

        return $this;
    }

    /**
     * Gets legacy_unique_id
     *
     * @return string
     */
    public function getLegacyUniqueId()
    {
        return $this->container['legacy_unique_id'];
    }

    /**
     * Sets legacy_unique_id
     *
     * @param string $legacy_unique_id legacy_unique_id
     *
     * @return $this
     */
    public function setLegacyUniqueId($legacy_unique_id)
    {
        $this->container['legacy_unique_id'] = $legacy_unique_id;

        return $this;
    }

    /**
     * Gets validation_id
     *
     * @return string
     */
    public function getValidationId()
    {
        return $this->container['validation_id'];
    }

    /**
     * Sets validation_id
     *
     * @param string $validation_id validation_id
     *
     * @return $this
     */
    public function setValidationId($validation_id)
    {
        $this->container['validation_id'] = $validation_id;

        return $this;
    }

    /**
     * Gets has_alerts
     *
     * @return bool
     */
    public function getHasAlerts()
    {
        return $this->container['has_alerts'];
    }

    /**
     * Sets has_alerts
     *
     * @param bool $has_alerts has_alerts
     *
     * @return $this
     */
    public function setHasAlerts($has_alerts)
    {
        $this->container['has_alerts'] = $has_alerts;

        return $this;
    }

    /**
     * Gets success
     *
     * @return bool
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool $success success
     *
     * @return $this
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets supplier_id
     *
     * @return string
     */
    public function getSupplierId()
    {
        return $this->container['supplier_id'];
    }

    /**
     * Sets supplier_id
     *
     * @param string $supplier_id supplier_id
     *
     * @return $this
     */
    public function setSupplierId($supplier_id)
    {
        $this->container['supplier_id'] = $supplier_id;

        return $this;
    }

    /**
     * Gets supplier_original_id
     *
     * @return string
     */
    public function getSupplierOriginalId()
    {
        return $this->container['supplier_original_id'];
    }

    /**
     * Sets supplier_original_id
     *
     * @param string $supplier_original_id supplier_original_id
     *
     * @return $this
     */
    public function setSupplierOriginalId($supplier_original_id)
    {
        $this->container['supplier_original_id'] = $supplier_original_id;

        return $this;
    }

    /**
     * Gets credits_incurred
     *
     * @return int
     */
    public function getCreditsIncurred()
    {
        return $this->container['credits_incurred'];
    }

    /**
     * Sets credits_incurred
     *
     * @param int $credits_incurred credits_incurred
     *
     * @return $this
     */
    public function setCreditsIncurred($credits_incurred)
    {
        $this->container['credits_incurred'] = $credits_incurred;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
