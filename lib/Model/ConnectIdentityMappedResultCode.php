<?php
/**
 * ConnectIdentityMappedResultCode
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ConnectIdentityMappedResultCode Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConnectIdentityMappedResultCode implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Connect.Identity.MappedResultCode';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'name' => 'string',
'description' => 'string',
'address' => '\Swagger\Client\Model\ConnectIdentityMatchValue',
'alert' => '\Swagger\Client\Model\ConnectIdentityMatchValue',
'date_of_birth' => '\Swagger\Client\Model\ConnectIdentityMatchValue',
'forename' => '\Swagger\Client\Model\ConnectIdentityMatchValue',
'surname' => '\Swagger\Client\Model\ConnectIdentityMatchValue',
'pass' => '\Swagger\Client\Model\ConnectIdentityMatchValue',
'comments' => '\Swagger\Client\Model\ConnectIdentityMappedResultCodeDetails[]',
'match' => '\Swagger\Client\Model\ConnectIdentityMappedResultCodeDetails[]',
'mis_match' => '\Swagger\Client\Model\ConnectIdentityMappedResultCodeDetails[]',
'sanctions' => '\Swagger\Client\Model\ConnectIdentityMappedSanctionMatch[]',
'peps' => '\Swagger\Client\Model\ConnectIdentityMappedPepMatch[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
'name' => null,
'description' => null,
'address' => null,
'alert' => null,
'date_of_birth' => null,
'forename' => null,
'surname' => null,
'pass' => null,
'comments' => null,
'match' => null,
'mis_match' => null,
'sanctions' => null,
'peps' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'description' => 'description',
'address' => 'address',
'alert' => 'alert',
'date_of_birth' => 'dateOfBirth',
'forename' => 'forename',
'surname' => 'surname',
'pass' => 'pass',
'comments' => 'comments',
'match' => 'match',
'mis_match' => 'misMatch',
'sanctions' => 'sanctions',
'peps' => 'peps'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'description' => 'setDescription',
'address' => 'setAddress',
'alert' => 'setAlert',
'date_of_birth' => 'setDateOfBirth',
'forename' => 'setForename',
'surname' => 'setSurname',
'pass' => 'setPass',
'comments' => 'setComments',
'match' => 'setMatch',
'mis_match' => 'setMisMatch',
'sanctions' => 'setSanctions',
'peps' => 'setPeps'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'description' => 'getDescription',
'address' => 'getAddress',
'alert' => 'getAlert',
'date_of_birth' => 'getDateOfBirth',
'forename' => 'getForename',
'surname' => 'getSurname',
'pass' => 'getPass',
'comments' => 'getComments',
'match' => 'getMatch',
'mis_match' => 'getMisMatch',
'sanctions' => 'getSanctions',
'peps' => 'getPeps'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['alert'] = isset($data['alert']) ? $data['alert'] : null;
        $this->container['date_of_birth'] = isset($data['date_of_birth']) ? $data['date_of_birth'] : null;
        $this->container['forename'] = isset($data['forename']) ? $data['forename'] : null;
        $this->container['surname'] = isset($data['surname']) ? $data['surname'] : null;
        $this->container['pass'] = isset($data['pass']) ? $data['pass'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['match'] = isset($data['match']) ? $data['match'] : null;
        $this->container['mis_match'] = isset($data['mis_match']) ? $data['mis_match'] : null;
        $this->container['sanctions'] = isset($data['sanctions']) ? $data['sanctions'] : null;
        $this->container['peps'] = isset($data['peps']) ? $data['peps'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\ConnectIdentityMatchValue
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\ConnectIdentityMatchValue $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets alert
     *
     * @return \Swagger\Client\Model\ConnectIdentityMatchValue
     */
    public function getAlert()
    {
        return $this->container['alert'];
    }

    /**
     * Sets alert
     *
     * @param \Swagger\Client\Model\ConnectIdentityMatchValue $alert alert
     *
     * @return $this
     */
    public function setAlert($alert)
    {
        $this->container['alert'] = $alert;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \Swagger\Client\Model\ConnectIdentityMatchValue
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \Swagger\Client\Model\ConnectIdentityMatchValue $date_of_birth date_of_birth
     *
     * @return $this
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets forename
     *
     * @return \Swagger\Client\Model\ConnectIdentityMatchValue
     */
    public function getForename()
    {
        return $this->container['forename'];
    }

    /**
     * Sets forename
     *
     * @param \Swagger\Client\Model\ConnectIdentityMatchValue $forename forename
     *
     * @return $this
     */
    public function setForename($forename)
    {
        $this->container['forename'] = $forename;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return \Swagger\Client\Model\ConnectIdentityMatchValue
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param \Swagger\Client\Model\ConnectIdentityMatchValue $surname surname
     *
     * @return $this
     */
    public function setSurname($surname)
    {
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets pass
     *
     * @return \Swagger\Client\Model\ConnectIdentityMatchValue
     */
    public function getPass()
    {
        return $this->container['pass'];
    }

    /**
     * Sets pass
     *
     * @param \Swagger\Client\Model\ConnectIdentityMatchValue $pass pass
     *
     * @return $this
     */
    public function setPass($pass)
    {
        $this->container['pass'] = $pass;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return \Swagger\Client\Model\ConnectIdentityMappedResultCodeDetails[]
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param \Swagger\Client\Model\ConnectIdentityMappedResultCodeDetails[] $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets match
     *
     * @return \Swagger\Client\Model\ConnectIdentityMappedResultCodeDetails[]
     */
    public function getMatch()
    {
        return $this->container['match'];
    }

    /**
     * Sets match
     *
     * @param \Swagger\Client\Model\ConnectIdentityMappedResultCodeDetails[] $match match
     *
     * @return $this
     */
    public function setMatch($match)
    {
        $this->container['match'] = $match;

        return $this;
    }

    /**
     * Gets mis_match
     *
     * @return \Swagger\Client\Model\ConnectIdentityMappedResultCodeDetails[]
     */
    public function getMisMatch()
    {
        return $this->container['mis_match'];
    }

    /**
     * Sets mis_match
     *
     * @param \Swagger\Client\Model\ConnectIdentityMappedResultCodeDetails[] $mis_match mis_match
     *
     * @return $this
     */
    public function setMisMatch($mis_match)
    {
        $this->container['mis_match'] = $mis_match;

        return $this;
    }

    /**
     * Gets sanctions
     *
     * @return \Swagger\Client\Model\ConnectIdentityMappedSanctionMatch[]
     */
    public function getSanctions()
    {
        return $this->container['sanctions'];
    }

    /**
     * Sets sanctions
     *
     * @param \Swagger\Client\Model\ConnectIdentityMappedSanctionMatch[] $sanctions sanctions
     *
     * @return $this
     */
    public function setSanctions($sanctions)
    {
        $this->container['sanctions'] = $sanctions;

        return $this;
    }

    /**
     * Gets peps
     *
     * @return \Swagger\Client\Model\ConnectIdentityMappedPepMatch[]
     */
    public function getPeps()
    {
        return $this->container['peps'];
    }

    /**
     * Sets peps
     *
     * @param \Swagger\Client\Model\ConnectIdentityMappedPepMatch[] $peps peps
     *
     * @return $this
     */
    public function setPeps($peps)
    {
        $this->container['peps'] = $peps;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
