<?php
/**
 * ConnectIdentityReportHistory
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ConnectIdentityReportHistory Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConnectIdentityReportHistory implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Connect.Identity.ReportHistory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => '\Swagger\Client\Model\ConnectIdentityReportAddress',
'address_match' => 'string',
'balance' => 'int',
'date' => '\DateTime',
'date_of_birth' => '\DateTime',
'start_date' => '\DateTime',
'end_date' => '\DateTime',
'joint_application' => 'bool',
'link_type' => 'string',
'name' => 'string',
'tp_opt_in' => 'bool',
'organisation_name' => 'string',
'organisation_type' => 'string',
'own_search' => 'bool',
'purpose' => 'string',
'reason' => 'string',
'reference' => 'string',
'supplier_reference' => 'string',
'subsequent_enquiry' => 'bool',
'term' => 'int',
'transient' => 'bool',
'credit_type' => 'string',
'unit_name' => 'string',
'user_name' => 'string',
'search_date' => '\DateTime',
'search_unit_name' => 'string',
'search_organisation_name' => 'string',
'search_organisation_type' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
'address_match' => null,
'balance' => 'int32',
'date' => 'date-time',
'date_of_birth' => 'date-time',
'start_date' => 'date-time',
'end_date' => 'date-time',
'joint_application' => null,
'link_type' => null,
'name' => null,
'tp_opt_in' => null,
'organisation_name' => null,
'organisation_type' => null,
'own_search' => null,
'purpose' => null,
'reason' => null,
'reference' => null,
'supplier_reference' => null,
'subsequent_enquiry' => null,
'term' => 'int32',
'transient' => null,
'credit_type' => null,
'unit_name' => null,
'user_name' => null,
'search_date' => 'date-time',
'search_unit_name' => null,
'search_organisation_name' => null,
'search_organisation_type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
'address_match' => 'addressMatch',
'balance' => 'balance',
'date' => 'date',
'date_of_birth' => 'dateOfBirth',
'start_date' => 'startDate',
'end_date' => 'endDate',
'joint_application' => 'jointApplication',
'link_type' => 'linkType',
'name' => 'name',
'tp_opt_in' => 'tpOptIn',
'organisation_name' => 'organisationName',
'organisation_type' => 'organisationType',
'own_search' => 'ownSearch',
'purpose' => 'purpose',
'reason' => 'reason',
'reference' => 'reference',
'supplier_reference' => 'supplierReference',
'subsequent_enquiry' => 'subsequentEnquiry',
'term' => 'term',
'transient' => 'transient',
'credit_type' => 'creditType',
'unit_name' => 'unitName',
'user_name' => 'userName',
'search_date' => 'searchDate',
'search_unit_name' => 'searchUnitName',
'search_organisation_name' => 'searchOrganisationName',
'search_organisation_type' => 'searchOrganisationType'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
'address_match' => 'setAddressMatch',
'balance' => 'setBalance',
'date' => 'setDate',
'date_of_birth' => 'setDateOfBirth',
'start_date' => 'setStartDate',
'end_date' => 'setEndDate',
'joint_application' => 'setJointApplication',
'link_type' => 'setLinkType',
'name' => 'setName',
'tp_opt_in' => 'setTpOptIn',
'organisation_name' => 'setOrganisationName',
'organisation_type' => 'setOrganisationType',
'own_search' => 'setOwnSearch',
'purpose' => 'setPurpose',
'reason' => 'setReason',
'reference' => 'setReference',
'supplier_reference' => 'setSupplierReference',
'subsequent_enquiry' => 'setSubsequentEnquiry',
'term' => 'setTerm',
'transient' => 'setTransient',
'credit_type' => 'setCreditType',
'unit_name' => 'setUnitName',
'user_name' => 'setUserName',
'search_date' => 'setSearchDate',
'search_unit_name' => 'setSearchUnitName',
'search_organisation_name' => 'setSearchOrganisationName',
'search_organisation_type' => 'setSearchOrganisationType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
'address_match' => 'getAddressMatch',
'balance' => 'getBalance',
'date' => 'getDate',
'date_of_birth' => 'getDateOfBirth',
'start_date' => 'getStartDate',
'end_date' => 'getEndDate',
'joint_application' => 'getJointApplication',
'link_type' => 'getLinkType',
'name' => 'getName',
'tp_opt_in' => 'getTpOptIn',
'organisation_name' => 'getOrganisationName',
'organisation_type' => 'getOrganisationType',
'own_search' => 'getOwnSearch',
'purpose' => 'getPurpose',
'reason' => 'getReason',
'reference' => 'getReference',
'supplier_reference' => 'getSupplierReference',
'subsequent_enquiry' => 'getSubsequentEnquiry',
'term' => 'getTerm',
'transient' => 'getTransient',
'credit_type' => 'getCreditType',
'unit_name' => 'getUnitName',
'user_name' => 'getUserName',
'search_date' => 'getSearchDate',
'search_unit_name' => 'getSearchUnitName',
'search_organisation_name' => 'getSearchOrganisationName',
'search_organisation_type' => 'getSearchOrganisationType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['address_match'] = isset($data['address_match']) ? $data['address_match'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['date_of_birth'] = isset($data['date_of_birth']) ? $data['date_of_birth'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['joint_application'] = isset($data['joint_application']) ? $data['joint_application'] : null;
        $this->container['link_type'] = isset($data['link_type']) ? $data['link_type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['tp_opt_in'] = isset($data['tp_opt_in']) ? $data['tp_opt_in'] : null;
        $this->container['organisation_name'] = isset($data['organisation_name']) ? $data['organisation_name'] : null;
        $this->container['organisation_type'] = isset($data['organisation_type']) ? $data['organisation_type'] : null;
        $this->container['own_search'] = isset($data['own_search']) ? $data['own_search'] : null;
        $this->container['purpose'] = isset($data['purpose']) ? $data['purpose'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['supplier_reference'] = isset($data['supplier_reference']) ? $data['supplier_reference'] : null;
        $this->container['subsequent_enquiry'] = isset($data['subsequent_enquiry']) ? $data['subsequent_enquiry'] : null;
        $this->container['term'] = isset($data['term']) ? $data['term'] : null;
        $this->container['transient'] = isset($data['transient']) ? $data['transient'] : null;
        $this->container['credit_type'] = isset($data['credit_type']) ? $data['credit_type'] : null;
        $this->container['unit_name'] = isset($data['unit_name']) ? $data['unit_name'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['search_date'] = isset($data['search_date']) ? $data['search_date'] : null;
        $this->container['search_unit_name'] = isset($data['search_unit_name']) ? $data['search_unit_name'] : null;
        $this->container['search_organisation_name'] = isset($data['search_organisation_name']) ? $data['search_organisation_name'] : null;
        $this->container['search_organisation_type'] = isset($data['search_organisation_type']) ? $data['search_organisation_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\ConnectIdentityReportAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\ConnectIdentityReportAddress $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets address_match
     *
     * @return string
     */
    public function getAddressMatch()
    {
        return $this->container['address_match'];
    }

    /**
     * Sets address_match
     *
     * @param string $address_match address_match
     *
     * @return $this
     */
    public function setAddressMatch($address_match)
    {
        $this->container['address_match'] = $address_match;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return int
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param int $balance balance
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \DateTime
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime $date_of_birth date_of_birth
     *
     * @return $this
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets joint_application
     *
     * @return bool
     */
    public function getJointApplication()
    {
        return $this->container['joint_application'];
    }

    /**
     * Sets joint_application
     *
     * @param bool $joint_application joint_application
     *
     * @return $this
     */
    public function setJointApplication($joint_application)
    {
        $this->container['joint_application'] = $joint_application;

        return $this;
    }

    /**
     * Gets link_type
     *
     * @return string
     */
    public function getLinkType()
    {
        return $this->container['link_type'];
    }

    /**
     * Sets link_type
     *
     * @param string $link_type link_type
     *
     * @return $this
     */
    public function setLinkType($link_type)
    {
        $this->container['link_type'] = $link_type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets tp_opt_in
     *
     * @return bool
     */
    public function getTpOptIn()
    {
        return $this->container['tp_opt_in'];
    }

    /**
     * Sets tp_opt_in
     *
     * @param bool $tp_opt_in tp_opt_in
     *
     * @return $this
     */
    public function setTpOptIn($tp_opt_in)
    {
        $this->container['tp_opt_in'] = $tp_opt_in;

        return $this;
    }

    /**
     * Gets organisation_name
     *
     * @return string
     */
    public function getOrganisationName()
    {
        return $this->container['organisation_name'];
    }

    /**
     * Sets organisation_name
     *
     * @param string $organisation_name organisation_name
     *
     * @return $this
     */
    public function setOrganisationName($organisation_name)
    {
        $this->container['organisation_name'] = $organisation_name;

        return $this;
    }

    /**
     * Gets organisation_type
     *
     * @return string
     */
    public function getOrganisationType()
    {
        return $this->container['organisation_type'];
    }

    /**
     * Sets organisation_type
     *
     * @param string $organisation_type organisation_type
     *
     * @return $this
     */
    public function setOrganisationType($organisation_type)
    {
        $this->container['organisation_type'] = $organisation_type;

        return $this;
    }

    /**
     * Gets own_search
     *
     * @return bool
     */
    public function getOwnSearch()
    {
        return $this->container['own_search'];
    }

    /**
     * Sets own_search
     *
     * @param bool $own_search own_search
     *
     * @return $this
     */
    public function setOwnSearch($own_search)
    {
        $this->container['own_search'] = $own_search;

        return $this;
    }

    /**
     * Gets purpose
     *
     * @return string
     */
    public function getPurpose()
    {
        return $this->container['purpose'];
    }

    /**
     * Sets purpose
     *
     * @param string $purpose purpose
     *
     * @return $this
     */
    public function setPurpose($purpose)
    {
        $this->container['purpose'] = $purpose;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets supplier_reference
     *
     * @return string
     */
    public function getSupplierReference()
    {
        return $this->container['supplier_reference'];
    }

    /**
     * Sets supplier_reference
     *
     * @param string $supplier_reference supplier_reference
     *
     * @return $this
     */
    public function setSupplierReference($supplier_reference)
    {
        $this->container['supplier_reference'] = $supplier_reference;

        return $this;
    }

    /**
     * Gets subsequent_enquiry
     *
     * @return bool
     */
    public function getSubsequentEnquiry()
    {
        return $this->container['subsequent_enquiry'];
    }

    /**
     * Sets subsequent_enquiry
     *
     * @param bool $subsequent_enquiry subsequent_enquiry
     *
     * @return $this
     */
    public function setSubsequentEnquiry($subsequent_enquiry)
    {
        $this->container['subsequent_enquiry'] = $subsequent_enquiry;

        return $this;
    }

    /**
     * Gets term
     *
     * @return int
     */
    public function getTerm()
    {
        return $this->container['term'];
    }

    /**
     * Sets term
     *
     * @param int $term term
     *
     * @return $this
     */
    public function setTerm($term)
    {
        $this->container['term'] = $term;

        return $this;
    }

    /**
     * Gets transient
     *
     * @return bool
     */
    public function getTransient()
    {
        return $this->container['transient'];
    }

    /**
     * Sets transient
     *
     * @param bool $transient transient
     *
     * @return $this
     */
    public function setTransient($transient)
    {
        $this->container['transient'] = $transient;

        return $this;
    }

    /**
     * Gets credit_type
     *
     * @return string
     */
    public function getCreditType()
    {
        return $this->container['credit_type'];
    }

    /**
     * Sets credit_type
     *
     * @param string $credit_type credit_type
     *
     * @return $this
     */
    public function setCreditType($credit_type)
    {
        $this->container['credit_type'] = $credit_type;

        return $this;
    }

    /**
     * Gets unit_name
     *
     * @return string
     */
    public function getUnitName()
    {
        return $this->container['unit_name'];
    }

    /**
     * Sets unit_name
     *
     * @param string $unit_name unit_name
     *
     * @return $this
     */
    public function setUnitName($unit_name)
    {
        $this->container['unit_name'] = $unit_name;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name user_name
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets search_date
     *
     * @return \DateTime
     */
    public function getSearchDate()
    {
        return $this->container['search_date'];
    }

    /**
     * Sets search_date
     *
     * @param \DateTime $search_date search_date
     *
     * @return $this
     */
    public function setSearchDate($search_date)
    {
        $this->container['search_date'] = $search_date;

        return $this;
    }

    /**
     * Gets search_unit_name
     *
     * @return string
     */
    public function getSearchUnitName()
    {
        return $this->container['search_unit_name'];
    }

    /**
     * Sets search_unit_name
     *
     * @param string $search_unit_name search_unit_name
     *
     * @return $this
     */
    public function setSearchUnitName($search_unit_name)
    {
        $this->container['search_unit_name'] = $search_unit_name;

        return $this;
    }

    /**
     * Gets search_organisation_name
     *
     * @return string
     */
    public function getSearchOrganisationName()
    {
        return $this->container['search_organisation_name'];
    }

    /**
     * Sets search_organisation_name
     *
     * @param string $search_organisation_name search_organisation_name
     *
     * @return $this
     */
    public function setSearchOrganisationName($search_organisation_name)
    {
        $this->container['search_organisation_name'] = $search_organisation_name;

        return $this;
    }

    /**
     * Gets search_organisation_type
     *
     * @return string
     */
    public function getSearchOrganisationType()
    {
        return $this->container['search_organisation_type'];
    }

    /**
     * Sets search_organisation_type
     *
     * @param string $search_organisation_type search_organisation_type
     *
     * @return $this
     */
    public function setSearchOrganisationType($search_organisation_type)
    {
        $this->container['search_organisation_type'] = $search_organisation_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
