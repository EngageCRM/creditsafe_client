<?php
/**
 * ConnectIdentityReportInsolvency
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ConnectIdentityReportInsolvency Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConnectIdentityReportInsolvency implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Connect.Identity.ReportInsolvency';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => '\Swagger\Client\Model\ConnectIdentityReportAddress',
'company_name' => 'string',
'court' => 'string',
'discharge_date' => '\DateTime',
'name' => 'string',
'order_date' => '\DateTime',
'order_type' => 'string',
'status' => 'string',
'trading_name' => 'string',
'line_of_business' => 'string',
'amount' => 'int',
'case_year' => 'int',
'case_ref' => 'string',
'date_of_birth' => '\DateTime',
'notices' => '\Swagger\Client\Model\ConnectIdentityReportNotice[]',
'restriction' => '\Swagger\Client\Model\ConnectIdentityInsolvencyRestriction'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
'company_name' => null,
'court' => null,
'discharge_date' => 'date-time',
'name' => null,
'order_date' => 'date-time',
'order_type' => null,
'status' => null,
'trading_name' => null,
'line_of_business' => null,
'amount' => 'int32',
'case_year' => 'int32',
'case_ref' => null,
'date_of_birth' => 'date-time',
'notices' => null,
'restriction' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
'company_name' => 'companyName',
'court' => 'court',
'discharge_date' => 'dischargeDate',
'name' => 'name',
'order_date' => 'orderDate',
'order_type' => 'orderType',
'status' => 'status',
'trading_name' => 'tradingName',
'line_of_business' => 'lineOfBusiness',
'amount' => 'amount',
'case_year' => 'caseYear',
'case_ref' => 'caseRef',
'date_of_birth' => 'dateOfBirth',
'notices' => 'notices',
'restriction' => 'restriction'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
'company_name' => 'setCompanyName',
'court' => 'setCourt',
'discharge_date' => 'setDischargeDate',
'name' => 'setName',
'order_date' => 'setOrderDate',
'order_type' => 'setOrderType',
'status' => 'setStatus',
'trading_name' => 'setTradingName',
'line_of_business' => 'setLineOfBusiness',
'amount' => 'setAmount',
'case_year' => 'setCaseYear',
'case_ref' => 'setCaseRef',
'date_of_birth' => 'setDateOfBirth',
'notices' => 'setNotices',
'restriction' => 'setRestriction'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
'company_name' => 'getCompanyName',
'court' => 'getCourt',
'discharge_date' => 'getDischargeDate',
'name' => 'getName',
'order_date' => 'getOrderDate',
'order_type' => 'getOrderType',
'status' => 'getStatus',
'trading_name' => 'getTradingName',
'line_of_business' => 'getLineOfBusiness',
'amount' => 'getAmount',
'case_year' => 'getCaseYear',
'case_ref' => 'getCaseRef',
'date_of_birth' => 'getDateOfBirth',
'notices' => 'getNotices',
'restriction' => 'getRestriction'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['court'] = isset($data['court']) ? $data['court'] : null;
        $this->container['discharge_date'] = isset($data['discharge_date']) ? $data['discharge_date'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['order_date'] = isset($data['order_date']) ? $data['order_date'] : null;
        $this->container['order_type'] = isset($data['order_type']) ? $data['order_type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['trading_name'] = isset($data['trading_name']) ? $data['trading_name'] : null;
        $this->container['line_of_business'] = isset($data['line_of_business']) ? $data['line_of_business'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['case_year'] = isset($data['case_year']) ? $data['case_year'] : null;
        $this->container['case_ref'] = isset($data['case_ref']) ? $data['case_ref'] : null;
        $this->container['date_of_birth'] = isset($data['date_of_birth']) ? $data['date_of_birth'] : null;
        $this->container['notices'] = isset($data['notices']) ? $data['notices'] : null;
        $this->container['restriction'] = isset($data['restriction']) ? $data['restriction'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\ConnectIdentityReportAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\ConnectIdentityReportAddress $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name company_name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets court
     *
     * @return string
     */
    public function getCourt()
    {
        return $this->container['court'];
    }

    /**
     * Sets court
     *
     * @param string $court court
     *
     * @return $this
     */
    public function setCourt($court)
    {
        $this->container['court'] = $court;

        return $this;
    }

    /**
     * Gets discharge_date
     *
     * @return \DateTime
     */
    public function getDischargeDate()
    {
        return $this->container['discharge_date'];
    }

    /**
     * Sets discharge_date
     *
     * @param \DateTime $discharge_date discharge_date
     *
     * @return $this
     */
    public function setDischargeDate($discharge_date)
    {
        $this->container['discharge_date'] = $discharge_date;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param \DateTime $order_date order_date
     *
     * @return $this
     */
    public function setOrderDate($order_date)
    {
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets order_type
     *
     * @return string
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     *
     * @param string $order_type order_type
     *
     * @return $this
     */
    public function setOrderType($order_type)
    {
        $this->container['order_type'] = $order_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets trading_name
     *
     * @return string
     */
    public function getTradingName()
    {
        return $this->container['trading_name'];
    }

    /**
     * Sets trading_name
     *
     * @param string $trading_name trading_name
     *
     * @return $this
     */
    public function setTradingName($trading_name)
    {
        $this->container['trading_name'] = $trading_name;

        return $this;
    }

    /**
     * Gets line_of_business
     *
     * @return string
     */
    public function getLineOfBusiness()
    {
        return $this->container['line_of_business'];
    }

    /**
     * Sets line_of_business
     *
     * @param string $line_of_business line_of_business
     *
     * @return $this
     */
    public function setLineOfBusiness($line_of_business)
    {
        $this->container['line_of_business'] = $line_of_business;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets case_year
     *
     * @return int
     */
    public function getCaseYear()
    {
        return $this->container['case_year'];
    }

    /**
     * Sets case_year
     *
     * @param int $case_year case_year
     *
     * @return $this
     */
    public function setCaseYear($case_year)
    {
        $this->container['case_year'] = $case_year;

        return $this;
    }

    /**
     * Gets case_ref
     *
     * @return string
     */
    public function getCaseRef()
    {
        return $this->container['case_ref'];
    }

    /**
     * Sets case_ref
     *
     * @param string $case_ref case_ref
     *
     * @return $this
     */
    public function setCaseRef($case_ref)
    {
        $this->container['case_ref'] = $case_ref;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \DateTime
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime $date_of_birth date_of_birth
     *
     * @return $this
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets notices
     *
     * @return \Swagger\Client\Model\ConnectIdentityReportNotice[]
     */
    public function getNotices()
    {
        return $this->container['notices'];
    }

    /**
     * Sets notices
     *
     * @param \Swagger\Client\Model\ConnectIdentityReportNotice[] $notices notices
     *
     * @return $this
     */
    public function setNotices($notices)
    {
        $this->container['notices'] = $notices;

        return $this;
    }

    /**
     * Gets restriction
     *
     * @return \Swagger\Client\Model\ConnectIdentityInsolvencyRestriction
     */
    public function getRestriction()
    {
        return $this->container['restriction'];
    }

    /**
     * Sets restriction
     *
     * @param \Swagger\Client\Model\ConnectIdentityInsolvencyRestriction $restriction restriction
     *
     * @return $this
     */
    public function setRestriction($restriction)
    {
        $this->container['restriction'] = $restriction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
