<?php
/**
 * ConnectIdentityShareAccountDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ConnectIdentityShareAccountDetails Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConnectIdentityShareAccountDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Connect.Identity.ShareAccountDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_number' => 'string',
'account_suffix' => 'int',
'joint' => 'bool',
'status' => 'string',
'date_updated' => '\DateTime',
'currency_code' => 'string',
'balance' => 'int',
'limit' => 'int',
'opening_balance' => 'int',
'arrangement_start_date' => '\DateTime',
'arrangement_end_date' => '\DateTime',
'payment_start_date' => '\DateTime',
'account_start_date' => '\DateTime',
'account_end_date' => '\DateTime',
'regular_payment' => 'int',
'expected_payment' => 'int',
'actual_payment' => 'int',
'repayment_period' => 'int',
'lump_payment' => 'int',
'penalty_interest_amount' => 'int',
'promotional_rate' => 'bool',
'minimum_payment' => 'bool',
'statement_balance' => 'int',
'type_code' => 'string',
'type' => 'string',
'group_id' => 'int',
'repayment_frequency_code' => 'string',
'repayment_frequency' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_number' => null,
'account_suffix' => 'int32',
'joint' => null,
'status' => null,
'date_updated' => 'date-time',
'currency_code' => null,
'balance' => 'int32',
'limit' => 'int32',
'opening_balance' => 'int32',
'arrangement_start_date' => 'date-time',
'arrangement_end_date' => 'date-time',
'payment_start_date' => 'date-time',
'account_start_date' => 'date-time',
'account_end_date' => 'date-time',
'regular_payment' => 'int32',
'expected_payment' => 'int32',
'actual_payment' => 'int32',
'repayment_period' => 'int32',
'lump_payment' => 'int32',
'penalty_interest_amount' => 'int32',
'promotional_rate' => null,
'minimum_payment' => null,
'statement_balance' => 'int32',
'type_code' => null,
'type' => null,
'group_id' => 'int32',
'repayment_frequency_code' => null,
'repayment_frequency' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_number' => 'accountNumber',
'account_suffix' => 'accountSuffix',
'joint' => 'joint',
'status' => 'status',
'date_updated' => 'dateUpdated',
'currency_code' => 'currencyCode',
'balance' => 'balance',
'limit' => 'limit',
'opening_balance' => 'openingBalance',
'arrangement_start_date' => 'arrangementStartDate',
'arrangement_end_date' => 'arrangementEndDate',
'payment_start_date' => 'paymentStartDate',
'account_start_date' => 'accountStartDate',
'account_end_date' => 'accountEndDate',
'regular_payment' => 'regularPayment',
'expected_payment' => 'expectedPayment',
'actual_payment' => 'actualPayment',
'repayment_period' => 'repaymentPeriod',
'lump_payment' => 'lumpPayment',
'penalty_interest_amount' => 'penaltyInterestAmount',
'promotional_rate' => 'promotionalRate',
'minimum_payment' => 'minimumPayment',
'statement_balance' => 'statementBalance',
'type_code' => 'typeCode',
'type' => 'type',
'group_id' => 'groupId',
'repayment_frequency_code' => 'repaymentFrequencyCode',
'repayment_frequency' => 'repaymentFrequency'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_number' => 'setAccountNumber',
'account_suffix' => 'setAccountSuffix',
'joint' => 'setJoint',
'status' => 'setStatus',
'date_updated' => 'setDateUpdated',
'currency_code' => 'setCurrencyCode',
'balance' => 'setBalance',
'limit' => 'setLimit',
'opening_balance' => 'setOpeningBalance',
'arrangement_start_date' => 'setArrangementStartDate',
'arrangement_end_date' => 'setArrangementEndDate',
'payment_start_date' => 'setPaymentStartDate',
'account_start_date' => 'setAccountStartDate',
'account_end_date' => 'setAccountEndDate',
'regular_payment' => 'setRegularPayment',
'expected_payment' => 'setExpectedPayment',
'actual_payment' => 'setActualPayment',
'repayment_period' => 'setRepaymentPeriod',
'lump_payment' => 'setLumpPayment',
'penalty_interest_amount' => 'setPenaltyInterestAmount',
'promotional_rate' => 'setPromotionalRate',
'minimum_payment' => 'setMinimumPayment',
'statement_balance' => 'setStatementBalance',
'type_code' => 'setTypeCode',
'type' => 'setType',
'group_id' => 'setGroupId',
'repayment_frequency_code' => 'setRepaymentFrequencyCode',
'repayment_frequency' => 'setRepaymentFrequency'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_number' => 'getAccountNumber',
'account_suffix' => 'getAccountSuffix',
'joint' => 'getJoint',
'status' => 'getStatus',
'date_updated' => 'getDateUpdated',
'currency_code' => 'getCurrencyCode',
'balance' => 'getBalance',
'limit' => 'getLimit',
'opening_balance' => 'getOpeningBalance',
'arrangement_start_date' => 'getArrangementStartDate',
'arrangement_end_date' => 'getArrangementEndDate',
'payment_start_date' => 'getPaymentStartDate',
'account_start_date' => 'getAccountStartDate',
'account_end_date' => 'getAccountEndDate',
'regular_payment' => 'getRegularPayment',
'expected_payment' => 'getExpectedPayment',
'actual_payment' => 'getActualPayment',
'repayment_period' => 'getRepaymentPeriod',
'lump_payment' => 'getLumpPayment',
'penalty_interest_amount' => 'getPenaltyInterestAmount',
'promotional_rate' => 'getPromotionalRate',
'minimum_payment' => 'getMinimumPayment',
'statement_balance' => 'getStatementBalance',
'type_code' => 'getTypeCode',
'type' => 'getType',
'group_id' => 'getGroupId',
'repayment_frequency_code' => 'getRepaymentFrequencyCode',
'repayment_frequency' => 'getRepaymentFrequency'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['account_suffix'] = isset($data['account_suffix']) ? $data['account_suffix'] : null;
        $this->container['joint'] = isset($data['joint']) ? $data['joint'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['date_updated'] = isset($data['date_updated']) ? $data['date_updated'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
        $this->container['opening_balance'] = isset($data['opening_balance']) ? $data['opening_balance'] : null;
        $this->container['arrangement_start_date'] = isset($data['arrangement_start_date']) ? $data['arrangement_start_date'] : null;
        $this->container['arrangement_end_date'] = isset($data['arrangement_end_date']) ? $data['arrangement_end_date'] : null;
        $this->container['payment_start_date'] = isset($data['payment_start_date']) ? $data['payment_start_date'] : null;
        $this->container['account_start_date'] = isset($data['account_start_date']) ? $data['account_start_date'] : null;
        $this->container['account_end_date'] = isset($data['account_end_date']) ? $data['account_end_date'] : null;
        $this->container['regular_payment'] = isset($data['regular_payment']) ? $data['regular_payment'] : null;
        $this->container['expected_payment'] = isset($data['expected_payment']) ? $data['expected_payment'] : null;
        $this->container['actual_payment'] = isset($data['actual_payment']) ? $data['actual_payment'] : null;
        $this->container['repayment_period'] = isset($data['repayment_period']) ? $data['repayment_period'] : null;
        $this->container['lump_payment'] = isset($data['lump_payment']) ? $data['lump_payment'] : null;
        $this->container['penalty_interest_amount'] = isset($data['penalty_interest_amount']) ? $data['penalty_interest_amount'] : null;
        $this->container['promotional_rate'] = isset($data['promotional_rate']) ? $data['promotional_rate'] : null;
        $this->container['minimum_payment'] = isset($data['minimum_payment']) ? $data['minimum_payment'] : null;
        $this->container['statement_balance'] = isset($data['statement_balance']) ? $data['statement_balance'] : null;
        $this->container['type_code'] = isset($data['type_code']) ? $data['type_code'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['repayment_frequency_code'] = isset($data['repayment_frequency_code']) ? $data['repayment_frequency_code'] : null;
        $this->container['repayment_frequency'] = isset($data['repayment_frequency']) ? $data['repayment_frequency'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number account_number
     *
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets account_suffix
     *
     * @return int
     */
    public function getAccountSuffix()
    {
        return $this->container['account_suffix'];
    }

    /**
     * Sets account_suffix
     *
     * @param int $account_suffix account_suffix
     *
     * @return $this
     */
    public function setAccountSuffix($account_suffix)
    {
        $this->container['account_suffix'] = $account_suffix;

        return $this;
    }

    /**
     * Gets joint
     *
     * @return bool
     */
    public function getJoint()
    {
        return $this->container['joint'];
    }

    /**
     * Sets joint
     *
     * @param bool $joint joint
     *
     * @return $this
     */
    public function setJoint($joint)
    {
        $this->container['joint'] = $joint;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets date_updated
     *
     * @return \DateTime
     */
    public function getDateUpdated()
    {
        return $this->container['date_updated'];
    }

    /**
     * Sets date_updated
     *
     * @param \DateTime $date_updated date_updated
     *
     * @return $this
     */
    public function setDateUpdated($date_updated)
    {
        $this->container['date_updated'] = $date_updated;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return int
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param int $balance balance
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int $limit limit
     *
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets opening_balance
     *
     * @return int
     */
    public function getOpeningBalance()
    {
        return $this->container['opening_balance'];
    }

    /**
     * Sets opening_balance
     *
     * @param int $opening_balance opening_balance
     *
     * @return $this
     */
    public function setOpeningBalance($opening_balance)
    {
        $this->container['opening_balance'] = $opening_balance;

        return $this;
    }

    /**
     * Gets arrangement_start_date
     *
     * @return \DateTime
     */
    public function getArrangementStartDate()
    {
        return $this->container['arrangement_start_date'];
    }

    /**
     * Sets arrangement_start_date
     *
     * @param \DateTime $arrangement_start_date arrangement_start_date
     *
     * @return $this
     */
    public function setArrangementStartDate($arrangement_start_date)
    {
        $this->container['arrangement_start_date'] = $arrangement_start_date;

        return $this;
    }

    /**
     * Gets arrangement_end_date
     *
     * @return \DateTime
     */
    public function getArrangementEndDate()
    {
        return $this->container['arrangement_end_date'];
    }

    /**
     * Sets arrangement_end_date
     *
     * @param \DateTime $arrangement_end_date arrangement_end_date
     *
     * @return $this
     */
    public function setArrangementEndDate($arrangement_end_date)
    {
        $this->container['arrangement_end_date'] = $arrangement_end_date;

        return $this;
    }

    /**
     * Gets payment_start_date
     *
     * @return \DateTime
     */
    public function getPaymentStartDate()
    {
        return $this->container['payment_start_date'];
    }

    /**
     * Sets payment_start_date
     *
     * @param \DateTime $payment_start_date payment_start_date
     *
     * @return $this
     */
    public function setPaymentStartDate($payment_start_date)
    {
        $this->container['payment_start_date'] = $payment_start_date;

        return $this;
    }

    /**
     * Gets account_start_date
     *
     * @return \DateTime
     */
    public function getAccountStartDate()
    {
        return $this->container['account_start_date'];
    }

    /**
     * Sets account_start_date
     *
     * @param \DateTime $account_start_date account_start_date
     *
     * @return $this
     */
    public function setAccountStartDate($account_start_date)
    {
        $this->container['account_start_date'] = $account_start_date;

        return $this;
    }

    /**
     * Gets account_end_date
     *
     * @return \DateTime
     */
    public function getAccountEndDate()
    {
        return $this->container['account_end_date'];
    }

    /**
     * Sets account_end_date
     *
     * @param \DateTime $account_end_date account_end_date
     *
     * @return $this
     */
    public function setAccountEndDate($account_end_date)
    {
        $this->container['account_end_date'] = $account_end_date;

        return $this;
    }

    /**
     * Gets regular_payment
     *
     * @return int
     */
    public function getRegularPayment()
    {
        return $this->container['regular_payment'];
    }

    /**
     * Sets regular_payment
     *
     * @param int $regular_payment regular_payment
     *
     * @return $this
     */
    public function setRegularPayment($regular_payment)
    {
        $this->container['regular_payment'] = $regular_payment;

        return $this;
    }

    /**
     * Gets expected_payment
     *
     * @return int
     */
    public function getExpectedPayment()
    {
        return $this->container['expected_payment'];
    }

    /**
     * Sets expected_payment
     *
     * @param int $expected_payment expected_payment
     *
     * @return $this
     */
    public function setExpectedPayment($expected_payment)
    {
        $this->container['expected_payment'] = $expected_payment;

        return $this;
    }

    /**
     * Gets actual_payment
     *
     * @return int
     */
    public function getActualPayment()
    {
        return $this->container['actual_payment'];
    }

    /**
     * Sets actual_payment
     *
     * @param int $actual_payment actual_payment
     *
     * @return $this
     */
    public function setActualPayment($actual_payment)
    {
        $this->container['actual_payment'] = $actual_payment;

        return $this;
    }

    /**
     * Gets repayment_period
     *
     * @return int
     */
    public function getRepaymentPeriod()
    {
        return $this->container['repayment_period'];
    }

    /**
     * Sets repayment_period
     *
     * @param int $repayment_period repayment_period
     *
     * @return $this
     */
    public function setRepaymentPeriod($repayment_period)
    {
        $this->container['repayment_period'] = $repayment_period;

        return $this;
    }

    /**
     * Gets lump_payment
     *
     * @return int
     */
    public function getLumpPayment()
    {
        return $this->container['lump_payment'];
    }

    /**
     * Sets lump_payment
     *
     * @param int $lump_payment lump_payment
     *
     * @return $this
     */
    public function setLumpPayment($lump_payment)
    {
        $this->container['lump_payment'] = $lump_payment;

        return $this;
    }

    /**
     * Gets penalty_interest_amount
     *
     * @return int
     */
    public function getPenaltyInterestAmount()
    {
        return $this->container['penalty_interest_amount'];
    }

    /**
     * Sets penalty_interest_amount
     *
     * @param int $penalty_interest_amount penalty_interest_amount
     *
     * @return $this
     */
    public function setPenaltyInterestAmount($penalty_interest_amount)
    {
        $this->container['penalty_interest_amount'] = $penalty_interest_amount;

        return $this;
    }

    /**
     * Gets promotional_rate
     *
     * @return bool
     */
    public function getPromotionalRate()
    {
        return $this->container['promotional_rate'];
    }

    /**
     * Sets promotional_rate
     *
     * @param bool $promotional_rate promotional_rate
     *
     * @return $this
     */
    public function setPromotionalRate($promotional_rate)
    {
        $this->container['promotional_rate'] = $promotional_rate;

        return $this;
    }

    /**
     * Gets minimum_payment
     *
     * @return bool
     */
    public function getMinimumPayment()
    {
        return $this->container['minimum_payment'];
    }

    /**
     * Sets minimum_payment
     *
     * @param bool $minimum_payment minimum_payment
     *
     * @return $this
     */
    public function setMinimumPayment($minimum_payment)
    {
        $this->container['minimum_payment'] = $minimum_payment;

        return $this;
    }

    /**
     * Gets statement_balance
     *
     * @return int
     */
    public function getStatementBalance()
    {
        return $this->container['statement_balance'];
    }

    /**
     * Sets statement_balance
     *
     * @param int $statement_balance statement_balance
     *
     * @return $this
     */
    public function setStatementBalance($statement_balance)
    {
        $this->container['statement_balance'] = $statement_balance;

        return $this;
    }

    /**
     * Gets type_code
     *
     * @return string
     */
    public function getTypeCode()
    {
        return $this->container['type_code'];
    }

    /**
     * Sets type_code
     *
     * @param string $type_code type_code
     *
     * @return $this
     */
    public function setTypeCode($type_code)
    {
        $this->container['type_code'] = $type_code;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return int
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param int $group_id group_id
     *
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets repayment_frequency_code
     *
     * @return string
     */
    public function getRepaymentFrequencyCode()
    {
        return $this->container['repayment_frequency_code'];
    }

    /**
     * Sets repayment_frequency_code
     *
     * @param string $repayment_frequency_code repayment_frequency_code
     *
     * @return $this
     */
    public function setRepaymentFrequencyCode($repayment_frequency_code)
    {
        $this->container['repayment_frequency_code'] = $repayment_frequency_code;

        return $this;
    }

    /**
     * Gets repayment_frequency
     *
     * @return string
     */
    public function getRepaymentFrequency()
    {
        return $this->container['repayment_frequency'];
    }

    /**
     * Sets repayment_frequency
     *
     * @param string $repayment_frequency repayment_frequency
     *
     * @return $this
     */
    public function setRepaymentFrequency($repayment_frequency)
    {
        $this->container['repayment_frequency'] = $repayment_frequency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
