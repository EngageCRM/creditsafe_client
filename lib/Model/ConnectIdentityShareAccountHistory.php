<?php
/**
 * ConnectIdentityShareAccountHistory
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ConnectIdentityShareAccountHistory Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConnectIdentityShareAccountHistory implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Connect.Identity.ShareAccountHistory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'year_and_month' => 'string',
'balance' => 'int',
'limit' => 'int',
'status' => 'string',
'status_description' => 'string',
'payment_status' => 'string',
'payment_status_description' => 'string',
'statement_balance' => 'int',
'payment_amount' => 'int',
'cash_advance_count' => 'int',
'cash_advances_total' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'year_and_month' => null,
'balance' => 'int32',
'limit' => 'int32',
'status' => null,
'status_description' => null,
'payment_status' => null,
'payment_status_description' => null,
'statement_balance' => 'int32',
'payment_amount' => 'int32',
'cash_advance_count' => 'int32',
'cash_advances_total' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'year_and_month' => 'yearAndMonth',
'balance' => 'balance',
'limit' => 'limit',
'status' => 'status',
'status_description' => 'statusDescription',
'payment_status' => 'paymentStatus',
'payment_status_description' => 'paymentStatusDescription',
'statement_balance' => 'statementBalance',
'payment_amount' => 'paymentAmount',
'cash_advance_count' => 'cashAdvanceCount',
'cash_advances_total' => 'cashAdvancesTotal'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'year_and_month' => 'setYearAndMonth',
'balance' => 'setBalance',
'limit' => 'setLimit',
'status' => 'setStatus',
'status_description' => 'setStatusDescription',
'payment_status' => 'setPaymentStatus',
'payment_status_description' => 'setPaymentStatusDescription',
'statement_balance' => 'setStatementBalance',
'payment_amount' => 'setPaymentAmount',
'cash_advance_count' => 'setCashAdvanceCount',
'cash_advances_total' => 'setCashAdvancesTotal'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'year_and_month' => 'getYearAndMonth',
'balance' => 'getBalance',
'limit' => 'getLimit',
'status' => 'getStatus',
'status_description' => 'getStatusDescription',
'payment_status' => 'getPaymentStatus',
'payment_status_description' => 'getPaymentStatusDescription',
'statement_balance' => 'getStatementBalance',
'payment_amount' => 'getPaymentAmount',
'cash_advance_count' => 'getCashAdvanceCount',
'cash_advances_total' => 'getCashAdvancesTotal'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['year_and_month'] = isset($data['year_and_month']) ? $data['year_and_month'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_description'] = isset($data['status_description']) ? $data['status_description'] : null;
        $this->container['payment_status'] = isset($data['payment_status']) ? $data['payment_status'] : null;
        $this->container['payment_status_description'] = isset($data['payment_status_description']) ? $data['payment_status_description'] : null;
        $this->container['statement_balance'] = isset($data['statement_balance']) ? $data['statement_balance'] : null;
        $this->container['payment_amount'] = isset($data['payment_amount']) ? $data['payment_amount'] : null;
        $this->container['cash_advance_count'] = isset($data['cash_advance_count']) ? $data['cash_advance_count'] : null;
        $this->container['cash_advances_total'] = isset($data['cash_advances_total']) ? $data['cash_advances_total'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets year_and_month
     *
     * @return string
     */
    public function getYearAndMonth()
    {
        return $this->container['year_and_month'];
    }

    /**
     * Sets year_and_month
     *
     * @param string $year_and_month year_and_month
     *
     * @return $this
     */
    public function setYearAndMonth($year_and_month)
    {
        $this->container['year_and_month'] = $year_and_month;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return int
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param int $balance balance
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int $limit limit
     *
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_description
     *
     * @return string
     */
    public function getStatusDescription()
    {
        return $this->container['status_description'];
    }

    /**
     * Sets status_description
     *
     * @param string $status_description status_description
     *
     * @return $this
     */
    public function setStatusDescription($status_description)
    {
        $this->container['status_description'] = $status_description;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string $payment_status payment_status
     *
     * @return $this
     */
    public function setPaymentStatus($payment_status)
    {
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets payment_status_description
     *
     * @return string
     */
    public function getPaymentStatusDescription()
    {
        return $this->container['payment_status_description'];
    }

    /**
     * Sets payment_status_description
     *
     * @param string $payment_status_description payment_status_description
     *
     * @return $this
     */
    public function setPaymentStatusDescription($payment_status_description)
    {
        $this->container['payment_status_description'] = $payment_status_description;

        return $this;
    }

    /**
     * Gets statement_balance
     *
     * @return int
     */
    public function getStatementBalance()
    {
        return $this->container['statement_balance'];
    }

    /**
     * Sets statement_balance
     *
     * @param int $statement_balance statement_balance
     *
     * @return $this
     */
    public function setStatementBalance($statement_balance)
    {
        $this->container['statement_balance'] = $statement_balance;

        return $this;
    }

    /**
     * Gets payment_amount
     *
     * @return int
     */
    public function getPaymentAmount()
    {
        return $this->container['payment_amount'];
    }

    /**
     * Sets payment_amount
     *
     * @param int $payment_amount payment_amount
     *
     * @return $this
     */
    public function setPaymentAmount($payment_amount)
    {
        $this->container['payment_amount'] = $payment_amount;

        return $this;
    }

    /**
     * Gets cash_advance_count
     *
     * @return int
     */
    public function getCashAdvanceCount()
    {
        return $this->container['cash_advance_count'];
    }

    /**
     * Sets cash_advance_count
     *
     * @param int $cash_advance_count cash_advance_count
     *
     * @return $this
     */
    public function setCashAdvanceCount($cash_advance_count)
    {
        $this->container['cash_advance_count'] = $cash_advance_count;

        return $this;
    }

    /**
     * Gets cash_advances_total
     *
     * @return int
     */
    public function getCashAdvancesTotal()
    {
        return $this->container['cash_advances_total'];
    }

    /**
     * Sets cash_advances_total
     *
     * @param int $cash_advances_total cash_advances_total
     *
     * @return $this
     */
    public function setCashAdvancesTotal($cash_advances_total)
    {
        $this->container['cash_advances_total'] = $cash_advances_total;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
