<?php
/**
 * ConnectImagesCompanyImagesData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ConnectImagesCompanyImagesData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConnectImagesCompanyImagesData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Connect.Images.CompanyImages_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'image_id' => 'string',
'company' => '\Swagger\Client\Model\ConnectImagesCompanyImagesCompany',
'document' => '\Swagger\Client\Model\ConnectImagesCompanyImagesDocument',
'format' => 'string',
'source' => 'string',
'filing_date' => 'string',
'upload_date' => 'string',
'accounting_date' => 'string',
'language' => 'string',
'comments' => 'string',
'status' => 'string',
'local_properties' => '\Swagger\Client\Model\ConnectImagesCompanyImagesLocalProperties'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'image_id' => null,
'company' => null,
'document' => null,
'format' => null,
'source' => null,
'filing_date' => null,
'upload_date' => null,
'accounting_date' => null,
'language' => null,
'comments' => null,
'status' => null,
'local_properties' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'image_id' => 'imageId',
'company' => 'company',
'document' => 'document',
'format' => 'format',
'source' => 'source',
'filing_date' => 'filingDate',
'upload_date' => 'uploadDate',
'accounting_date' => 'accountingDate',
'language' => 'language',
'comments' => 'comments',
'status' => 'status',
'local_properties' => 'localProperties'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'image_id' => 'setImageId',
'company' => 'setCompany',
'document' => 'setDocument',
'format' => 'setFormat',
'source' => 'setSource',
'filing_date' => 'setFilingDate',
'upload_date' => 'setUploadDate',
'accounting_date' => 'setAccountingDate',
'language' => 'setLanguage',
'comments' => 'setComments',
'status' => 'setStatus',
'local_properties' => 'setLocalProperties'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'image_id' => 'getImageId',
'company' => 'getCompany',
'document' => 'getDocument',
'format' => 'getFormat',
'source' => 'getSource',
'filing_date' => 'getFilingDate',
'upload_date' => 'getUploadDate',
'accounting_date' => 'getAccountingDate',
'language' => 'getLanguage',
'comments' => 'getComments',
'status' => 'getStatus',
'local_properties' => 'getLocalProperties'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['image_id'] = isset($data['image_id']) ? $data['image_id'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['document'] = isset($data['document']) ? $data['document'] : null;
        $this->container['format'] = isset($data['format']) ? $data['format'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['filing_date'] = isset($data['filing_date']) ? $data['filing_date'] : null;
        $this->container['upload_date'] = isset($data['upload_date']) ? $data['upload_date'] : null;
        $this->container['accounting_date'] = isset($data['accounting_date']) ? $data['accounting_date'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['local_properties'] = isset($data['local_properties']) ? $data['local_properties'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets image_id
     *
     * @return string
     */
    public function getImageId()
    {
        return $this->container['image_id'];
    }

    /**
     * Sets image_id
     *
     * @param string $image_id image_id
     *
     * @return $this
     */
    public function setImageId($image_id)
    {
        $this->container['image_id'] = $image_id;

        return $this;
    }

    /**
     * Gets company
     *
     * @return \Swagger\Client\Model\ConnectImagesCompanyImagesCompany
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param \Swagger\Client\Model\ConnectImagesCompanyImagesCompany $company company
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets document
     *
     * @return \Swagger\Client\Model\ConnectImagesCompanyImagesDocument
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param \Swagger\Client\Model\ConnectImagesCompanyImagesDocument $document document
     *
     * @return $this
     */
    public function setDocument($document)
    {
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string $format format
     *
     * @return $this
     */
    public function setFormat($format)
    {
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets filing_date
     *
     * @return string
     */
    public function getFilingDate()
    {
        return $this->container['filing_date'];
    }

    /**
     * Sets filing_date
     *
     * @param string $filing_date filing_date
     *
     * @return $this
     */
    public function setFilingDate($filing_date)
    {
        $this->container['filing_date'] = $filing_date;

        return $this;
    }

    /**
     * Gets upload_date
     *
     * @return string
     */
    public function getUploadDate()
    {
        return $this->container['upload_date'];
    }

    /**
     * Sets upload_date
     *
     * @param string $upload_date upload_date
     *
     * @return $this
     */
    public function setUploadDate($upload_date)
    {
        $this->container['upload_date'] = $upload_date;

        return $this;
    }

    /**
     * Gets accounting_date
     *
     * @return string
     */
    public function getAccountingDate()
    {
        return $this->container['accounting_date'];
    }

    /**
     * Sets accounting_date
     *
     * @param string $accounting_date accounting_date
     *
     * @return $this
     */
    public function setAccountingDate($accounting_date)
    {
        $this->container['accounting_date'] = $accounting_date;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets local_properties
     *
     * @return \Swagger\Client\Model\ConnectImagesCompanyImagesLocalProperties
     */
    public function getLocalProperties()
    {
        return $this->container['local_properties'];
    }

    /**
     * Sets local_properties
     *
     * @param \Swagger\Client\Model\ConnectImagesCompanyImagesLocalProperties $local_properties local_properties
     *
     * @return $this
     */
    public function setLocalProperties($local_properties)
    {
        $this->container['local_properties'] = $local_properties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
