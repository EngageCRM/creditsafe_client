<?php
/**
 * ConnectMonitoringCompaniesInAPortfolioData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ConnectMonitoringCompaniesInAPortfolioData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConnectMonitoringCompaniesInAPortfolioData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Connect.Monitoring.CompaniesInAPortfolio_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'safe_number' => 'string',
'name' => 'string',
'address' => 'string',
'country_code' => 'string',
'portfolio_id' => 'float',
'credit_limit' => 'float',
'date_last_event' => 'string',
'free_text' => 'string',
'personal_limit' => 'string',
'personal_reference' => 'string',
'rating_common' => 'string',
'rating_local' => 'string',
'company_status' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'safe_number' => null,
'name' => null,
'address' => null,
'country_code' => null,
'portfolio_id' => null,
'credit_limit' => null,
'date_last_event' => null,
'free_text' => null,
'personal_limit' => null,
'personal_reference' => null,
'rating_common' => null,
'rating_local' => null,
'company_status' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'safe_number' => 'safeNumber',
'name' => 'name',
'address' => 'address',
'country_code' => 'countryCode',
'portfolio_id' => 'portfolioId',
'credit_limit' => 'creditLimit',
'date_last_event' => 'dateLastEvent',
'free_text' => 'freeText',
'personal_limit' => 'personalLimit',
'personal_reference' => 'personalReference',
'rating_common' => 'ratingCommon',
'rating_local' => 'ratingLocal',
'company_status' => 'companyStatus'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'safe_number' => 'setSafeNumber',
'name' => 'setName',
'address' => 'setAddress',
'country_code' => 'setCountryCode',
'portfolio_id' => 'setPortfolioId',
'credit_limit' => 'setCreditLimit',
'date_last_event' => 'setDateLastEvent',
'free_text' => 'setFreeText',
'personal_limit' => 'setPersonalLimit',
'personal_reference' => 'setPersonalReference',
'rating_common' => 'setRatingCommon',
'rating_local' => 'setRatingLocal',
'company_status' => 'setCompanyStatus'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'safe_number' => 'getSafeNumber',
'name' => 'getName',
'address' => 'getAddress',
'country_code' => 'getCountryCode',
'portfolio_id' => 'getPortfolioId',
'credit_limit' => 'getCreditLimit',
'date_last_event' => 'getDateLastEvent',
'free_text' => 'getFreeText',
'personal_limit' => 'getPersonalLimit',
'personal_reference' => 'getPersonalReference',
'rating_common' => 'getRatingCommon',
'rating_local' => 'getRatingLocal',
'company_status' => 'getCompanyStatus'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['safe_number'] = isset($data['safe_number']) ? $data['safe_number'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['portfolio_id'] = isset($data['portfolio_id']) ? $data['portfolio_id'] : null;
        $this->container['credit_limit'] = isset($data['credit_limit']) ? $data['credit_limit'] : null;
        $this->container['date_last_event'] = isset($data['date_last_event']) ? $data['date_last_event'] : null;
        $this->container['free_text'] = isset($data['free_text']) ? $data['free_text'] : null;
        $this->container['personal_limit'] = isset($data['personal_limit']) ? $data['personal_limit'] : null;
        $this->container['personal_reference'] = isset($data['personal_reference']) ? $data['personal_reference'] : null;
        $this->container['rating_common'] = isset($data['rating_common']) ? $data['rating_common'] : null;
        $this->container['rating_local'] = isset($data['rating_local']) ? $data['rating_local'] : null;
        $this->container['company_status'] = isset($data['company_status']) ? $data['company_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The connectId of the company. A connectId is the primary Company identifier that is used to uniquely identify all companies across Creditsafe's Universe and Partner Network.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets safe_number
     *
     * @return string
     */
    public function getSafeNumber()
    {
        return $this->container['safe_number'];
    }

    /**
     * Sets safe_number
     *
     * @param string $safe_number The Safe Number (Creditsafe's identifier on all Companies owned in the Creditsafe Universe) of the company.
     *
     * @return $this
     */
    public function setSafeNumber($safe_number)
    {
        $this->container['safe_number'] = $safe_number;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the company .
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address The address of the company.
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code ISO/Alpha 2 format country code of the company.
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets portfolio_id
     *
     * @return float
     */
    public function getPortfolioId()
    {
        return $this->container['portfolio_id'];
    }

    /**
     * Sets portfolio_id
     *
     * @param float $portfolio_id The portfolio Id of the portfolio that contains the company.
     *
     * @return $this
     */
    public function setPortfolioId($portfolio_id)
    {
        $this->container['portfolio_id'] = $portfolio_id;

        return $this;
    }

    /**
     * Gets credit_limit
     *
     * @return float
     */
    public function getCreditLimit()
    {
        return $this->container['credit_limit'];
    }

    /**
     * Sets credit_limit
     *
     * @param float $credit_limit The credit limit of the company.
     *
     * @return $this
     */
    public function setCreditLimit($credit_limit)
    {
        $this->container['credit_limit'] = $credit_limit;

        return $this;
    }

    /**
     * Gets date_last_event
     *
     * @return string
     */
    public function getDateLastEvent()
    {
        return $this->container['date_last_event'];
    }

    /**
     * Sets date_last_event
     *
     * @param string $date_last_event The date of the most recent event the company has had.
     *
     * @return $this
     */
    public function setDateLastEvent($date_last_event)
    {
        $this->container['date_last_event'] = $date_last_event;

        return $this;
    }

    /**
     * Gets free_text
     *
     * @return string
     */
    public function getFreeText()
    {
        return $this->container['free_text'];
    }

    /**
     * Sets free_text
     *
     * @param string $free_text Field that can be used to add a free text note to when adding a company to a portfolio.
     *
     * @return $this
     */
    public function setFreeText($free_text)
    {
        $this->container['free_text'] = $free_text;

        return $this;
    }

    /**
     * Gets personal_limit
     *
     * @return string
     */
    public function getPersonalLimit()
    {
        return $this->container['personal_limit'];
    }

    /**
     * Sets personal_limit
     *
     * @param string $personal_limit Field that can be used to add a personal limit number against the company in a portfolio.
     *
     * @return $this
     */
    public function setPersonalLimit($personal_limit)
    {
        $this->container['personal_limit'] = $personal_limit;

        return $this;
    }

    /**
     * Gets personal_reference
     *
     * @return string
     */
    public function getPersonalReference()
    {
        return $this->container['personal_reference'];
    }

    /**
     * Sets personal_reference
     *
     * @param string $personal_reference Field that can be used to add a personal reference against the company in a portfolio.
     *
     * @return $this
     */
    public function setPersonalReference($personal_reference)
    {
        $this->container['personal_reference'] = $personal_reference;

        return $this;
    }

    /**
     * Gets rating_common
     *
     * @return string
     */
    public function getRatingCommon()
    {
        return $this->container['rating_common'];
    }

    /**
     * Sets rating_common
     *
     * @param string $rating_common The rating score band that the company is in.
     *
     * @return $this
     */
    public function setRatingCommon($rating_common)
    {
        $this->container['rating_common'] = $rating_common;

        return $this;
    }

    /**
     * Gets rating_local
     *
     * @return string
     */
    public function getRatingLocal()
    {
        return $this->container['rating_local'];
    }

    /**
     * Sets rating_local
     *
     * @param string $rating_local Country specific rating score.
     *
     * @return $this
     */
    public function setRatingLocal($rating_local)
    {
        $this->container['rating_local'] = $rating_local;

        return $this;
    }

    /**
     * Gets company_status
     *
     * @return string
     */
    public function getCompanyStatus()
    {
        return $this->container['company_status'];
    }

    /**
     * Sets company_status
     *
     * @param string $company_status The current status of the company
     *
     * @return $this
     */
    public function setCompanyStatus($company_status)
    {
        $this->container['company_status'] = $company_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
