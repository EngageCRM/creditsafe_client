<?php
/**
 * ConnectProtectAuditExportRequestDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ConnectProtectAuditExportRequestDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConnectProtectAuditExportRequestDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Connect.Protect.AuditExportRequestDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'file_type' => 'string',
'audit_type' => 'string',
'keyword_search' => 'string',
'created_at_or_after' => '\DateTime',
'created_at_or_before' => '\DateTime',
'payload' => '\Swagger\Client\Model\ConnectProtectAuditExportPayloadDto'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'file_type' => null,
'audit_type' => null,
'keyword_search' => null,
'created_at_or_after' => 'date-time',
'created_at_or_before' => 'date-time',
'payload' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'file_type' => 'fileType',
'audit_type' => 'auditType',
'keyword_search' => 'keywordSearch',
'created_at_or_after' => 'createdAtOrAfter',
'created_at_or_before' => 'createdAtOrBefore',
'payload' => 'payload'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'file_type' => 'setFileType',
'audit_type' => 'setAuditType',
'keyword_search' => 'setKeywordSearch',
'created_at_or_after' => 'setCreatedAtOrAfter',
'created_at_or_before' => 'setCreatedAtOrBefore',
'payload' => 'setPayload'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'file_type' => 'getFileType',
'audit_type' => 'getAuditType',
'keyword_search' => 'getKeywordSearch',
'created_at_or_after' => 'getCreatedAtOrAfter',
'created_at_or_before' => 'getCreatedAtOrBefore',
'payload' => 'getPayload'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FILE_TYPE_CSV = 'csv';
const AUDIT_TYPE_ALERTACCEPTED = 'alert.accepted';
const AUDIT_TYPE_ALERTREJECTED = 'alert.rejected';
const AUDIT_TYPE_ALERTRECEIVED = 'alert.received';
const AUDIT_TYPE_PROFILEADDED = 'profile.added';
const AUDIT_TYPE_PROFILECREATED = 'profile.created';
const AUDIT_TYPE_INVESTIGATIONACCEPTED = 'investigation.accepted';
const AUDIT_TYPE_INVESTIGATIONCREATED = 'investigation.created';
const AUDIT_TYPE_INVESTIGATIONFILE_DOWNLOADED = 'investigation.file_downloaded';
const AUDIT_TYPE_SCHEDULECREATED = 'schedule.created';
const AUDIT_TYPE_SCHEDULEREMOVED = 'schedule.removed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFileTypeAllowableValues()
    {
        return [
            self::FILE_TYPE_CSV,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuditTypeAllowableValues()
    {
        return [
            self::AUDIT_TYPE_ALERTACCEPTED,
self::AUDIT_TYPE_ALERTREJECTED,
self::AUDIT_TYPE_ALERTRECEIVED,
self::AUDIT_TYPE_PROFILEADDED,
self::AUDIT_TYPE_PROFILECREATED,
self::AUDIT_TYPE_INVESTIGATIONACCEPTED,
self::AUDIT_TYPE_INVESTIGATIONCREATED,
self::AUDIT_TYPE_INVESTIGATIONFILE_DOWNLOADED,
self::AUDIT_TYPE_SCHEDULECREATED,
self::AUDIT_TYPE_SCHEDULEREMOVED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['file_type'] = isset($data['file_type']) ? $data['file_type'] : null;
        $this->container['audit_type'] = isset($data['audit_type']) ? $data['audit_type'] : null;
        $this->container['keyword_search'] = isset($data['keyword_search']) ? $data['keyword_search'] : null;
        $this->container['created_at_or_after'] = isset($data['created_at_or_after']) ? $data['created_at_or_after'] : null;
        $this->container['created_at_or_before'] = isset($data['created_at_or_before']) ? $data['created_at_or_before'] : null;
        $this->container['payload'] = isset($data['payload']) ? $data['payload'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['file_type'] === null) {
            $invalidProperties[] = "'file_type' can't be null";
        }
        $allowedValues = $this->getFileTypeAllowableValues();
        if (!is_null($this->container['file_type']) && !in_array($this->container['file_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'file_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuditTypeAllowableValues();
        if (!is_null($this->container['audit_type']) && !in_array($this->container['audit_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'audit_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets file_type
     *
     * @return string
     */
    public function getFileType()
    {
        return $this->container['file_type'];
    }

    /**
     * Sets file_type
     *
     * @param string $file_type file_type
     *
     * @return $this
     */
    public function setFileType($file_type)
    {
        $allowedValues = $this->getFileTypeAllowableValues();
        if (!in_array($file_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'file_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['file_type'] = $file_type;

        return $this;
    }

    /**
     * Gets audit_type
     *
     * @return string
     */
    public function getAuditType()
    {
        return $this->container['audit_type'];
    }

    /**
     * Sets audit_type
     *
     * @param string $audit_type audit_type
     *
     * @return $this
     */
    public function setAuditType($audit_type)
    {
        $allowedValues = $this->getAuditTypeAllowableValues();
        if (!is_null($audit_type) && !in_array($audit_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'audit_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['audit_type'] = $audit_type;

        return $this;
    }

    /**
     * Gets keyword_search
     *
     * @return string
     */
    public function getKeywordSearch()
    {
        return $this->container['keyword_search'];
    }

    /**
     * Sets keyword_search
     *
     * @param string $keyword_search keyword_search
     *
     * @return $this
     */
    public function setKeywordSearch($keyword_search)
    {
        $this->container['keyword_search'] = $keyword_search;

        return $this;
    }

    /**
     * Gets created_at_or_after
     *
     * @return \DateTime
     */
    public function getCreatedAtOrAfter()
    {
        return $this->container['created_at_or_after'];
    }

    /**
     * Sets created_at_or_after
     *
     * @param \DateTime $created_at_or_after created_at_or_after
     *
     * @return $this
     */
    public function setCreatedAtOrAfter($created_at_or_after)
    {
        $this->container['created_at_or_after'] = $created_at_or_after;

        return $this;
    }

    /**
     * Gets created_at_or_before
     *
     * @return \DateTime
     */
    public function getCreatedAtOrBefore()
    {
        return $this->container['created_at_or_before'];
    }

    /**
     * Sets created_at_or_before
     *
     * @param \DateTime $created_at_or_before created_at_or_before
     *
     * @return $this
     */
    public function setCreatedAtOrBefore($created_at_or_before)
    {
        $this->container['created_at_or_before'] = $created_at_or_before;

        return $this;
    }

    /**
     * Gets payload
     *
     * @return \Swagger\Client\Model\ConnectProtectAuditExportPayloadDto
     */
    public function getPayload()
    {
        return $this->container['payload'];
    }

    /**
     * Sets payload
     *
     * @param \Swagger\Client\Model\ConnectProtectAuditExportPayloadDto $payload payload
     *
     * @return $this
     */
    public function setPayload($payload)
    {
        $this->container['payload'] = $payload;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
