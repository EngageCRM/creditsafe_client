<?php
/**
 * ConnectProtectRecord
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ConnectProtectRecord Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConnectProtectRecord implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Connect.Protect.Record';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'entity_id' => 'string',
'match_score' => 'int',
'source_date' => 'string',
'date_listed' => 'string',
'name' => 'string',
'full_name' => 'string',
'first_name' => 'string',
'middle_name' => 'string',
'last_name' => 'string',
'reason_listed' => 'string',
'entity_type' => 'string',
'date_of_birth' => 'string',
'generation' => 'string',
'gender' => 'string',
'occupation' => 'string',
'place_of_birth' => 'string',
'has_adverse_media' => 'bool',
'other_names' => 'string[]',
'addresses' => '\Swagger\Client\Model\ConnectProtectAddress[]',
'comments' => 'string[]',
'sources' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
'entity_id' => null,
'match_score' => 'int32',
'source_date' => null,
'date_listed' => null,
'name' => null,
'full_name' => null,
'first_name' => null,
'middle_name' => null,
'last_name' => null,
'reason_listed' => null,
'entity_type' => null,
'date_of_birth' => null,
'generation' => null,
'gender' => null,
'occupation' => null,
'place_of_birth' => null,
'has_adverse_media' => null,
'other_names' => null,
'addresses' => null,
'comments' => null,
'sources' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'entity_id' => 'entityId',
'match_score' => 'matchScore',
'source_date' => 'sourceDate',
'date_listed' => 'dateListed',
'name' => 'name',
'full_name' => 'fullName',
'first_name' => 'firstName',
'middle_name' => 'middleName',
'last_name' => 'lastName',
'reason_listed' => 'reasonListed',
'entity_type' => 'entityType',
'date_of_birth' => 'dateOfBirth',
'generation' => 'generation',
'gender' => 'gender',
'occupation' => 'occupation',
'place_of_birth' => 'placeOfBirth',
'has_adverse_media' => 'hasAdverseMedia',
'other_names' => 'otherNames',
'addresses' => 'addresses',
'comments' => 'comments',
'sources' => 'sources'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'entity_id' => 'setEntityId',
'match_score' => 'setMatchScore',
'source_date' => 'setSourceDate',
'date_listed' => 'setDateListed',
'name' => 'setName',
'full_name' => 'setFullName',
'first_name' => 'setFirstName',
'middle_name' => 'setMiddleName',
'last_name' => 'setLastName',
'reason_listed' => 'setReasonListed',
'entity_type' => 'setEntityType',
'date_of_birth' => 'setDateOfBirth',
'generation' => 'setGeneration',
'gender' => 'setGender',
'occupation' => 'setOccupation',
'place_of_birth' => 'setPlaceOfBirth',
'has_adverse_media' => 'setHasAdverseMedia',
'other_names' => 'setOtherNames',
'addresses' => 'setAddresses',
'comments' => 'setComments',
'sources' => 'setSources'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'entity_id' => 'getEntityId',
'match_score' => 'getMatchScore',
'source_date' => 'getSourceDate',
'date_listed' => 'getDateListed',
'name' => 'getName',
'full_name' => 'getFullName',
'first_name' => 'getFirstName',
'middle_name' => 'getMiddleName',
'last_name' => 'getLastName',
'reason_listed' => 'getReasonListed',
'entity_type' => 'getEntityType',
'date_of_birth' => 'getDateOfBirth',
'generation' => 'getGeneration',
'gender' => 'getGender',
'occupation' => 'getOccupation',
'place_of_birth' => 'getPlaceOfBirth',
'has_adverse_media' => 'getHasAdverseMedia',
'other_names' => 'getOtherNames',
'addresses' => 'getAddresses',
'comments' => 'getComments',
'sources' => 'getSources'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['entity_id'] = isset($data['entity_id']) ? $data['entity_id'] : null;
        $this->container['match_score'] = isset($data['match_score']) ? $data['match_score'] : null;
        $this->container['source_date'] = isset($data['source_date']) ? $data['source_date'] : null;
        $this->container['date_listed'] = isset($data['date_listed']) ? $data['date_listed'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['full_name'] = isset($data['full_name']) ? $data['full_name'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['middle_name'] = isset($data['middle_name']) ? $data['middle_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['reason_listed'] = isset($data['reason_listed']) ? $data['reason_listed'] : null;
        $this->container['entity_type'] = isset($data['entity_type']) ? $data['entity_type'] : null;
        $this->container['date_of_birth'] = isset($data['date_of_birth']) ? $data['date_of_birth'] : null;
        $this->container['generation'] = isset($data['generation']) ? $data['generation'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['occupation'] = isset($data['occupation']) ? $data['occupation'] : null;
        $this->container['place_of_birth'] = isset($data['place_of_birth']) ? $data['place_of_birth'] : null;
        $this->container['has_adverse_media'] = isset($data['has_adverse_media']) ? $data['has_adverse_media'] : null;
        $this->container['other_names'] = isset($data['other_names']) ? $data['other_names'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['sources'] = isset($data['sources']) ? $data['sources'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets entity_id
     *
     * @return string
     */
    public function getEntityId()
    {
        return $this->container['entity_id'];
    }

    /**
     * Sets entity_id
     *
     * @param string $entity_id entity_id
     *
     * @return $this
     */
    public function setEntityId($entity_id)
    {
        $this->container['entity_id'] = $entity_id;

        return $this;
    }

    /**
     * Gets match_score
     *
     * @return int
     */
    public function getMatchScore()
    {
        return $this->container['match_score'];
    }

    /**
     * Sets match_score
     *
     * @param int $match_score match_score
     *
     * @return $this
     */
    public function setMatchScore($match_score)
    {
        $this->container['match_score'] = $match_score;

        return $this;
    }

    /**
     * Gets source_date
     *
     * @return string
     */
    public function getSourceDate()
    {
        return $this->container['source_date'];
    }

    /**
     * Sets source_date
     *
     * @param string $source_date source_date
     *
     * @return $this
     */
    public function setSourceDate($source_date)
    {
        $this->container['source_date'] = $source_date;

        return $this;
    }

    /**
     * Gets date_listed
     *
     * @return string
     */
    public function getDateListed()
    {
        return $this->container['date_listed'];
    }

    /**
     * Sets date_listed
     *
     * @param string $date_listed date_listed
     *
     * @return $this
     */
    public function setDateListed($date_listed)
    {
        $this->container['date_listed'] = $date_listed;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string $full_name full_name
     *
     * @return $this
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string $middle_name middle_name
     *
     * @return $this
     */
    public function setMiddleName($middle_name)
    {
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets reason_listed
     *
     * @return string
     */
    public function getReasonListed()
    {
        return $this->container['reason_listed'];
    }

    /**
     * Sets reason_listed
     *
     * @param string $reason_listed reason_listed
     *
     * @return $this
     */
    public function setReasonListed($reason_listed)
    {
        $this->container['reason_listed'] = $reason_listed;

        return $this;
    }

    /**
     * Gets entity_type
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entity_type'];
    }

    /**
     * Sets entity_type
     *
     * @param string $entity_type entity_type
     *
     * @return $this
     */
    public function setEntityType($entity_type)
    {
        $this->container['entity_type'] = $entity_type;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return string
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param string $date_of_birth date_of_birth
     *
     * @return $this
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets generation
     *
     * @return string
     */
    public function getGeneration()
    {
        return $this->container['generation'];
    }

    /**
     * Sets generation
     *
     * @param string $generation generation
     *
     * @return $this
     */
    public function setGeneration($generation)
    {
        $this->container['generation'] = $generation;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets occupation
     *
     * @return string
     */
    public function getOccupation()
    {
        return $this->container['occupation'];
    }

    /**
     * Sets occupation
     *
     * @param string $occupation occupation
     *
     * @return $this
     */
    public function setOccupation($occupation)
    {
        $this->container['occupation'] = $occupation;

        return $this;
    }

    /**
     * Gets place_of_birth
     *
     * @return string
     */
    public function getPlaceOfBirth()
    {
        return $this->container['place_of_birth'];
    }

    /**
     * Sets place_of_birth
     *
     * @param string $place_of_birth place_of_birth
     *
     * @return $this
     */
    public function setPlaceOfBirth($place_of_birth)
    {
        $this->container['place_of_birth'] = $place_of_birth;

        return $this;
    }

    /**
     * Gets has_adverse_media
     *
     * @return bool
     */
    public function getHasAdverseMedia()
    {
        return $this->container['has_adverse_media'];
    }

    /**
     * Sets has_adverse_media
     *
     * @param bool $has_adverse_media has_adverse_media
     *
     * @return $this
     */
    public function setHasAdverseMedia($has_adverse_media)
    {
        $this->container['has_adverse_media'] = $has_adverse_media;

        return $this;
    }

    /**
     * Gets other_names
     *
     * @return string[]
     */
    public function getOtherNames()
    {
        return $this->container['other_names'];
    }

    /**
     * Sets other_names
     *
     * @param string[] $other_names other_names
     *
     * @return $this
     */
    public function setOtherNames($other_names)
    {
        $this->container['other_names'] = $other_names;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Swagger\Client\Model\ConnectProtectAddress[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Swagger\Client\Model\ConnectProtectAddress[] $addresses addresses
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string[]
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string[] $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets sources
     *
     * @return string[]
     */
    public function getSources()
    {
        return $this->container['sources'];
    }

    /**
     * Sets sources
     *
     * @param string[] $sources sources
     *
     * @return $this
     */
    public function setSources($sources)
    {
        $this->container['sources'] = $sources;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
