<?php
/**
 * CreditsafeGlobalDataCompanyData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreditsafeGlobalDataCompanyData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreditsafeGlobalDataCompanyData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Creditsafe.GlobalData.CompanyData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'country' => '\Swagger\Client\Model\CreditsafeGlobalDataCountryCode',
'safe_no' => 'string',
'id_type' => '\Swagger\Client\Model\CreditsafeGlobalDataReportsIdType',
'name' => 'string',
'type' => '\Swagger\Client\Model\CreditsafeGlobalDataCompanyType',
'office_type' => '\Swagger\Client\Model\CreditsafeGlobalDataOfficeType',
'status' => '\Swagger\Client\Model\CreditsafeGlobalDataCompanyStatus',
'reg_no' => 'string',
'vat_no' => 'OneOfCreditsafeGlobalDataCompanyDataVatNo',
'address' => '\Swagger\Client\Model\CreditsafeGlobalDataAddressData',
'activity' => '\Swagger\Client\Model\CreditsafeGlobalDataCompanyActivityClassification',
'legal_form' => 'string',
'additional_data' => '\Swagger\Client\Model\CreditsafeGlobalDataCompanyDataAdditionalData'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'country' => null,
'safe_no' => null,
'id_type' => null,
'name' => null,
'type' => null,
'office_type' => null,
'status' => null,
'reg_no' => null,
'vat_no' => null,
'address' => null,
'activity' => null,
'legal_form' => null,
'additional_data' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'country' => 'country',
'safe_no' => 'safeNo',
'id_type' => 'idType',
'name' => 'name',
'type' => 'type',
'office_type' => 'officeType',
'status' => 'status',
'reg_no' => 'regNo',
'vat_no' => 'vatNo',
'address' => 'address',
'activity' => 'activity',
'legal_form' => 'legalForm',
'additional_data' => 'additionalData'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'country' => 'setCountry',
'safe_no' => 'setSafeNo',
'id_type' => 'setIdType',
'name' => 'setName',
'type' => 'setType',
'office_type' => 'setOfficeType',
'status' => 'setStatus',
'reg_no' => 'setRegNo',
'vat_no' => 'setVatNo',
'address' => 'setAddress',
'activity' => 'setActivity',
'legal_form' => 'setLegalForm',
'additional_data' => 'setAdditionalData'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'country' => 'getCountry',
'safe_no' => 'getSafeNo',
'id_type' => 'getIdType',
'name' => 'getName',
'type' => 'getType',
'office_type' => 'getOfficeType',
'status' => 'getStatus',
'reg_no' => 'getRegNo',
'vat_no' => 'getVatNo',
'address' => 'getAddress',
'activity' => 'getActivity',
'legal_form' => 'getLegalForm',
'additional_data' => 'getAdditionalData'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['safe_no'] = isset($data['safe_no']) ? $data['safe_no'] : null;
        $this->container['id_type'] = isset($data['id_type']) ? $data['id_type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['office_type'] = isset($data['office_type']) ? $data['office_type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['reg_no'] = isset($data['reg_no']) ? $data['reg_no'] : null;
        $this->container['vat_no'] = isset($data['vat_no']) ? $data['vat_no'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['activity'] = isset($data['activity']) ? $data['activity'] : null;
        $this->container['legal_form'] = isset($data['legal_form']) ? $data['legal_form'] : null;
        $this->container['additional_data'] = isset($data['additional_data']) ? $data['additional_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets country
     *
     * @return \Swagger\Client\Model\CreditsafeGlobalDataCountryCode
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param \Swagger\Client\Model\CreditsafeGlobalDataCountryCode $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets safe_no
     *
     * @return string
     */
    public function getSafeNo()
    {
        return $this->container['safe_no'];
    }

    /**
     * Sets safe_no
     *
     * @param string $safe_no safe_no
     *
     * @return $this
     */
    public function setSafeNo($safe_no)
    {
        $this->container['safe_no'] = $safe_no;

        return $this;
    }

    /**
     * Gets id_type
     *
     * @return \Swagger\Client\Model\CreditsafeGlobalDataReportsIdType
     */
    public function getIdType()
    {
        return $this->container['id_type'];
    }

    /**
     * Sets id_type
     *
     * @param \Swagger\Client\Model\CreditsafeGlobalDataReportsIdType $id_type id_type
     *
     * @return $this
     */
    public function setIdType($id_type)
    {
        $this->container['id_type'] = $id_type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Swagger\Client\Model\CreditsafeGlobalDataCompanyType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Swagger\Client\Model\CreditsafeGlobalDataCompanyType $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets office_type
     *
     * @return \Swagger\Client\Model\CreditsafeGlobalDataOfficeType
     */
    public function getOfficeType()
    {
        return $this->container['office_type'];
    }

    /**
     * Sets office_type
     *
     * @param \Swagger\Client\Model\CreditsafeGlobalDataOfficeType $office_type office_type
     *
     * @return $this
     */
    public function setOfficeType($office_type)
    {
        $this->container['office_type'] = $office_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\CreditsafeGlobalDataCompanyStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\CreditsafeGlobalDataCompanyStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets reg_no
     *
     * @return string
     */
    public function getRegNo()
    {
        return $this->container['reg_no'];
    }

    /**
     * Sets reg_no
     *
     * @param string $reg_no reg_no
     *
     * @return $this
     */
    public function setRegNo($reg_no)
    {
        $this->container['reg_no'] = $reg_no;

        return $this;
    }

    /**
     * Gets vat_no
     *
     * @return OneOfCreditsafeGlobalDataCompanyDataVatNo
     */
    public function getVatNo()
    {
        return $this->container['vat_no'];
    }

    /**
     * Sets vat_no
     *
     * @param OneOfCreditsafeGlobalDataCompanyDataVatNo $vat_no vat_no
     *
     * @return $this
     */
    public function setVatNo($vat_no)
    {
        $this->container['vat_no'] = $vat_no;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\CreditsafeGlobalDataAddressData
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\CreditsafeGlobalDataAddressData $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets activity
     *
     * @return \Swagger\Client\Model\CreditsafeGlobalDataCompanyActivityClassification
     */
    public function getActivity()
    {
        return $this->container['activity'];
    }

    /**
     * Sets activity
     *
     * @param \Swagger\Client\Model\CreditsafeGlobalDataCompanyActivityClassification $activity activity
     *
     * @return $this
     */
    public function setActivity($activity)
    {
        $this->container['activity'] = $activity;

        return $this;
    }

    /**
     * Gets legal_form
     *
     * @return string
     */
    public function getLegalForm()
    {
        return $this->container['legal_form'];
    }

    /**
     * Sets legal_form
     *
     * @param string $legal_form legal_form
     *
     * @return $this
     */
    public function setLegalForm($legal_form)
    {
        $this->container['legal_form'] = $legal_form;

        return $this;
    }

    /**
     * Gets additional_data
     *
     * @return \Swagger\Client\Model\CreditsafeGlobalDataCompanyDataAdditionalData
     */
    public function getAdditionalData()
    {
        return $this->container['additional_data'];
    }

    /**
     * Sets additional_data
     *
     * @param \Swagger\Client\Model\CreditsafeGlobalDataCompanyDataAdditionalData $additional_data additional_data
     *
     * @return $this
     */
    public function setAdditionalData($additional_data)
    {
        $this->container['additional_data'] = $additional_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
