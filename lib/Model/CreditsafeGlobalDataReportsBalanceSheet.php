<?php
/**
 * CreditsafeGlobalDataReportsBalanceSheet
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreditsafeGlobalDataReportsBalanceSheet Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreditsafeGlobalDataReportsBalanceSheet implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Creditsafe.GlobalData.Reports.BalanceSheet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'land_and_buildings' => 'double',
'plant_and_machinery' => 'double',
'other_tangible_assets' => 'double',
'total_tangible_assets' => 'double',
'goodwill' => 'double',
'other_intangible_assets' => 'double',
'total_intangible_assets' => 'double',
'investments' => 'double',
'loans_to_group' => 'double',
'other_loans' => 'double',
'miscellaneous_fixed_assets' => 'double',
'total_other_fixed_assets' => 'double',
'total_fixed_assets' => 'double',
'raw_materials' => 'double',
'work_in_progress' => 'double',
'finished_goods' => 'double',
'other_inventories' => 'double',
'total_inventories' => 'double',
'trade_receivables' => 'double',
'group_receivables' => 'double',
'receivables_due_after1_year' => 'double',
'miscellaneous_receivables' => 'double',
'total_receivables' => 'double',
'cash' => 'double',
'other_current_assets' => 'double',
'total_current_assets' => 'double',
'total_assets' => 'double',
'trade_payables' => 'double',
'bank_liabilities' => 'double',
'other_loans_or_finance' => 'double',
'group_payables' => 'double',
'miscellaneous_liabilities' => 'double',
'total_current_liabilities' => 'double',
'trade_payables_due_after1_year' => 'double',
'bank_liabilities_due_after1_year' => 'double',
'other_loans_or_finance_due_after1_year' => 'double',
'group_payables_due_after1_year' => 'double',
'miscellaneous_liabilities_due_after1_year' => 'double',
'total_long_term_liabilities' => 'double',
'total_liabilities' => 'double',
'called_up_share_capital' => 'double',
'share_premium' => 'double',
'revenue_reserves' => 'double',
'other_reserves' => 'double',
'total_shareholders_equity' => 'double'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'land_and_buildings' => 'double',
'plant_and_machinery' => 'double',
'other_tangible_assets' => 'double',
'total_tangible_assets' => 'double',
'goodwill' => 'double',
'other_intangible_assets' => 'double',
'total_intangible_assets' => 'double',
'investments' => 'double',
'loans_to_group' => 'double',
'other_loans' => 'double',
'miscellaneous_fixed_assets' => 'double',
'total_other_fixed_assets' => 'double',
'total_fixed_assets' => 'double',
'raw_materials' => 'double',
'work_in_progress' => 'double',
'finished_goods' => 'double',
'other_inventories' => 'double',
'total_inventories' => 'double',
'trade_receivables' => 'double',
'group_receivables' => 'double',
'receivables_due_after1_year' => 'double',
'miscellaneous_receivables' => 'double',
'total_receivables' => 'double',
'cash' => 'double',
'other_current_assets' => 'double',
'total_current_assets' => 'double',
'total_assets' => 'double',
'trade_payables' => 'double',
'bank_liabilities' => 'double',
'other_loans_or_finance' => 'double',
'group_payables' => 'double',
'miscellaneous_liabilities' => 'double',
'total_current_liabilities' => 'double',
'trade_payables_due_after1_year' => 'double',
'bank_liabilities_due_after1_year' => 'double',
'other_loans_or_finance_due_after1_year' => 'double',
'group_payables_due_after1_year' => 'double',
'miscellaneous_liabilities_due_after1_year' => 'double',
'total_long_term_liabilities' => 'double',
'total_liabilities' => 'double',
'called_up_share_capital' => 'double',
'share_premium' => 'double',
'revenue_reserves' => 'double',
'other_reserves' => 'double',
'total_shareholders_equity' => 'double'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'land_and_buildings' => 'landAndBuildings',
'plant_and_machinery' => 'plantAndMachinery',
'other_tangible_assets' => 'otherTangibleAssets',
'total_tangible_assets' => 'totalTangibleAssets',
'goodwill' => 'goodwill',
'other_intangible_assets' => 'otherIntangibleAssets',
'total_intangible_assets' => 'totalIntangibleAssets',
'investments' => 'investments',
'loans_to_group' => 'loansToGroup',
'other_loans' => 'otherLoans',
'miscellaneous_fixed_assets' => 'miscellaneousFixedAssets',
'total_other_fixed_assets' => 'totalOtherFixedAssets',
'total_fixed_assets' => 'totalFixedAssets',
'raw_materials' => 'rawMaterials',
'work_in_progress' => 'workInProgress',
'finished_goods' => 'finishedGoods',
'other_inventories' => 'otherInventories',
'total_inventories' => 'totalInventories',
'trade_receivables' => 'tradeReceivables',
'group_receivables' => 'groupReceivables',
'receivables_due_after1_year' => 'receivablesDueAfter1Year',
'miscellaneous_receivables' => 'miscellaneousReceivables',
'total_receivables' => 'totalReceivables',
'cash' => 'cash',
'other_current_assets' => 'otherCurrentAssets',
'total_current_assets' => 'totalCurrentAssets',
'total_assets' => 'totalAssets',
'trade_payables' => 'tradePayables',
'bank_liabilities' => 'bankLiabilities',
'other_loans_or_finance' => 'otherLoansOrFinance',
'group_payables' => 'groupPayables',
'miscellaneous_liabilities' => 'miscellaneousLiabilities',
'total_current_liabilities' => 'totalCurrentLiabilities',
'trade_payables_due_after1_year' => 'tradePayablesDueAfter1Year',
'bank_liabilities_due_after1_year' => 'bankLiabilitiesDueAfter1Year',
'other_loans_or_finance_due_after1_year' => 'otherLoansOrFinanceDueAfter1Year',
'group_payables_due_after1_year' => 'groupPayablesDueAfter1Year',
'miscellaneous_liabilities_due_after1_year' => 'miscellaneousLiabilitiesDueAfter1Year',
'total_long_term_liabilities' => 'totalLongTermLiabilities',
'total_liabilities' => 'totalLiabilities',
'called_up_share_capital' => 'calledUpShareCapital',
'share_premium' => 'sharePremium',
'revenue_reserves' => 'revenueReserves',
'other_reserves' => 'otherReserves',
'total_shareholders_equity' => 'totalShareholdersEquity'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'land_and_buildings' => 'setLandAndBuildings',
'plant_and_machinery' => 'setPlantAndMachinery',
'other_tangible_assets' => 'setOtherTangibleAssets',
'total_tangible_assets' => 'setTotalTangibleAssets',
'goodwill' => 'setGoodwill',
'other_intangible_assets' => 'setOtherIntangibleAssets',
'total_intangible_assets' => 'setTotalIntangibleAssets',
'investments' => 'setInvestments',
'loans_to_group' => 'setLoansToGroup',
'other_loans' => 'setOtherLoans',
'miscellaneous_fixed_assets' => 'setMiscellaneousFixedAssets',
'total_other_fixed_assets' => 'setTotalOtherFixedAssets',
'total_fixed_assets' => 'setTotalFixedAssets',
'raw_materials' => 'setRawMaterials',
'work_in_progress' => 'setWorkInProgress',
'finished_goods' => 'setFinishedGoods',
'other_inventories' => 'setOtherInventories',
'total_inventories' => 'setTotalInventories',
'trade_receivables' => 'setTradeReceivables',
'group_receivables' => 'setGroupReceivables',
'receivables_due_after1_year' => 'setReceivablesDueAfter1Year',
'miscellaneous_receivables' => 'setMiscellaneousReceivables',
'total_receivables' => 'setTotalReceivables',
'cash' => 'setCash',
'other_current_assets' => 'setOtherCurrentAssets',
'total_current_assets' => 'setTotalCurrentAssets',
'total_assets' => 'setTotalAssets',
'trade_payables' => 'setTradePayables',
'bank_liabilities' => 'setBankLiabilities',
'other_loans_or_finance' => 'setOtherLoansOrFinance',
'group_payables' => 'setGroupPayables',
'miscellaneous_liabilities' => 'setMiscellaneousLiabilities',
'total_current_liabilities' => 'setTotalCurrentLiabilities',
'trade_payables_due_after1_year' => 'setTradePayablesDueAfter1Year',
'bank_liabilities_due_after1_year' => 'setBankLiabilitiesDueAfter1Year',
'other_loans_or_finance_due_after1_year' => 'setOtherLoansOrFinanceDueAfter1Year',
'group_payables_due_after1_year' => 'setGroupPayablesDueAfter1Year',
'miscellaneous_liabilities_due_after1_year' => 'setMiscellaneousLiabilitiesDueAfter1Year',
'total_long_term_liabilities' => 'setTotalLongTermLiabilities',
'total_liabilities' => 'setTotalLiabilities',
'called_up_share_capital' => 'setCalledUpShareCapital',
'share_premium' => 'setSharePremium',
'revenue_reserves' => 'setRevenueReserves',
'other_reserves' => 'setOtherReserves',
'total_shareholders_equity' => 'setTotalShareholdersEquity'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'land_and_buildings' => 'getLandAndBuildings',
'plant_and_machinery' => 'getPlantAndMachinery',
'other_tangible_assets' => 'getOtherTangibleAssets',
'total_tangible_assets' => 'getTotalTangibleAssets',
'goodwill' => 'getGoodwill',
'other_intangible_assets' => 'getOtherIntangibleAssets',
'total_intangible_assets' => 'getTotalIntangibleAssets',
'investments' => 'getInvestments',
'loans_to_group' => 'getLoansToGroup',
'other_loans' => 'getOtherLoans',
'miscellaneous_fixed_assets' => 'getMiscellaneousFixedAssets',
'total_other_fixed_assets' => 'getTotalOtherFixedAssets',
'total_fixed_assets' => 'getTotalFixedAssets',
'raw_materials' => 'getRawMaterials',
'work_in_progress' => 'getWorkInProgress',
'finished_goods' => 'getFinishedGoods',
'other_inventories' => 'getOtherInventories',
'total_inventories' => 'getTotalInventories',
'trade_receivables' => 'getTradeReceivables',
'group_receivables' => 'getGroupReceivables',
'receivables_due_after1_year' => 'getReceivablesDueAfter1Year',
'miscellaneous_receivables' => 'getMiscellaneousReceivables',
'total_receivables' => 'getTotalReceivables',
'cash' => 'getCash',
'other_current_assets' => 'getOtherCurrentAssets',
'total_current_assets' => 'getTotalCurrentAssets',
'total_assets' => 'getTotalAssets',
'trade_payables' => 'getTradePayables',
'bank_liabilities' => 'getBankLiabilities',
'other_loans_or_finance' => 'getOtherLoansOrFinance',
'group_payables' => 'getGroupPayables',
'miscellaneous_liabilities' => 'getMiscellaneousLiabilities',
'total_current_liabilities' => 'getTotalCurrentLiabilities',
'trade_payables_due_after1_year' => 'getTradePayablesDueAfter1Year',
'bank_liabilities_due_after1_year' => 'getBankLiabilitiesDueAfter1Year',
'other_loans_or_finance_due_after1_year' => 'getOtherLoansOrFinanceDueAfter1Year',
'group_payables_due_after1_year' => 'getGroupPayablesDueAfter1Year',
'miscellaneous_liabilities_due_after1_year' => 'getMiscellaneousLiabilitiesDueAfter1Year',
'total_long_term_liabilities' => 'getTotalLongTermLiabilities',
'total_liabilities' => 'getTotalLiabilities',
'called_up_share_capital' => 'getCalledUpShareCapital',
'share_premium' => 'getSharePremium',
'revenue_reserves' => 'getRevenueReserves',
'other_reserves' => 'getOtherReserves',
'total_shareholders_equity' => 'getTotalShareholdersEquity'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['land_and_buildings'] = isset($data['land_and_buildings']) ? $data['land_and_buildings'] : null;
        $this->container['plant_and_machinery'] = isset($data['plant_and_machinery']) ? $data['plant_and_machinery'] : null;
        $this->container['other_tangible_assets'] = isset($data['other_tangible_assets']) ? $data['other_tangible_assets'] : null;
        $this->container['total_tangible_assets'] = isset($data['total_tangible_assets']) ? $data['total_tangible_assets'] : null;
        $this->container['goodwill'] = isset($data['goodwill']) ? $data['goodwill'] : null;
        $this->container['other_intangible_assets'] = isset($data['other_intangible_assets']) ? $data['other_intangible_assets'] : null;
        $this->container['total_intangible_assets'] = isset($data['total_intangible_assets']) ? $data['total_intangible_assets'] : null;
        $this->container['investments'] = isset($data['investments']) ? $data['investments'] : null;
        $this->container['loans_to_group'] = isset($data['loans_to_group']) ? $data['loans_to_group'] : null;
        $this->container['other_loans'] = isset($data['other_loans']) ? $data['other_loans'] : null;
        $this->container['miscellaneous_fixed_assets'] = isset($data['miscellaneous_fixed_assets']) ? $data['miscellaneous_fixed_assets'] : null;
        $this->container['total_other_fixed_assets'] = isset($data['total_other_fixed_assets']) ? $data['total_other_fixed_assets'] : null;
        $this->container['total_fixed_assets'] = isset($data['total_fixed_assets']) ? $data['total_fixed_assets'] : null;
        $this->container['raw_materials'] = isset($data['raw_materials']) ? $data['raw_materials'] : null;
        $this->container['work_in_progress'] = isset($data['work_in_progress']) ? $data['work_in_progress'] : null;
        $this->container['finished_goods'] = isset($data['finished_goods']) ? $data['finished_goods'] : null;
        $this->container['other_inventories'] = isset($data['other_inventories']) ? $data['other_inventories'] : null;
        $this->container['total_inventories'] = isset($data['total_inventories']) ? $data['total_inventories'] : null;
        $this->container['trade_receivables'] = isset($data['trade_receivables']) ? $data['trade_receivables'] : null;
        $this->container['group_receivables'] = isset($data['group_receivables']) ? $data['group_receivables'] : null;
        $this->container['receivables_due_after1_year'] = isset($data['receivables_due_after1_year']) ? $data['receivables_due_after1_year'] : null;
        $this->container['miscellaneous_receivables'] = isset($data['miscellaneous_receivables']) ? $data['miscellaneous_receivables'] : null;
        $this->container['total_receivables'] = isset($data['total_receivables']) ? $data['total_receivables'] : null;
        $this->container['cash'] = isset($data['cash']) ? $data['cash'] : null;
        $this->container['other_current_assets'] = isset($data['other_current_assets']) ? $data['other_current_assets'] : null;
        $this->container['total_current_assets'] = isset($data['total_current_assets']) ? $data['total_current_assets'] : null;
        $this->container['total_assets'] = isset($data['total_assets']) ? $data['total_assets'] : null;
        $this->container['trade_payables'] = isset($data['trade_payables']) ? $data['trade_payables'] : null;
        $this->container['bank_liabilities'] = isset($data['bank_liabilities']) ? $data['bank_liabilities'] : null;
        $this->container['other_loans_or_finance'] = isset($data['other_loans_or_finance']) ? $data['other_loans_or_finance'] : null;
        $this->container['group_payables'] = isset($data['group_payables']) ? $data['group_payables'] : null;
        $this->container['miscellaneous_liabilities'] = isset($data['miscellaneous_liabilities']) ? $data['miscellaneous_liabilities'] : null;
        $this->container['total_current_liabilities'] = isset($data['total_current_liabilities']) ? $data['total_current_liabilities'] : null;
        $this->container['trade_payables_due_after1_year'] = isset($data['trade_payables_due_after1_year']) ? $data['trade_payables_due_after1_year'] : null;
        $this->container['bank_liabilities_due_after1_year'] = isset($data['bank_liabilities_due_after1_year']) ? $data['bank_liabilities_due_after1_year'] : null;
        $this->container['other_loans_or_finance_due_after1_year'] = isset($data['other_loans_or_finance_due_after1_year']) ? $data['other_loans_or_finance_due_after1_year'] : null;
        $this->container['group_payables_due_after1_year'] = isset($data['group_payables_due_after1_year']) ? $data['group_payables_due_after1_year'] : null;
        $this->container['miscellaneous_liabilities_due_after1_year'] = isset($data['miscellaneous_liabilities_due_after1_year']) ? $data['miscellaneous_liabilities_due_after1_year'] : null;
        $this->container['total_long_term_liabilities'] = isset($data['total_long_term_liabilities']) ? $data['total_long_term_liabilities'] : null;
        $this->container['total_liabilities'] = isset($data['total_liabilities']) ? $data['total_liabilities'] : null;
        $this->container['called_up_share_capital'] = isset($data['called_up_share_capital']) ? $data['called_up_share_capital'] : null;
        $this->container['share_premium'] = isset($data['share_premium']) ? $data['share_premium'] : null;
        $this->container['revenue_reserves'] = isset($data['revenue_reserves']) ? $data['revenue_reserves'] : null;
        $this->container['other_reserves'] = isset($data['other_reserves']) ? $data['other_reserves'] : null;
        $this->container['total_shareholders_equity'] = isset($data['total_shareholders_equity']) ? $data['total_shareholders_equity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets land_and_buildings
     *
     * @return double
     */
    public function getLandAndBuildings()
    {
        return $this->container['land_and_buildings'];
    }

    /**
     * Sets land_and_buildings
     *
     * @param double $land_and_buildings land_and_buildings
     *
     * @return $this
     */
    public function setLandAndBuildings($land_and_buildings)
    {
        $this->container['land_and_buildings'] = $land_and_buildings;

        return $this;
    }

    /**
     * Gets plant_and_machinery
     *
     * @return double
     */
    public function getPlantAndMachinery()
    {
        return $this->container['plant_and_machinery'];
    }

    /**
     * Sets plant_and_machinery
     *
     * @param double $plant_and_machinery plant_and_machinery
     *
     * @return $this
     */
    public function setPlantAndMachinery($plant_and_machinery)
    {
        $this->container['plant_and_machinery'] = $plant_and_machinery;

        return $this;
    }

    /**
     * Gets other_tangible_assets
     *
     * @return double
     */
    public function getOtherTangibleAssets()
    {
        return $this->container['other_tangible_assets'];
    }

    /**
     * Sets other_tangible_assets
     *
     * @param double $other_tangible_assets other_tangible_assets
     *
     * @return $this
     */
    public function setOtherTangibleAssets($other_tangible_assets)
    {
        $this->container['other_tangible_assets'] = $other_tangible_assets;

        return $this;
    }

    /**
     * Gets total_tangible_assets
     *
     * @return double
     */
    public function getTotalTangibleAssets()
    {
        return $this->container['total_tangible_assets'];
    }

    /**
     * Sets total_tangible_assets
     *
     * @param double $total_tangible_assets total_tangible_assets
     *
     * @return $this
     */
    public function setTotalTangibleAssets($total_tangible_assets)
    {
        $this->container['total_tangible_assets'] = $total_tangible_assets;

        return $this;
    }

    /**
     * Gets goodwill
     *
     * @return double
     */
    public function getGoodwill()
    {
        return $this->container['goodwill'];
    }

    /**
     * Sets goodwill
     *
     * @param double $goodwill goodwill
     *
     * @return $this
     */
    public function setGoodwill($goodwill)
    {
        $this->container['goodwill'] = $goodwill;

        return $this;
    }

    /**
     * Gets other_intangible_assets
     *
     * @return double
     */
    public function getOtherIntangibleAssets()
    {
        return $this->container['other_intangible_assets'];
    }

    /**
     * Sets other_intangible_assets
     *
     * @param double $other_intangible_assets other_intangible_assets
     *
     * @return $this
     */
    public function setOtherIntangibleAssets($other_intangible_assets)
    {
        $this->container['other_intangible_assets'] = $other_intangible_assets;

        return $this;
    }

    /**
     * Gets total_intangible_assets
     *
     * @return double
     */
    public function getTotalIntangibleAssets()
    {
        return $this->container['total_intangible_assets'];
    }

    /**
     * Sets total_intangible_assets
     *
     * @param double $total_intangible_assets total_intangible_assets
     *
     * @return $this
     */
    public function setTotalIntangibleAssets($total_intangible_assets)
    {
        $this->container['total_intangible_assets'] = $total_intangible_assets;

        return $this;
    }

    /**
     * Gets investments
     *
     * @return double
     */
    public function getInvestments()
    {
        return $this->container['investments'];
    }

    /**
     * Sets investments
     *
     * @param double $investments investments
     *
     * @return $this
     */
    public function setInvestments($investments)
    {
        $this->container['investments'] = $investments;

        return $this;
    }

    /**
     * Gets loans_to_group
     *
     * @return double
     */
    public function getLoansToGroup()
    {
        return $this->container['loans_to_group'];
    }

    /**
     * Sets loans_to_group
     *
     * @param double $loans_to_group loans_to_group
     *
     * @return $this
     */
    public function setLoansToGroup($loans_to_group)
    {
        $this->container['loans_to_group'] = $loans_to_group;

        return $this;
    }

    /**
     * Gets other_loans
     *
     * @return double
     */
    public function getOtherLoans()
    {
        return $this->container['other_loans'];
    }

    /**
     * Sets other_loans
     *
     * @param double $other_loans other_loans
     *
     * @return $this
     */
    public function setOtherLoans($other_loans)
    {
        $this->container['other_loans'] = $other_loans;

        return $this;
    }

    /**
     * Gets miscellaneous_fixed_assets
     *
     * @return double
     */
    public function getMiscellaneousFixedAssets()
    {
        return $this->container['miscellaneous_fixed_assets'];
    }

    /**
     * Sets miscellaneous_fixed_assets
     *
     * @param double $miscellaneous_fixed_assets miscellaneous_fixed_assets
     *
     * @return $this
     */
    public function setMiscellaneousFixedAssets($miscellaneous_fixed_assets)
    {
        $this->container['miscellaneous_fixed_assets'] = $miscellaneous_fixed_assets;

        return $this;
    }

    /**
     * Gets total_other_fixed_assets
     *
     * @return double
     */
    public function getTotalOtherFixedAssets()
    {
        return $this->container['total_other_fixed_assets'];
    }

    /**
     * Sets total_other_fixed_assets
     *
     * @param double $total_other_fixed_assets total_other_fixed_assets
     *
     * @return $this
     */
    public function setTotalOtherFixedAssets($total_other_fixed_assets)
    {
        $this->container['total_other_fixed_assets'] = $total_other_fixed_assets;

        return $this;
    }

    /**
     * Gets total_fixed_assets
     *
     * @return double
     */
    public function getTotalFixedAssets()
    {
        return $this->container['total_fixed_assets'];
    }

    /**
     * Sets total_fixed_assets
     *
     * @param double $total_fixed_assets total_fixed_assets
     *
     * @return $this
     */
    public function setTotalFixedAssets($total_fixed_assets)
    {
        $this->container['total_fixed_assets'] = $total_fixed_assets;

        return $this;
    }

    /**
     * Gets raw_materials
     *
     * @return double
     */
    public function getRawMaterials()
    {
        return $this->container['raw_materials'];
    }

    /**
     * Sets raw_materials
     *
     * @param double $raw_materials raw_materials
     *
     * @return $this
     */
    public function setRawMaterials($raw_materials)
    {
        $this->container['raw_materials'] = $raw_materials;

        return $this;
    }

    /**
     * Gets work_in_progress
     *
     * @return double
     */
    public function getWorkInProgress()
    {
        return $this->container['work_in_progress'];
    }

    /**
     * Sets work_in_progress
     *
     * @param double $work_in_progress work_in_progress
     *
     * @return $this
     */
    public function setWorkInProgress($work_in_progress)
    {
        $this->container['work_in_progress'] = $work_in_progress;

        return $this;
    }

    /**
     * Gets finished_goods
     *
     * @return double
     */
    public function getFinishedGoods()
    {
        return $this->container['finished_goods'];
    }

    /**
     * Sets finished_goods
     *
     * @param double $finished_goods finished_goods
     *
     * @return $this
     */
    public function setFinishedGoods($finished_goods)
    {
        $this->container['finished_goods'] = $finished_goods;

        return $this;
    }

    /**
     * Gets other_inventories
     *
     * @return double
     */
    public function getOtherInventories()
    {
        return $this->container['other_inventories'];
    }

    /**
     * Sets other_inventories
     *
     * @param double $other_inventories other_inventories
     *
     * @return $this
     */
    public function setOtherInventories($other_inventories)
    {
        $this->container['other_inventories'] = $other_inventories;

        return $this;
    }

    /**
     * Gets total_inventories
     *
     * @return double
     */
    public function getTotalInventories()
    {
        return $this->container['total_inventories'];
    }

    /**
     * Sets total_inventories
     *
     * @param double $total_inventories total_inventories
     *
     * @return $this
     */
    public function setTotalInventories($total_inventories)
    {
        $this->container['total_inventories'] = $total_inventories;

        return $this;
    }

    /**
     * Gets trade_receivables
     *
     * @return double
     */
    public function getTradeReceivables()
    {
        return $this->container['trade_receivables'];
    }

    /**
     * Sets trade_receivables
     *
     * @param double $trade_receivables trade_receivables
     *
     * @return $this
     */
    public function setTradeReceivables($trade_receivables)
    {
        $this->container['trade_receivables'] = $trade_receivables;

        return $this;
    }

    /**
     * Gets group_receivables
     *
     * @return double
     */
    public function getGroupReceivables()
    {
        return $this->container['group_receivables'];
    }

    /**
     * Sets group_receivables
     *
     * @param double $group_receivables group_receivables
     *
     * @return $this
     */
    public function setGroupReceivables($group_receivables)
    {
        $this->container['group_receivables'] = $group_receivables;

        return $this;
    }

    /**
     * Gets receivables_due_after1_year
     *
     * @return double
     */
    public function getReceivablesDueAfter1Year()
    {
        return $this->container['receivables_due_after1_year'];
    }

    /**
     * Sets receivables_due_after1_year
     *
     * @param double $receivables_due_after1_year receivables_due_after1_year
     *
     * @return $this
     */
    public function setReceivablesDueAfter1Year($receivables_due_after1_year)
    {
        $this->container['receivables_due_after1_year'] = $receivables_due_after1_year;

        return $this;
    }

    /**
     * Gets miscellaneous_receivables
     *
     * @return double
     */
    public function getMiscellaneousReceivables()
    {
        return $this->container['miscellaneous_receivables'];
    }

    /**
     * Sets miscellaneous_receivables
     *
     * @param double $miscellaneous_receivables miscellaneous_receivables
     *
     * @return $this
     */
    public function setMiscellaneousReceivables($miscellaneous_receivables)
    {
        $this->container['miscellaneous_receivables'] = $miscellaneous_receivables;

        return $this;
    }

    /**
     * Gets total_receivables
     *
     * @return double
     */
    public function getTotalReceivables()
    {
        return $this->container['total_receivables'];
    }

    /**
     * Sets total_receivables
     *
     * @param double $total_receivables total_receivables
     *
     * @return $this
     */
    public function setTotalReceivables($total_receivables)
    {
        $this->container['total_receivables'] = $total_receivables;

        return $this;
    }

    /**
     * Gets cash
     *
     * @return double
     */
    public function getCash()
    {
        return $this->container['cash'];
    }

    /**
     * Sets cash
     *
     * @param double $cash cash
     *
     * @return $this
     */
    public function setCash($cash)
    {
        $this->container['cash'] = $cash;

        return $this;
    }

    /**
     * Gets other_current_assets
     *
     * @return double
     */
    public function getOtherCurrentAssets()
    {
        return $this->container['other_current_assets'];
    }

    /**
     * Sets other_current_assets
     *
     * @param double $other_current_assets other_current_assets
     *
     * @return $this
     */
    public function setOtherCurrentAssets($other_current_assets)
    {
        $this->container['other_current_assets'] = $other_current_assets;

        return $this;
    }

    /**
     * Gets total_current_assets
     *
     * @return double
     */
    public function getTotalCurrentAssets()
    {
        return $this->container['total_current_assets'];
    }

    /**
     * Sets total_current_assets
     *
     * @param double $total_current_assets total_current_assets
     *
     * @return $this
     */
    public function setTotalCurrentAssets($total_current_assets)
    {
        $this->container['total_current_assets'] = $total_current_assets;

        return $this;
    }

    /**
     * Gets total_assets
     *
     * @return double
     */
    public function getTotalAssets()
    {
        return $this->container['total_assets'];
    }

    /**
     * Sets total_assets
     *
     * @param double $total_assets total_assets
     *
     * @return $this
     */
    public function setTotalAssets($total_assets)
    {
        $this->container['total_assets'] = $total_assets;

        return $this;
    }

    /**
     * Gets trade_payables
     *
     * @return double
     */
    public function getTradePayables()
    {
        return $this->container['trade_payables'];
    }

    /**
     * Sets trade_payables
     *
     * @param double $trade_payables trade_payables
     *
     * @return $this
     */
    public function setTradePayables($trade_payables)
    {
        $this->container['trade_payables'] = $trade_payables;

        return $this;
    }

    /**
     * Gets bank_liabilities
     *
     * @return double
     */
    public function getBankLiabilities()
    {
        return $this->container['bank_liabilities'];
    }

    /**
     * Sets bank_liabilities
     *
     * @param double $bank_liabilities bank_liabilities
     *
     * @return $this
     */
    public function setBankLiabilities($bank_liabilities)
    {
        $this->container['bank_liabilities'] = $bank_liabilities;

        return $this;
    }

    /**
     * Gets other_loans_or_finance
     *
     * @return double
     */
    public function getOtherLoansOrFinance()
    {
        return $this->container['other_loans_or_finance'];
    }

    /**
     * Sets other_loans_or_finance
     *
     * @param double $other_loans_or_finance other_loans_or_finance
     *
     * @return $this
     */
    public function setOtherLoansOrFinance($other_loans_or_finance)
    {
        $this->container['other_loans_or_finance'] = $other_loans_or_finance;

        return $this;
    }

    /**
     * Gets group_payables
     *
     * @return double
     */
    public function getGroupPayables()
    {
        return $this->container['group_payables'];
    }

    /**
     * Sets group_payables
     *
     * @param double $group_payables group_payables
     *
     * @return $this
     */
    public function setGroupPayables($group_payables)
    {
        $this->container['group_payables'] = $group_payables;

        return $this;
    }

    /**
     * Gets miscellaneous_liabilities
     *
     * @return double
     */
    public function getMiscellaneousLiabilities()
    {
        return $this->container['miscellaneous_liabilities'];
    }

    /**
     * Sets miscellaneous_liabilities
     *
     * @param double $miscellaneous_liabilities miscellaneous_liabilities
     *
     * @return $this
     */
    public function setMiscellaneousLiabilities($miscellaneous_liabilities)
    {
        $this->container['miscellaneous_liabilities'] = $miscellaneous_liabilities;

        return $this;
    }

    /**
     * Gets total_current_liabilities
     *
     * @return double
     */
    public function getTotalCurrentLiabilities()
    {
        return $this->container['total_current_liabilities'];
    }

    /**
     * Sets total_current_liabilities
     *
     * @param double $total_current_liabilities total_current_liabilities
     *
     * @return $this
     */
    public function setTotalCurrentLiabilities($total_current_liabilities)
    {
        $this->container['total_current_liabilities'] = $total_current_liabilities;

        return $this;
    }

    /**
     * Gets trade_payables_due_after1_year
     *
     * @return double
     */
    public function getTradePayablesDueAfter1Year()
    {
        return $this->container['trade_payables_due_after1_year'];
    }

    /**
     * Sets trade_payables_due_after1_year
     *
     * @param double $trade_payables_due_after1_year trade_payables_due_after1_year
     *
     * @return $this
     */
    public function setTradePayablesDueAfter1Year($trade_payables_due_after1_year)
    {
        $this->container['trade_payables_due_after1_year'] = $trade_payables_due_after1_year;

        return $this;
    }

    /**
     * Gets bank_liabilities_due_after1_year
     *
     * @return double
     */
    public function getBankLiabilitiesDueAfter1Year()
    {
        return $this->container['bank_liabilities_due_after1_year'];
    }

    /**
     * Sets bank_liabilities_due_after1_year
     *
     * @param double $bank_liabilities_due_after1_year bank_liabilities_due_after1_year
     *
     * @return $this
     */
    public function setBankLiabilitiesDueAfter1Year($bank_liabilities_due_after1_year)
    {
        $this->container['bank_liabilities_due_after1_year'] = $bank_liabilities_due_after1_year;

        return $this;
    }

    /**
     * Gets other_loans_or_finance_due_after1_year
     *
     * @return double
     */
    public function getOtherLoansOrFinanceDueAfter1Year()
    {
        return $this->container['other_loans_or_finance_due_after1_year'];
    }

    /**
     * Sets other_loans_or_finance_due_after1_year
     *
     * @param double $other_loans_or_finance_due_after1_year other_loans_or_finance_due_after1_year
     *
     * @return $this
     */
    public function setOtherLoansOrFinanceDueAfter1Year($other_loans_or_finance_due_after1_year)
    {
        $this->container['other_loans_or_finance_due_after1_year'] = $other_loans_or_finance_due_after1_year;

        return $this;
    }

    /**
     * Gets group_payables_due_after1_year
     *
     * @return double
     */
    public function getGroupPayablesDueAfter1Year()
    {
        return $this->container['group_payables_due_after1_year'];
    }

    /**
     * Sets group_payables_due_after1_year
     *
     * @param double $group_payables_due_after1_year group_payables_due_after1_year
     *
     * @return $this
     */
    public function setGroupPayablesDueAfter1Year($group_payables_due_after1_year)
    {
        $this->container['group_payables_due_after1_year'] = $group_payables_due_after1_year;

        return $this;
    }

    /**
     * Gets miscellaneous_liabilities_due_after1_year
     *
     * @return double
     */
    public function getMiscellaneousLiabilitiesDueAfter1Year()
    {
        return $this->container['miscellaneous_liabilities_due_after1_year'];
    }

    /**
     * Sets miscellaneous_liabilities_due_after1_year
     *
     * @param double $miscellaneous_liabilities_due_after1_year miscellaneous_liabilities_due_after1_year
     *
     * @return $this
     */
    public function setMiscellaneousLiabilitiesDueAfter1Year($miscellaneous_liabilities_due_after1_year)
    {
        $this->container['miscellaneous_liabilities_due_after1_year'] = $miscellaneous_liabilities_due_after1_year;

        return $this;
    }

    /**
     * Gets total_long_term_liabilities
     *
     * @return double
     */
    public function getTotalLongTermLiabilities()
    {
        return $this->container['total_long_term_liabilities'];
    }

    /**
     * Sets total_long_term_liabilities
     *
     * @param double $total_long_term_liabilities total_long_term_liabilities
     *
     * @return $this
     */
    public function setTotalLongTermLiabilities($total_long_term_liabilities)
    {
        $this->container['total_long_term_liabilities'] = $total_long_term_liabilities;

        return $this;
    }

    /**
     * Gets total_liabilities
     *
     * @return double
     */
    public function getTotalLiabilities()
    {
        return $this->container['total_liabilities'];
    }

    /**
     * Sets total_liabilities
     *
     * @param double $total_liabilities total_liabilities
     *
     * @return $this
     */
    public function setTotalLiabilities($total_liabilities)
    {
        $this->container['total_liabilities'] = $total_liabilities;

        return $this;
    }

    /**
     * Gets called_up_share_capital
     *
     * @return double
     */
    public function getCalledUpShareCapital()
    {
        return $this->container['called_up_share_capital'];
    }

    /**
     * Sets called_up_share_capital
     *
     * @param double $called_up_share_capital called_up_share_capital
     *
     * @return $this
     */
    public function setCalledUpShareCapital($called_up_share_capital)
    {
        $this->container['called_up_share_capital'] = $called_up_share_capital;

        return $this;
    }

    /**
     * Gets share_premium
     *
     * @return double
     */
    public function getSharePremium()
    {
        return $this->container['share_premium'];
    }

    /**
     * Sets share_premium
     *
     * @param double $share_premium share_premium
     *
     * @return $this
     */
    public function setSharePremium($share_premium)
    {
        $this->container['share_premium'] = $share_premium;

        return $this;
    }

    /**
     * Gets revenue_reserves
     *
     * @return double
     */
    public function getRevenueReserves()
    {
        return $this->container['revenue_reserves'];
    }

    /**
     * Sets revenue_reserves
     *
     * @param double $revenue_reserves revenue_reserves
     *
     * @return $this
     */
    public function setRevenueReserves($revenue_reserves)
    {
        $this->container['revenue_reserves'] = $revenue_reserves;

        return $this;
    }

    /**
     * Gets other_reserves
     *
     * @return double
     */
    public function getOtherReserves()
    {
        return $this->container['other_reserves'];
    }

    /**
     * Sets other_reserves
     *
     * @param double $other_reserves other_reserves
     *
     * @return $this
     */
    public function setOtherReserves($other_reserves)
    {
        $this->container['other_reserves'] = $other_reserves;

        return $this;
    }

    /**
     * Gets total_shareholders_equity
     *
     * @return double
     */
    public function getTotalShareholdersEquity()
    {
        return $this->container['total_shareholders_equity'];
    }

    /**
     * Sets total_shareholders_equity
     *
     * @param double $total_shareholders_equity total_shareholders_equity
     *
     * @return $this
     */
    public function setTotalShareholdersEquity($total_shareholders_equity)
    {
        $this->container['total_shareholders_equity'] = $total_shareholders_equity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
