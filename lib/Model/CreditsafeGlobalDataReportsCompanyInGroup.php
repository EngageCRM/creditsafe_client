<?php
/**
 * CreditsafeGlobalDataReportsCompanyInGroup
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreditsafeGlobalDataReportsCompanyInGroup Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreditsafeGlobalDataReportsCompanyInGroup implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Creditsafe.GlobalData.Reports.CompanyInGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'country' => 'string',
'safe_number' => 'string',
'id_type' => '\Swagger\Client\Model\CreditsafeGlobalDataReportsIdType',
'company_name' => 'string',
'registered_number' => 'string',
'latest_annual_accounts' => '\DateTime',
'level' => 'int',
'percent_of_ownership' => 'double',
'status' => 'string',
'common_rating_band' => 'string',
'additional_data' => '\Swagger\Client\Model\CreditsafeGlobalDataReportsCompanyInGroupAdditionalData'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'country' => null,
'safe_number' => null,
'id_type' => null,
'company_name' => null,
'registered_number' => null,
'latest_annual_accounts' => 'date-time',
'level' => 'int32',
'percent_of_ownership' => 'double',
'status' => null,
'common_rating_band' => null,
'additional_data' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'country' => 'country',
'safe_number' => 'safeNumber',
'id_type' => 'idType',
'company_name' => 'companyName',
'registered_number' => 'registeredNumber',
'latest_annual_accounts' => 'latestAnnualAccounts',
'level' => 'level',
'percent_of_ownership' => 'percentOfOwnership',
'status' => 'status',
'common_rating_band' => 'commonRatingBand',
'additional_data' => 'additionalData'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'country' => 'setCountry',
'safe_number' => 'setSafeNumber',
'id_type' => 'setIdType',
'company_name' => 'setCompanyName',
'registered_number' => 'setRegisteredNumber',
'latest_annual_accounts' => 'setLatestAnnualAccounts',
'level' => 'setLevel',
'percent_of_ownership' => 'setPercentOfOwnership',
'status' => 'setStatus',
'common_rating_band' => 'setCommonRatingBand',
'additional_data' => 'setAdditionalData'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'country' => 'getCountry',
'safe_number' => 'getSafeNumber',
'id_type' => 'getIdType',
'company_name' => 'getCompanyName',
'registered_number' => 'getRegisteredNumber',
'latest_annual_accounts' => 'getLatestAnnualAccounts',
'level' => 'getLevel',
'percent_of_ownership' => 'getPercentOfOwnership',
'status' => 'getStatus',
'common_rating_band' => 'getCommonRatingBand',
'additional_data' => 'getAdditionalData'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['safe_number'] = isset($data['safe_number']) ? $data['safe_number'] : null;
        $this->container['id_type'] = isset($data['id_type']) ? $data['id_type'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['registered_number'] = isset($data['registered_number']) ? $data['registered_number'] : null;
        $this->container['latest_annual_accounts'] = isset($data['latest_annual_accounts']) ? $data['latest_annual_accounts'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['percent_of_ownership'] = isset($data['percent_of_ownership']) ? $data['percent_of_ownership'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['common_rating_band'] = isset($data['common_rating_band']) ? $data['common_rating_band'] : null;
        $this->container['additional_data'] = isset($data['additional_data']) ? $data['additional_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets safe_number
     *
     * @return string
     */
    public function getSafeNumber()
    {
        return $this->container['safe_number'];
    }

    /**
     * Sets safe_number
     *
     * @param string $safe_number safe_number
     *
     * @return $this
     */
    public function setSafeNumber($safe_number)
    {
        $this->container['safe_number'] = $safe_number;

        return $this;
    }

    /**
     * Gets id_type
     *
     * @return \Swagger\Client\Model\CreditsafeGlobalDataReportsIdType
     */
    public function getIdType()
    {
        return $this->container['id_type'];
    }

    /**
     * Sets id_type
     *
     * @param \Swagger\Client\Model\CreditsafeGlobalDataReportsIdType $id_type id_type
     *
     * @return $this
     */
    public function setIdType($id_type)
    {
        $this->container['id_type'] = $id_type;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name company_name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets registered_number
     *
     * @return string
     */
    public function getRegisteredNumber()
    {
        return $this->container['registered_number'];
    }

    /**
     * Sets registered_number
     *
     * @param string $registered_number registered_number
     *
     * @return $this
     */
    public function setRegisteredNumber($registered_number)
    {
        $this->container['registered_number'] = $registered_number;

        return $this;
    }

    /**
     * Gets latest_annual_accounts
     *
     * @return \DateTime
     */
    public function getLatestAnnualAccounts()
    {
        return $this->container['latest_annual_accounts'];
    }

    /**
     * Sets latest_annual_accounts
     *
     * @param \DateTime $latest_annual_accounts latest_annual_accounts
     *
     * @return $this
     */
    public function setLatestAnnualAccounts($latest_annual_accounts)
    {
        $this->container['latest_annual_accounts'] = $latest_annual_accounts;

        return $this;
    }

    /**
     * Gets level
     *
     * @return int
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param int $level level
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets percent_of_ownership
     *
     * @return double
     */
    public function getPercentOfOwnership()
    {
        return $this->container['percent_of_ownership'];
    }

    /**
     * Sets percent_of_ownership
     *
     * @param double $percent_of_ownership percent_of_ownership
     *
     * @return $this
     */
    public function setPercentOfOwnership($percent_of_ownership)
    {
        $this->container['percent_of_ownership'] = $percent_of_ownership;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets common_rating_band
     *
     * @return string
     */
    public function getCommonRatingBand()
    {
        return $this->container['common_rating_band'];
    }

    /**
     * Sets common_rating_band
     *
     * @param string $common_rating_band common_rating_band
     *
     * @return $this
     */
    public function setCommonRatingBand($common_rating_band)
    {
        $this->container['common_rating_band'] = $common_rating_band;

        return $this;
    }

    /**
     * Gets additional_data
     *
     * @return \Swagger\Client\Model\CreditsafeGlobalDataReportsCompanyInGroupAdditionalData
     */
    public function getAdditionalData()
    {
        return $this->container['additional_data'];
    }

    /**
     * Sets additional_data
     *
     * @param \Swagger\Client\Model\CreditsafeGlobalDataReportsCompanyInGroupAdditionalData $additional_data additional_data
     *
     * @return $this
     */
    public function setAdditionalData($additional_data)
    {
        $this->container['additional_data'] = $additional_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
