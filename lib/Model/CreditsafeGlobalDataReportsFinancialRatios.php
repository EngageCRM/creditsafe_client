<?php
/**
 * CreditsafeGlobalDataReportsFinancialRatios
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreditsafeGlobalDataReportsFinancialRatios Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreditsafeGlobalDataReportsFinancialRatios implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Creditsafe.GlobalData.Reports.FinancialRatios';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pre_tax_profit_margin' => 'double',
'return_on_capital_employed' => 'double',
'return_on_total_assets_employed' => 'double',
'return_on_net_assets_employed' => 'double',
'sales_or_net_working_capital' => 'double',
'stock_turnover_ratio' => 'double',
'debtor_days' => 'double',
'creditor_days' => 'double',
'current_ratio' => 'double',
'liquidity_ratio_or_acid_test' => 'double',
'current_debt_ratio' => 'double',
'gearing' => 'double',
'equity_in_percentage' => 'double',
'total_debt_ratio' => 'double'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'pre_tax_profit_margin' => 'double',
'return_on_capital_employed' => 'double',
'return_on_total_assets_employed' => 'double',
'return_on_net_assets_employed' => 'double',
'sales_or_net_working_capital' => 'double',
'stock_turnover_ratio' => 'double',
'debtor_days' => 'double',
'creditor_days' => 'double',
'current_ratio' => 'double',
'liquidity_ratio_or_acid_test' => 'double',
'current_debt_ratio' => 'double',
'gearing' => 'double',
'equity_in_percentage' => 'double',
'total_debt_ratio' => 'double'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pre_tax_profit_margin' => 'preTaxProfitMargin',
'return_on_capital_employed' => 'returnOnCapitalEmployed',
'return_on_total_assets_employed' => 'returnOnTotalAssetsEmployed',
'return_on_net_assets_employed' => 'returnOnNetAssetsEmployed',
'sales_or_net_working_capital' => 'salesOrNetWorkingCapital',
'stock_turnover_ratio' => 'stockTurnoverRatio',
'debtor_days' => 'debtorDays',
'creditor_days' => 'creditorDays',
'current_ratio' => 'currentRatio',
'liquidity_ratio_or_acid_test' => 'liquidityRatioOrAcidTest',
'current_debt_ratio' => 'currentDebtRatio',
'gearing' => 'gearing',
'equity_in_percentage' => 'equityInPercentage',
'total_debt_ratio' => 'totalDebtRatio'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pre_tax_profit_margin' => 'setPreTaxProfitMargin',
'return_on_capital_employed' => 'setReturnOnCapitalEmployed',
'return_on_total_assets_employed' => 'setReturnOnTotalAssetsEmployed',
'return_on_net_assets_employed' => 'setReturnOnNetAssetsEmployed',
'sales_or_net_working_capital' => 'setSalesOrNetWorkingCapital',
'stock_turnover_ratio' => 'setStockTurnoverRatio',
'debtor_days' => 'setDebtorDays',
'creditor_days' => 'setCreditorDays',
'current_ratio' => 'setCurrentRatio',
'liquidity_ratio_or_acid_test' => 'setLiquidityRatioOrAcidTest',
'current_debt_ratio' => 'setCurrentDebtRatio',
'gearing' => 'setGearing',
'equity_in_percentage' => 'setEquityInPercentage',
'total_debt_ratio' => 'setTotalDebtRatio'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pre_tax_profit_margin' => 'getPreTaxProfitMargin',
'return_on_capital_employed' => 'getReturnOnCapitalEmployed',
'return_on_total_assets_employed' => 'getReturnOnTotalAssetsEmployed',
'return_on_net_assets_employed' => 'getReturnOnNetAssetsEmployed',
'sales_or_net_working_capital' => 'getSalesOrNetWorkingCapital',
'stock_turnover_ratio' => 'getStockTurnoverRatio',
'debtor_days' => 'getDebtorDays',
'creditor_days' => 'getCreditorDays',
'current_ratio' => 'getCurrentRatio',
'liquidity_ratio_or_acid_test' => 'getLiquidityRatioOrAcidTest',
'current_debt_ratio' => 'getCurrentDebtRatio',
'gearing' => 'getGearing',
'equity_in_percentage' => 'getEquityInPercentage',
'total_debt_ratio' => 'getTotalDebtRatio'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pre_tax_profit_margin'] = isset($data['pre_tax_profit_margin']) ? $data['pre_tax_profit_margin'] : null;
        $this->container['return_on_capital_employed'] = isset($data['return_on_capital_employed']) ? $data['return_on_capital_employed'] : null;
        $this->container['return_on_total_assets_employed'] = isset($data['return_on_total_assets_employed']) ? $data['return_on_total_assets_employed'] : null;
        $this->container['return_on_net_assets_employed'] = isset($data['return_on_net_assets_employed']) ? $data['return_on_net_assets_employed'] : null;
        $this->container['sales_or_net_working_capital'] = isset($data['sales_or_net_working_capital']) ? $data['sales_or_net_working_capital'] : null;
        $this->container['stock_turnover_ratio'] = isset($data['stock_turnover_ratio']) ? $data['stock_turnover_ratio'] : null;
        $this->container['debtor_days'] = isset($data['debtor_days']) ? $data['debtor_days'] : null;
        $this->container['creditor_days'] = isset($data['creditor_days']) ? $data['creditor_days'] : null;
        $this->container['current_ratio'] = isset($data['current_ratio']) ? $data['current_ratio'] : null;
        $this->container['liquidity_ratio_or_acid_test'] = isset($data['liquidity_ratio_or_acid_test']) ? $data['liquidity_ratio_or_acid_test'] : null;
        $this->container['current_debt_ratio'] = isset($data['current_debt_ratio']) ? $data['current_debt_ratio'] : null;
        $this->container['gearing'] = isset($data['gearing']) ? $data['gearing'] : null;
        $this->container['equity_in_percentage'] = isset($data['equity_in_percentage']) ? $data['equity_in_percentage'] : null;
        $this->container['total_debt_ratio'] = isset($data['total_debt_ratio']) ? $data['total_debt_ratio'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pre_tax_profit_margin
     *
     * @return double
     */
    public function getPreTaxProfitMargin()
    {
        return $this->container['pre_tax_profit_margin'];
    }

    /**
     * Sets pre_tax_profit_margin
     *
     * @param double $pre_tax_profit_margin pre_tax_profit_margin
     *
     * @return $this
     */
    public function setPreTaxProfitMargin($pre_tax_profit_margin)
    {
        $this->container['pre_tax_profit_margin'] = $pre_tax_profit_margin;

        return $this;
    }

    /**
     * Gets return_on_capital_employed
     *
     * @return double
     */
    public function getReturnOnCapitalEmployed()
    {
        return $this->container['return_on_capital_employed'];
    }

    /**
     * Sets return_on_capital_employed
     *
     * @param double $return_on_capital_employed return_on_capital_employed
     *
     * @return $this
     */
    public function setReturnOnCapitalEmployed($return_on_capital_employed)
    {
        $this->container['return_on_capital_employed'] = $return_on_capital_employed;

        return $this;
    }

    /**
     * Gets return_on_total_assets_employed
     *
     * @return double
     */
    public function getReturnOnTotalAssetsEmployed()
    {
        return $this->container['return_on_total_assets_employed'];
    }

    /**
     * Sets return_on_total_assets_employed
     *
     * @param double $return_on_total_assets_employed return_on_total_assets_employed
     *
     * @return $this
     */
    public function setReturnOnTotalAssetsEmployed($return_on_total_assets_employed)
    {
        $this->container['return_on_total_assets_employed'] = $return_on_total_assets_employed;

        return $this;
    }

    /**
     * Gets return_on_net_assets_employed
     *
     * @return double
     */
    public function getReturnOnNetAssetsEmployed()
    {
        return $this->container['return_on_net_assets_employed'];
    }

    /**
     * Sets return_on_net_assets_employed
     *
     * @param double $return_on_net_assets_employed return_on_net_assets_employed
     *
     * @return $this
     */
    public function setReturnOnNetAssetsEmployed($return_on_net_assets_employed)
    {
        $this->container['return_on_net_assets_employed'] = $return_on_net_assets_employed;

        return $this;
    }

    /**
     * Gets sales_or_net_working_capital
     *
     * @return double
     */
    public function getSalesOrNetWorkingCapital()
    {
        return $this->container['sales_or_net_working_capital'];
    }

    /**
     * Sets sales_or_net_working_capital
     *
     * @param double $sales_or_net_working_capital sales_or_net_working_capital
     *
     * @return $this
     */
    public function setSalesOrNetWorkingCapital($sales_or_net_working_capital)
    {
        $this->container['sales_or_net_working_capital'] = $sales_or_net_working_capital;

        return $this;
    }

    /**
     * Gets stock_turnover_ratio
     *
     * @return double
     */
    public function getStockTurnoverRatio()
    {
        return $this->container['stock_turnover_ratio'];
    }

    /**
     * Sets stock_turnover_ratio
     *
     * @param double $stock_turnover_ratio stock_turnover_ratio
     *
     * @return $this
     */
    public function setStockTurnoverRatio($stock_turnover_ratio)
    {
        $this->container['stock_turnover_ratio'] = $stock_turnover_ratio;

        return $this;
    }

    /**
     * Gets debtor_days
     *
     * @return double
     */
    public function getDebtorDays()
    {
        return $this->container['debtor_days'];
    }

    /**
     * Sets debtor_days
     *
     * @param double $debtor_days debtor_days
     *
     * @return $this
     */
    public function setDebtorDays($debtor_days)
    {
        $this->container['debtor_days'] = $debtor_days;

        return $this;
    }

    /**
     * Gets creditor_days
     *
     * @return double
     */
    public function getCreditorDays()
    {
        return $this->container['creditor_days'];
    }

    /**
     * Sets creditor_days
     *
     * @param double $creditor_days creditor_days
     *
     * @return $this
     */
    public function setCreditorDays($creditor_days)
    {
        $this->container['creditor_days'] = $creditor_days;

        return $this;
    }

    /**
     * Gets current_ratio
     *
     * @return double
     */
    public function getCurrentRatio()
    {
        return $this->container['current_ratio'];
    }

    /**
     * Sets current_ratio
     *
     * @param double $current_ratio current_ratio
     *
     * @return $this
     */
    public function setCurrentRatio($current_ratio)
    {
        $this->container['current_ratio'] = $current_ratio;

        return $this;
    }

    /**
     * Gets liquidity_ratio_or_acid_test
     *
     * @return double
     */
    public function getLiquidityRatioOrAcidTest()
    {
        return $this->container['liquidity_ratio_or_acid_test'];
    }

    /**
     * Sets liquidity_ratio_or_acid_test
     *
     * @param double $liquidity_ratio_or_acid_test liquidity_ratio_or_acid_test
     *
     * @return $this
     */
    public function setLiquidityRatioOrAcidTest($liquidity_ratio_or_acid_test)
    {
        $this->container['liquidity_ratio_or_acid_test'] = $liquidity_ratio_or_acid_test;

        return $this;
    }

    /**
     * Gets current_debt_ratio
     *
     * @return double
     */
    public function getCurrentDebtRatio()
    {
        return $this->container['current_debt_ratio'];
    }

    /**
     * Sets current_debt_ratio
     *
     * @param double $current_debt_ratio current_debt_ratio
     *
     * @return $this
     */
    public function setCurrentDebtRatio($current_debt_ratio)
    {
        $this->container['current_debt_ratio'] = $current_debt_ratio;

        return $this;
    }

    /**
     * Gets gearing
     *
     * @return double
     */
    public function getGearing()
    {
        return $this->container['gearing'];
    }

    /**
     * Sets gearing
     *
     * @param double $gearing gearing
     *
     * @return $this
     */
    public function setGearing($gearing)
    {
        $this->container['gearing'] = $gearing;

        return $this;
    }

    /**
     * Gets equity_in_percentage
     *
     * @return double
     */
    public function getEquityInPercentage()
    {
        return $this->container['equity_in_percentage'];
    }

    /**
     * Sets equity_in_percentage
     *
     * @param double $equity_in_percentage equity_in_percentage
     *
     * @return $this
     */
    public function setEquityInPercentage($equity_in_percentage)
    {
        $this->container['equity_in_percentage'] = $equity_in_percentage;

        return $this;
    }

    /**
     * Gets total_debt_ratio
     *
     * @return double
     */
    public function getTotalDebtRatio()
    {
        return $this->container['total_debt_ratio'];
    }

    /**
     * Sets total_debt_ratio
     *
     * @param double $total_debt_ratio total_debt_ratio
     *
     * @return $this
     */
    public function setTotalDebtRatio($total_debt_ratio)
    {
        $this->container['total_debt_ratio'] = $total_debt_ratio;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
