<?php
/**
 * CreditsafeGlobalDataReportsProfitAndLossFigures
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreditsafeGlobalDataReportsProfitAndLossFigures Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreditsafeGlobalDataReportsProfitAndLossFigures implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Creditsafe.GlobalData.Reports.ProfitAndLossFigures';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'revenue' => 'double',
'operating_costs' => 'double',
'operating_profit' => 'double',
'wages_and_salaries' => 'double',
'pension_costs' => 'double',
'depreciation' => 'double',
'amortisation' => 'double',
'financial_income' => 'double',
'financial_expenses' => 'double',
'extraordinary_income' => 'double',
'extraordinary_costs' => 'double',
'profit_before_tax' => 'double',
'tax' => 'double',
'profit_after_tax' => 'double',
'dividends' => 'double',
'minority_interests' => 'double',
'other_appropriations' => 'double',
'retained_profit' => 'double'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'revenue' => 'double',
'operating_costs' => 'double',
'operating_profit' => 'double',
'wages_and_salaries' => 'double',
'pension_costs' => 'double',
'depreciation' => 'double',
'amortisation' => 'double',
'financial_income' => 'double',
'financial_expenses' => 'double',
'extraordinary_income' => 'double',
'extraordinary_costs' => 'double',
'profit_before_tax' => 'double',
'tax' => 'double',
'profit_after_tax' => 'double',
'dividends' => 'double',
'minority_interests' => 'double',
'other_appropriations' => 'double',
'retained_profit' => 'double'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'revenue' => 'revenue',
'operating_costs' => 'operatingCosts',
'operating_profit' => 'operatingProfit',
'wages_and_salaries' => 'wagesAndSalaries',
'pension_costs' => 'pensionCosts',
'depreciation' => 'depreciation',
'amortisation' => 'amortisation',
'financial_income' => 'financialIncome',
'financial_expenses' => 'financialExpenses',
'extraordinary_income' => 'extraordinaryIncome',
'extraordinary_costs' => 'extraordinaryCosts',
'profit_before_tax' => 'profitBeforeTax',
'tax' => 'tax',
'profit_after_tax' => 'profitAfterTax',
'dividends' => 'dividends',
'minority_interests' => 'minorityInterests',
'other_appropriations' => 'otherAppropriations',
'retained_profit' => 'retainedProfit'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'revenue' => 'setRevenue',
'operating_costs' => 'setOperatingCosts',
'operating_profit' => 'setOperatingProfit',
'wages_and_salaries' => 'setWagesAndSalaries',
'pension_costs' => 'setPensionCosts',
'depreciation' => 'setDepreciation',
'amortisation' => 'setAmortisation',
'financial_income' => 'setFinancialIncome',
'financial_expenses' => 'setFinancialExpenses',
'extraordinary_income' => 'setExtraordinaryIncome',
'extraordinary_costs' => 'setExtraordinaryCosts',
'profit_before_tax' => 'setProfitBeforeTax',
'tax' => 'setTax',
'profit_after_tax' => 'setProfitAfterTax',
'dividends' => 'setDividends',
'minority_interests' => 'setMinorityInterests',
'other_appropriations' => 'setOtherAppropriations',
'retained_profit' => 'setRetainedProfit'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'revenue' => 'getRevenue',
'operating_costs' => 'getOperatingCosts',
'operating_profit' => 'getOperatingProfit',
'wages_and_salaries' => 'getWagesAndSalaries',
'pension_costs' => 'getPensionCosts',
'depreciation' => 'getDepreciation',
'amortisation' => 'getAmortisation',
'financial_income' => 'getFinancialIncome',
'financial_expenses' => 'getFinancialExpenses',
'extraordinary_income' => 'getExtraordinaryIncome',
'extraordinary_costs' => 'getExtraordinaryCosts',
'profit_before_tax' => 'getProfitBeforeTax',
'tax' => 'getTax',
'profit_after_tax' => 'getProfitAfterTax',
'dividends' => 'getDividends',
'minority_interests' => 'getMinorityInterests',
'other_appropriations' => 'getOtherAppropriations',
'retained_profit' => 'getRetainedProfit'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['revenue'] = isset($data['revenue']) ? $data['revenue'] : null;
        $this->container['operating_costs'] = isset($data['operating_costs']) ? $data['operating_costs'] : null;
        $this->container['operating_profit'] = isset($data['operating_profit']) ? $data['operating_profit'] : null;
        $this->container['wages_and_salaries'] = isset($data['wages_and_salaries']) ? $data['wages_and_salaries'] : null;
        $this->container['pension_costs'] = isset($data['pension_costs']) ? $data['pension_costs'] : null;
        $this->container['depreciation'] = isset($data['depreciation']) ? $data['depreciation'] : null;
        $this->container['amortisation'] = isset($data['amortisation']) ? $data['amortisation'] : null;
        $this->container['financial_income'] = isset($data['financial_income']) ? $data['financial_income'] : null;
        $this->container['financial_expenses'] = isset($data['financial_expenses']) ? $data['financial_expenses'] : null;
        $this->container['extraordinary_income'] = isset($data['extraordinary_income']) ? $data['extraordinary_income'] : null;
        $this->container['extraordinary_costs'] = isset($data['extraordinary_costs']) ? $data['extraordinary_costs'] : null;
        $this->container['profit_before_tax'] = isset($data['profit_before_tax']) ? $data['profit_before_tax'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['profit_after_tax'] = isset($data['profit_after_tax']) ? $data['profit_after_tax'] : null;
        $this->container['dividends'] = isset($data['dividends']) ? $data['dividends'] : null;
        $this->container['minority_interests'] = isset($data['minority_interests']) ? $data['minority_interests'] : null;
        $this->container['other_appropriations'] = isset($data['other_appropriations']) ? $data['other_appropriations'] : null;
        $this->container['retained_profit'] = isset($data['retained_profit']) ? $data['retained_profit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets revenue
     *
     * @return double
     */
    public function getRevenue()
    {
        return $this->container['revenue'];
    }

    /**
     * Sets revenue
     *
     * @param double $revenue revenue
     *
     * @return $this
     */
    public function setRevenue($revenue)
    {
        $this->container['revenue'] = $revenue;

        return $this;
    }

    /**
     * Gets operating_costs
     *
     * @return double
     */
    public function getOperatingCosts()
    {
        return $this->container['operating_costs'];
    }

    /**
     * Sets operating_costs
     *
     * @param double $operating_costs operating_costs
     *
     * @return $this
     */
    public function setOperatingCosts($operating_costs)
    {
        $this->container['operating_costs'] = $operating_costs;

        return $this;
    }

    /**
     * Gets operating_profit
     *
     * @return double
     */
    public function getOperatingProfit()
    {
        return $this->container['operating_profit'];
    }

    /**
     * Sets operating_profit
     *
     * @param double $operating_profit operating_profit
     *
     * @return $this
     */
    public function setOperatingProfit($operating_profit)
    {
        $this->container['operating_profit'] = $operating_profit;

        return $this;
    }

    /**
     * Gets wages_and_salaries
     *
     * @return double
     */
    public function getWagesAndSalaries()
    {
        return $this->container['wages_and_salaries'];
    }

    /**
     * Sets wages_and_salaries
     *
     * @param double $wages_and_salaries wages_and_salaries
     *
     * @return $this
     */
    public function setWagesAndSalaries($wages_and_salaries)
    {
        $this->container['wages_and_salaries'] = $wages_and_salaries;

        return $this;
    }

    /**
     * Gets pension_costs
     *
     * @return double
     */
    public function getPensionCosts()
    {
        return $this->container['pension_costs'];
    }

    /**
     * Sets pension_costs
     *
     * @param double $pension_costs pension_costs
     *
     * @return $this
     */
    public function setPensionCosts($pension_costs)
    {
        $this->container['pension_costs'] = $pension_costs;

        return $this;
    }

    /**
     * Gets depreciation
     *
     * @return double
     */
    public function getDepreciation()
    {
        return $this->container['depreciation'];
    }

    /**
     * Sets depreciation
     *
     * @param double $depreciation depreciation
     *
     * @return $this
     */
    public function setDepreciation($depreciation)
    {
        $this->container['depreciation'] = $depreciation;

        return $this;
    }

    /**
     * Gets amortisation
     *
     * @return double
     */
    public function getAmortisation()
    {
        return $this->container['amortisation'];
    }

    /**
     * Sets amortisation
     *
     * @param double $amortisation amortisation
     *
     * @return $this
     */
    public function setAmortisation($amortisation)
    {
        $this->container['amortisation'] = $amortisation;

        return $this;
    }

    /**
     * Gets financial_income
     *
     * @return double
     */
    public function getFinancialIncome()
    {
        return $this->container['financial_income'];
    }

    /**
     * Sets financial_income
     *
     * @param double $financial_income financial_income
     *
     * @return $this
     */
    public function setFinancialIncome($financial_income)
    {
        $this->container['financial_income'] = $financial_income;

        return $this;
    }

    /**
     * Gets financial_expenses
     *
     * @return double
     */
    public function getFinancialExpenses()
    {
        return $this->container['financial_expenses'];
    }

    /**
     * Sets financial_expenses
     *
     * @param double $financial_expenses financial_expenses
     *
     * @return $this
     */
    public function setFinancialExpenses($financial_expenses)
    {
        $this->container['financial_expenses'] = $financial_expenses;

        return $this;
    }

    /**
     * Gets extraordinary_income
     *
     * @return double
     */
    public function getExtraordinaryIncome()
    {
        return $this->container['extraordinary_income'];
    }

    /**
     * Sets extraordinary_income
     *
     * @param double $extraordinary_income extraordinary_income
     *
     * @return $this
     */
    public function setExtraordinaryIncome($extraordinary_income)
    {
        $this->container['extraordinary_income'] = $extraordinary_income;

        return $this;
    }

    /**
     * Gets extraordinary_costs
     *
     * @return double
     */
    public function getExtraordinaryCosts()
    {
        return $this->container['extraordinary_costs'];
    }

    /**
     * Sets extraordinary_costs
     *
     * @param double $extraordinary_costs extraordinary_costs
     *
     * @return $this
     */
    public function setExtraordinaryCosts($extraordinary_costs)
    {
        $this->container['extraordinary_costs'] = $extraordinary_costs;

        return $this;
    }

    /**
     * Gets profit_before_tax
     *
     * @return double
     */
    public function getProfitBeforeTax()
    {
        return $this->container['profit_before_tax'];
    }

    /**
     * Sets profit_before_tax
     *
     * @param double $profit_before_tax profit_before_tax
     *
     * @return $this
     */
    public function setProfitBeforeTax($profit_before_tax)
    {
        $this->container['profit_before_tax'] = $profit_before_tax;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return double
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param double $tax tax
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets profit_after_tax
     *
     * @return double
     */
    public function getProfitAfterTax()
    {
        return $this->container['profit_after_tax'];
    }

    /**
     * Sets profit_after_tax
     *
     * @param double $profit_after_tax profit_after_tax
     *
     * @return $this
     */
    public function setProfitAfterTax($profit_after_tax)
    {
        $this->container['profit_after_tax'] = $profit_after_tax;

        return $this;
    }

    /**
     * Gets dividends
     *
     * @return double
     */
    public function getDividends()
    {
        return $this->container['dividends'];
    }

    /**
     * Sets dividends
     *
     * @param double $dividends dividends
     *
     * @return $this
     */
    public function setDividends($dividends)
    {
        $this->container['dividends'] = $dividends;

        return $this;
    }

    /**
     * Gets minority_interests
     *
     * @return double
     */
    public function getMinorityInterests()
    {
        return $this->container['minority_interests'];
    }

    /**
     * Sets minority_interests
     *
     * @param double $minority_interests minority_interests
     *
     * @return $this
     */
    public function setMinorityInterests($minority_interests)
    {
        $this->container['minority_interests'] = $minority_interests;

        return $this;
    }

    /**
     * Gets other_appropriations
     *
     * @return double
     */
    public function getOtherAppropriations()
    {
        return $this->container['other_appropriations'];
    }

    /**
     * Sets other_appropriations
     *
     * @param double $other_appropriations other_appropriations
     *
     * @return $this
     */
    public function setOtherAppropriations($other_appropriations)
    {
        $this->container['other_appropriations'] = $other_appropriations;

        return $this;
    }

    /**
     * Gets retained_profit
     *
     * @return double
     */
    public function getRetainedProfit()
    {
        return $this->container['retained_profit'];
    }

    /**
     * Sets retained_profit
     *
     * @param double $retained_profit retained_profit
     *
     * @return $this
     */
    public function setRetainedProfit($retained_profit)
    {
        $this->container['retained_profit'] = $retained_profit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
