<?php
/**
 * CreditsafeGlobalDataReportsShareHolder
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Creditsafe Connect
 *
 * Creditsafe Connect is a REST API that provides access to the <a href=\"https://www.creditsafe.com/gb/en/more/about/our-data.html\">Creditsafe Global Company Database.</a> This allows you to: <ul><li>Control your master data</li><li>Utilise up-to-date Business and Director information, enhancing your onboarding and qualification processes</li><li>Recieve alerts when your customer's and supplier's Credit Report changes</li></ul> <h2>Quick Start</h2> To start your Creditsafe Connect API integration you will need to have activated your account and set a password by following the instructions in your Welcome Email. If you have not received a Welcome Email please contact your Creditsafe Account Manager.</br></br>By default, you will have been setup on our Sandbox environment.</br></br> Using a REST API client construct an `/authenticate` POST request and enter your username & password (case-sensitive) into the POST body. A successful response will return an  `authentication token`.</br></br> Use the `authentication token` in an `Authorization` header on all other Creditsafe Connect calls as proof of your authenticity.  <h2>Environments</h2>Production Environment baseurl: <code> https://connect.creditsafe.com/v1 </code> </br> Sandbox Test Environment baseurl:  <code>https://connect.sandbox.creditsafe.com/v1</code> <h2>Resources</h2> <ul> <li><a href=\"https://creditsafe.github.io/connect-docs/cs_connectv1-15.html\">OpenAPI</a> specification.</li><li><a href=\"https://www.getpostman.com/collections/4406bbddb81c308db8ff\">Postman Collection</a> of the most common example calls to Creditsafe Connect.</li> <li><a href=\"https://connect-portal.creditsafe.com\"> A Front End Demo Site</a>. Use this as a quick easy way to validate your username & password and form requests.</li> <li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/categories/7000007071/folders/7000018640\"> Help Articles</a>  including: <ul><li>FAQs</li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000053487-connect-api-data-dictionaries\"> Data Dictionaries </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054765-connect-api-data-availability-per-country\"> Data Availability per Country </a></li><li><a href=\"https://creditsafe.freshdesk.com/en/support/solutions/articles/7000054656-connect-api-feature-availability-per-country\"> Feature Availability Matrix</a></li></ul></ul>
 *
 * OpenAPI spec version: 1.5.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * CreditsafeGlobalDataReportsShareHolder Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreditsafeGlobalDataReportsShareHolder extends CreditsafeGlobalDataReportsEntityFullName 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Creditsafe.GlobalData.Reports.ShareHolder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shareholder_type' => '\Swagger\Client\Model\CreditsafeGlobalDataReportsEntityType',
'share_type' => 'string',
'currency' => '\Swagger\Client\Model\CreditsafeGlobalDataCurrency',
'total_value_of_shares_owned' => 'double',
'total_number_of_shares_owned' => 'int',
'percent_shares_held' => 'double',
'start_date' => '\DateTime',
'end_date' => '\DateTime',
'has_negative_info' => 'bool',
'share_classes' => '\Swagger\Client\Model\CreditsafeGlobalDataReportsShareClass[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shareholder_type' => null,
'share_type' => null,
'currency' => null,
'total_value_of_shares_owned' => 'double',
'total_number_of_shares_owned' => 'int64',
'percent_shares_held' => 'double',
'start_date' => 'date-time',
'end_date' => 'date-time',
'has_negative_info' => null,
'share_classes' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shareholder_type' => 'shareholderType',
'share_type' => 'shareType',
'currency' => 'currency',
'total_value_of_shares_owned' => 'totalValueOfSharesOwned',
'total_number_of_shares_owned' => 'totalNumberOfSharesOwned',
'percent_shares_held' => 'percentSharesHeld',
'start_date' => 'startDate',
'end_date' => 'endDate',
'has_negative_info' => 'hasNegativeInfo',
'share_classes' => 'shareClasses'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shareholder_type' => 'setShareholderType',
'share_type' => 'setShareType',
'currency' => 'setCurrency',
'total_value_of_shares_owned' => 'setTotalValueOfSharesOwned',
'total_number_of_shares_owned' => 'setTotalNumberOfSharesOwned',
'percent_shares_held' => 'setPercentSharesHeld',
'start_date' => 'setStartDate',
'end_date' => 'setEndDate',
'has_negative_info' => 'setHasNegativeInfo',
'share_classes' => 'setShareClasses'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shareholder_type' => 'getShareholderType',
'share_type' => 'getShareType',
'currency' => 'getCurrency',
'total_value_of_shares_owned' => 'getTotalValueOfSharesOwned',
'total_number_of_shares_owned' => 'getTotalNumberOfSharesOwned',
'percent_shares_held' => 'getPercentSharesHeld',
'start_date' => 'getStartDate',
'end_date' => 'getEndDate',
'has_negative_info' => 'getHasNegativeInfo',
'share_classes' => 'getShareClasses'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['shareholder_type'] = isset($data['shareholder_type']) ? $data['shareholder_type'] : null;
        $this->container['share_type'] = isset($data['share_type']) ? $data['share_type'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['total_value_of_shares_owned'] = isset($data['total_value_of_shares_owned']) ? $data['total_value_of_shares_owned'] : null;
        $this->container['total_number_of_shares_owned'] = isset($data['total_number_of_shares_owned']) ? $data['total_number_of_shares_owned'] : null;
        $this->container['percent_shares_held'] = isset($data['percent_shares_held']) ? $data['percent_shares_held'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['has_negative_info'] = isset($data['has_negative_info']) ? $data['has_negative_info'] : null;
        $this->container['share_classes'] = isset($data['share_classes']) ? $data['share_classes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shareholder_type
     *
     * @return \Swagger\Client\Model\CreditsafeGlobalDataReportsEntityType
     */
    public function getShareholderType()
    {
        return $this->container['shareholder_type'];
    }

    /**
     * Sets shareholder_type
     *
     * @param \Swagger\Client\Model\CreditsafeGlobalDataReportsEntityType $shareholder_type shareholder_type
     *
     * @return $this
     */
    public function setShareholderType($shareholder_type)
    {
        $this->container['shareholder_type'] = $shareholder_type;

        return $this;
    }

    /**
     * Gets share_type
     *
     * @return string
     */
    public function getShareType()
    {
        return $this->container['share_type'];
    }

    /**
     * Sets share_type
     *
     * @param string $share_type share_type
     *
     * @return $this
     */
    public function setShareType($share_type)
    {
        $this->container['share_type'] = $share_type;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Swagger\Client\Model\CreditsafeGlobalDataCurrency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Swagger\Client\Model\CreditsafeGlobalDataCurrency $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets total_value_of_shares_owned
     *
     * @return double
     */
    public function getTotalValueOfSharesOwned()
    {
        return $this->container['total_value_of_shares_owned'];
    }

    /**
     * Sets total_value_of_shares_owned
     *
     * @param double $total_value_of_shares_owned total_value_of_shares_owned
     *
     * @return $this
     */
    public function setTotalValueOfSharesOwned($total_value_of_shares_owned)
    {
        $this->container['total_value_of_shares_owned'] = $total_value_of_shares_owned;

        return $this;
    }

    /**
     * Gets total_number_of_shares_owned
     *
     * @return int
     */
    public function getTotalNumberOfSharesOwned()
    {
        return $this->container['total_number_of_shares_owned'];
    }

    /**
     * Sets total_number_of_shares_owned
     *
     * @param int $total_number_of_shares_owned total_number_of_shares_owned
     *
     * @return $this
     */
    public function setTotalNumberOfSharesOwned($total_number_of_shares_owned)
    {
        $this->container['total_number_of_shares_owned'] = $total_number_of_shares_owned;

        return $this;
    }

    /**
     * Gets percent_shares_held
     *
     * @return double
     */
    public function getPercentSharesHeld()
    {
        return $this->container['percent_shares_held'];
    }

    /**
     * Sets percent_shares_held
     *
     * @param double $percent_shares_held percent_shares_held
     *
     * @return $this
     */
    public function setPercentSharesHeld($percent_shares_held)
    {
        $this->container['percent_shares_held'] = $percent_shares_held;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets has_negative_info
     *
     * @return bool
     */
    public function getHasNegativeInfo()
    {
        return $this->container['has_negative_info'];
    }

    /**
     * Sets has_negative_info
     *
     * @param bool $has_negative_info has_negative_info
     *
     * @return $this
     */
    public function setHasNegativeInfo($has_negative_info)
    {
        $this->container['has_negative_info'] = $has_negative_info;

        return $this;
    }

    /**
     * Gets share_classes
     *
     * @return \Swagger\Client\Model\CreditsafeGlobalDataReportsShareClass[]
     */
    public function getShareClasses()
    {
        return $this->container['share_classes'];
    }

    /**
     * Sets share_classes
     *
     * @param \Swagger\Client\Model\CreditsafeGlobalDataReportsShareClass[] $share_classes share_classes
     *
     * @return $this
     */
    public function setShareClasses($share_classes)
    {
        $this->container['share_classes'] = $share_classes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
